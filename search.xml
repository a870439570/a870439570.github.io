<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【PMP备考】引论项目的概述和目的</title>
      <link href="/2019/01/29/sui-bi/pmp-bei-kao-yin-lun-xiang-mu-de-gai-shu-he-mu-de/"/>
      <url>/2019/01/29/sui-bi/pmp-bei-kao-yin-lun-xiang-mu-de-gai-shu-he-mu-de/</url>
      
        <content type="html"><![CDATA[<p><img src="https://images.gitee.com/uploads/images/2019/0129/153915_8785d8d1_1478371.png" width=""></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>项目是为创造独特的产品、服务或成果而进行的临时性工作</li></ul><h2 id="基本要素"><a href="#基本要素" class="headerlink" title="基本要素"></a>基本要素</h2><ul><li>独特的产品、服务或成果</li><li><p>临时性工作</p></li><li><p>项目驱动变革</p></li><li>项目创造商业价值</li><li>项目启动背景</li><li>项目管理的重要性</li><li>项目、项目集、项目组合以及运营管理之间的关系</li><li>指南的组成部分</li></ul><h2 id="独特的产品、服务或成果"><a href="#独特的产品、服务或成果" class="headerlink" title="独特的产品、服务或成果"></a>独特的产品、服务或成果</h2><ul><li>一个独特的产品可能是其他产品的组成部分,某个产品的升级版或修正版</li><li>一种独特的服务或提供某种服务的能力</li><li>一个或多个产品、服务或成果的独特组合</li><li>一项独特的成果，例如某个结果或文件</li></ul><h2 id="临时性工作"><a href="#临时性工作" class="headerlink" title="临时性工作"></a>临时性工作</h2><ul><li><p>临时性是指明有启点和终点</p></li><li><p>项目是临时性工作，但其可交付成果可能会在项目的终止后依然存在。</p></li></ul><h2 id="什么情况下项目宣告结束"><a href="#什么情况下项目宣告结束" class="headerlink" title="什么情况下项目宣告结束"></a>什么情况下项目宣告结束</h2><ul><li>达成项目目标</li><li>不会或不能达到目标</li><li>资金耗尽或再无可分配给项目的资金</li><li>客户不再要求完成项目</li><li>无法获得所需人力或物力资源</li><li>出于法律或便利原因而终止项目</li></ul><h2 id="项目驱动变革"><a href="#项目驱动变革" class="headerlink" title="项目驱动变革"></a>项目驱动变革</h2><ul><li>推动组织从一个状态转换为另一个状态</li></ul><h2 id="项目创造商业价值"><a href="#项目创造商业价值" class="headerlink" title="项目创造商业价值"></a>项目创造商业价值</h2><ul><li>从商业运作中获得的可量化净效益,效益可以是有形的、无形的或两者兼有之</li></ul><h3 id="有形的"><a href="#有形的" class="headerlink" title="有形的"></a>有形的</h3><ul><li>货币资产；</li><li>股东权益；</li><li>公共事业；</li><li>固定设施；</li><li>工具；</li><li>市场份额</li></ul><h3 id="无形的"><a href="#无形的" class="headerlink" title="无形的"></a>无形的</h3><ul><li>商誉；</li><li>品牌认知度；</li><li>公共利益；</li><li>商标；</li><li>战略一致性；</li><li>声誉。</li></ul><h2 id="项目启动背景"><a href="#项目启动背景" class="headerlink" title="项目启动背景"></a>项目启动背景</h2><ul><li>符合法规、法律或社会要求；</li><li>满足相关方的要求或需求；</li><li>执行、变更业务或技术战略；</li><li>创造、改进或修复产品、过程或服务</li></ul><h2 id="项目管理的重要性"><a href="#项目管理的重要性" class="headerlink" title="项目管理的重要性"></a>项目管理的重要性</h2><p>项目管理就是将知识、技能、工具与技术应用于项目活动，以满足项目的要求。项目管理通过合理<br>运用与整合特定项目所需的项目管理过程得以实现。项目管理使组织能够有效且高效地开展项目</p><h3 id="有效的项目管理优点"><a href="#有效的项目管理优点" class="headerlink" title="有效的项目管理优点"></a>有效的项目管理优点</h3><ul><li>达成业务目标； 满足相关方的期望；</li><li>提高可预测性； 提高成功的概率；</li><li>在适当的时间交付正确的产品；</li><li>解决问题和争议； 及时应对风险；</li><li>优化组织资源的使用； 识别、挽救或终止失败项目；</li><li>管理制约因素（例如范围、质量、进度、成本、资源）；</li><li>平衡制约因素对项目的影响（例如范围扩大可能会增加成本或延长进度）；</li><li>以更好的方式管理变更</li></ul><h3 id="无效的项目管理带来的缺点"><a href="#无效的项目管理带来的缺点" class="headerlink" title="无效的项目管理带来的缺点"></a>无效的项目管理带来的缺点</h3><ul><li>超过时限； 成本超支； 质量低劣； 返工；</li><li>项目范围扩大失控； 组织声誉受损；</li><li>相关方不满意； 正在实施的项目无法达成目标。</li></ul><h2 id="项目-项目集-项目组合以及运营管理之间的关系"><a href="#项目-项目集-项目组合以及运营管理之间的关系" class="headerlink" title="项目,项目集,项目组合以及运营管理之间的关系"></a>项目,项目集,项目组合以及运营管理之间的关系</h2><h3 id="项目集"><a href="#项目集" class="headerlink" title="项目集"></a>项目集</h3><ul><li><p>为实现战略目标而组合在一起管理的项目,项目集、子项目组合和运营工作.</p></li><li><p>项目集管理注重项目与项目以及项目与项目集之间的依赖关系</p></li><li>以便获得分别管理无法获得的效益</li></ul><h3 id="项目组合"><a href="#项目组合" class="headerlink" title="项目组合"></a>项目组合</h3><p>为实现战略目标而组合在一起管理的项目，项目集、子项目组合和运营工作。</p><p>项目组合中的项目集或项目不一定依赖</p><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><ul><li>指导组织的投资决策。</li><li>选择项目集与项目的最佳组合方式，以达成战略目标。</li><li>提供决策透明度。</li><li>确定团队和实物资源分配的优先顺序。</li><li>提高实现预期投资回报的可能性。</li><li>实现对所有组成部分的综合风险的集中式管理。</li></ul><h3 id="运营管理"><a href="#运营管理" class="headerlink" title="运营管理"></a>运营管理</h3><p>关注产品的持续生产和服务的持续运作</p><ul><li>在新产品开发、产品升级或提高产量时；</li><li>在改进运营或产品开发流程时；</li><li>在产品生命周期结束阶段；</li><li>在每个收尾阶段</li></ul><h2 id="组织级项目管理-OPM-和战略"><a href="#组织级项目管理-OPM-和战略" class="headerlink" title="组织级项目管理 (OPM) 和战略"></a>组织级项目管理 (OPM) 和战略</h2><ul><li>项目组合、项目集和项目均需符合组织战略或由组织战略驱动</li><li>项目组合管理通过选择适当的项目集或项目，对工作进行优先排序，以及提供所需资源，使项目组合与组织战略保持一致</li><li>项目集管理对其组成部分进行协调，对它们之间的依赖关系进行控制，从而实现既定收益。</li><li>项目管理使组织的目的和目标得以实现。</li></ul><h2 id="项目的生命周期"><a href="#项目的生命周期" class="headerlink" title="项目的生命周期"></a>项目的生命周期</h2><ul><li>项目从启动到完成开始到结束所经历的一系列阶段</li><li>项目生命周期可以是预测型或适应型</li><li>开发生命周期可以是预测型、迭代型、增量型,适应型或混合型的模式</li></ul><h3 id="预测型"><a href="#预测型" class="headerlink" title="预测型"></a>预测型</h3><ul><li>在生命周期的早期阶段确定项目范围、时间和成本。</li><li>对任何范围的变更都要进行仔细管理。</li><li>预测型生命周期也称为瀑布型生命周期。</li></ul><h3 id="迭代型"><a href="#迭代型" class="headerlink" title="迭代型"></a>迭代型</h3><ul><li>迭代方法是通过一系列重复的循环活动来开发产品，时间及成本估算将随着项目团队对产品理解的不断深入而定期修改</li></ul><h3 id="增量型"><a href="#增量型" class="headerlink" title="增量型"></a>增量型</h3><ul><li>增量型生命周期是通过在预定的时间区间内渐进增加产品功能的一系列迭代来产出可交付成果。只有在最后一次迭代之后，可交付成果具有了必要和足够的能力，才能被视为完整的。</li></ul><h3 id="适应型"><a href="#适应型" class="headerlink" title="适应型"></a>适应型</h3><ul><li>适应型生命周期属于敏捷型、迭代型或增量型。</li><li>详细范围在迭代开始之前就得到了定义和批准。</li><li>适应型生命周期也称为敏捷或变更驱动型生命周期</li></ul><h3 id="混合型"><a href="#混合型" class="headerlink" title="混合型"></a>混合型</h3><ul><li>混合型生命周期是预测型生命周期和适应型生命周期的组合。</li><li>充分了解或有确定需求的项目要素遵循预测型开发生命周期</li><li>而仍在发展中的要素遵循适应型开发生命周期。</li></ul><h2 id="项目阶段"><a href="#项目阶段" class="headerlink" title="项目阶段"></a>项目阶段</h2><ul><li>项目阶段是一组具有逻辑关系的项目活动的集合，通常以一个或多个可交付成果的完成为结束</li><li>项目阶段可基于各种因素而建立，其中包括管理需求；项目性质；组织、行业或技术的独特性；项目的组成要素，包括但不限于技术、工程、业务、过程或法律；决策点（例如资金、继续/终止项目，里程碑审查）</li></ul><h2 id="阶段关口"><a href="#阶段关口" class="headerlink" title="阶段关口"></a>阶段关口</h2><ul><li>阶段关口设立在阶段结束点。</li><li>在该时点，把项目的绩效及进展与各种项目文件及业务文件进行比较。</li></ul><h3 id="包括以下文件"><a href="#包括以下文件" class="headerlink" title="包括以下文件"></a>包括以下文件</h3><ul><li>项目商业论证</li><li>项目章程</li><li>项目管理计划</li><li>效益管理计划</li></ul><h2 id="项目管理过程"><a href="#项目管理过程" class="headerlink" title="项目管理过程"></a>项目管理过程</h2><p>项目管理过程分为五大过程组</p><h3 id="1-启动过程组"><a href="#1-启动过程组" class="headerlink" title="1.启动过程组"></a>1.启动过程组</h3><p>定义一个新项目或现有项目的一个新阶段授权开始该项目或阶段的一组过程</p><h3 id="2-规划过程组"><a href="#2-规划过程组" class="headerlink" title="2.规划过程组"></a>2.规划过程组</h3><p>明确项目范围，优化目标，为实现目标制定行动方案的一组过程</p><h3 id="3-执行过程组"><a href="#3-执行过程组" class="headerlink" title="3.执行过程组"></a>3.执行过程组</h3><p>完成项目管理计划中确定的工作，以满足项目要求的一组过程</p><h3 id="4-监控过程组"><a href="#4-监控过程组" class="headerlink" title="4.监控过程组"></a>4.监控过程组</h3><p>跟踪、审查和调整项目进展与绩效，识别必要的计划变更并启动相应变更的一组过程。</p><h3 id="5-收尾过程组"><a href="#5-收尾过程组" class="headerlink" title="5.收尾过程组"></a>5.收尾过程组</h3><p>正式完成或结束项目、阶段或合同所执行的过程</p><h2 id="项目管理知识领域"><a href="#项目管理知识领域" class="headerlink" title="项目管理知识领域"></a>项目管理知识领域</h2><p>项目管理知识领域分为十大知识领域</p><h3 id="1-项目整合管理"><a href="#1-项目整合管理" class="headerlink" title="1.项目整合管理"></a>1.项目整合管理</h3><p>定义一个新项目或现有项目的一个新阶段授权开始该项目或阶段的一组过程</p><h3 id="2-项目范围管理"><a href="#2-项目范围管理" class="headerlink" title="2.项目范围管理"></a>2.项目范围管理</h3><p>确保项目做且只做所需的全部工作以成功完成项目的各个过</p><h3 id="3-项目进度管理"><a href="#3-项目进度管理" class="headerlink" title="3.项目进度管理"></a>3.项目进度管理</h3><p>管理项目按时完成所需的各个过程</p><h3 id="4-项目成本管理"><a href="#4-项目成本管理" class="headerlink" title="4.项目成本管理"></a>4.项目成本管理</h3><p>为使项目在批准的预算内完成而对成本进行规划、估算、预算、融资、筹资、管理和控制的各个过程</p><h3 id="5-项目质量管理"><a href="#5-项目质量管理" class="headerlink" title="5.项目质量管理"></a>5.项目质量管理</h3><p>把组织的质量政策应用于规划、管理、控制项目和产品质量要求，以满足相关方的期望的各个过程</p><h3 id="6-项目资源管理"><a href="#6-项目资源管理" class="headerlink" title="6.项目资源管理"></a>6.项目资源管理</h3><p>识别、获取和管理所需资源以成功完成项目的各个过程</p><h3 id="7-项目沟通管理"><a href="#7-项目沟通管理" class="headerlink" title="7.项目沟通管理"></a>7.项目沟通管理</h3><p>为确保项目信息及时且恰当地规划、收集、生成、发布、存储、检索、管理、控制、监督和最终处置所需的各个过程</p><h3 id="8-项目风险管理"><a href="#8-项目风险管理" class="headerlink" title="8.项目风险管理"></a>8.项目风险管理</h3><p>规划风险管理、识别风险、开展风险分析、规划风险应对、实施风险应对和<br>监督风险的各个过程</p><h3 id="9-项目采购管理"><a href="#9-项目采购管理" class="headerlink" title="9.项目采购管理"></a>9.项目采购管理</h3><p>从项目团队外部采购或获取所需产品、服务或成果的各个过程</p><h3 id="10-项目相关方管理"><a href="#10-项目相关方管理" class="headerlink" title="10.项目相关方管理"></a>10.项目相关方管理</h3><p>识别影响或受项目影响的人员、团队或组织，分析相关方对项目的期望和影响，制定合适的管理策略来有效调动相关方参与项目决策和执行。</p><h2 id="项目管理数据和信息"><a href="#项目管理数据和信息" class="headerlink" title="项目管理数据和信息"></a>项目管理数据和信息</h2><p>定期收集和分析项目数据</p><h3 id="工作绩效数据"><a href="#工作绩效数据" class="headerlink" title="工作绩效数据"></a>工作绩效数据</h3><p>在执行项目工作的过程中，从每个正在执行的活动中收集到的原始观察结果<br>和测量值</p><h3 id="工作绩效信息"><a href="#工作绩效信息" class="headerlink" title="工作绩效信息"></a>工作绩效信息</h3><p>从各控制过程收集，并结合相关背景和跨领域关系进行整合分析而得到的<br>绩效数据。</p><h3 id="工作绩效报告"><a href="#工作绩效报告" class="headerlink" title="工作绩效报告"></a>工作绩效报告</h3><p>为制定决策、提出问题、采取行动或引起关注，而汇编工作绩效信息所形成<br>的实物或电子项目文件</p><p><img src="https://images.gitee.com/uploads/images/2019/0129/152719_1faab5aa_1478371.jpeg" width=""></p><p>喜欢本文的朋友们，欢迎长按下图关注，收看更多精彩内容</p><p>公众号回复<code>pmp引论</code>即可获取思维导图</p>]]></content>
      
      
      <categories>
          
          <category> PMP备考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP备考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring cloud alibaba系列(二)Sentinel应用的限流管理</title>
      <link href="/2019/01/28/spring-xi-lie/springcloudalibaba-zhi-sentinel-xian-liu/"/>
      <url>/2019/01/28/spring-xi-lie/springcloudalibaba-zhi-sentinel-xian-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="限流组件Sentinel"><a href="#限流组件Sentinel" class="headerlink" title="限流组件Sentinel"></a>限流组件Sentinel</h2><ul><li>Sentinel是把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</li><li>默认支持 Servlet、Feign、RestTemplate、Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li><li>自带控台动态修改限流策略。但是每次服务重启后就丢失了。所以它也支持ReadableDataSource 目前支持file, nacos, zk, apollo 这4种类型<h2 id="接入Sentinel"><a href="#接入Sentinel" class="headerlink" title="接入Sentinel"></a>接入Sentinel</h2>创建项目cloud-sentinel</li></ul><ul><li>1 引入 Sentinel starter<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>alibaba<span class="token operator">-</span>sentinel<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre></li><li>2 application.properties配置如下<br><code>`</code> bash<br>server.port=18084<br>spring.application.name=service-sentinel</li></ul><p>#Sentinel 控制台地址<br>spring.cloud.sentinel.transport.dashboard=localhost:8080</p><p>#取消Sentinel控制台懒加载<br>spring.cloud.sentinel.eager=true</p><pre><code>## 接入限流埋点Sentinel 默认为所有的 HTTP 服务提供了限流埋点。引入依赖后自动完成所有埋点。只需要在控制配置限流规则即可* 注解埋点  如果需要对某个特定的方法进行限流或降级，可以通过 @SentinelResource 注解来完成限流的埋点``` java@SentinelResource(&quot;resource&quot;)@RequestMapping(&quot;/sentinel/hello&quot;)public Map&lt;String,Object&gt; hello(){        Map&lt;String,Object&gt; map=new HashMap&lt;&gt;(2);        map.put(&quot;appName&quot;,appName);        map.put(&quot;method&quot;,&quot;hello&quot;);        return map;}</code></pre><h2 id="部署Sentinel控制台"><a href="#部署Sentinel控制台" class="headerlink" title="部署Sentinel控制台"></a>部署Sentinel控制台</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="http://edas-public.oss-cn-hangzhou.aliyuncs.com/install_package/demo/sentinel-dashboard.jar" target="_blank" rel="noopener">Sentinel下载</a></p><h3 id="启动控制台"><a href="#启动控制台" class="headerlink" title="启动控制台"></a>启动控制台</h3><p>执行 Java 命令 <code>java -jar sentinel-dashboard.jar</code> 默认的监听端口为 <code>8080</code></p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>打开<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 即可看到控制台界面<br><img src="https://images.gitee.com/uploads/images/2019/0128/142828_12667ffe_1478371.png" alt="输入图片说明"><br>说明cloud-sentinel已经成功和Sentinel完成率通讯</p><h2 id="配置限流规则"><a href="#配置限流规则" class="headerlink" title="配置限流规则"></a>配置限流规则</h2><p>如果控制台没有找到自己的应用，可以先调用一下进行了 Sentinel 埋点的 URL 或方法或着禁用Sentinel 的赖加载<code>spring.cloud.sentinel.eager=true</code></p><h3 id="配置-URL-限流规则"><a href="#配置-URL-限流规则" class="headerlink" title="配置 URL 限流规则"></a>配置 URL 限流规则</h3><p>控制器随便添加一个普通的http方法</p><pre class=" language-Java"><code class="language-Java">  /**     * 通过控制台配置URL 限流     * @return     */    @RequestMapping("/sentinel/test")    public Map<String,Object> test(){        Map<String,Object> map=new HashMap<>(2);        map.put("appName",appName);        map.put("method","test");        return map;    }</code></pre><p>点击新增流控规则。为了方便测试阀值设为 1<br><img src="https://images.gitee.com/uploads/images/2019/0128/143410_16ca33b7_1478371.png" alt="输入图片说明"><br>浏览器重复请求 <a href="http://localhost:18084/sentinel/test" target="_blank" rel="noopener">http://localhost:18084/sentinel/test</a> 如果超过阀值就会出现如下界面<br><img src="https://images.gitee.com/uploads/images/2019/0128/143600_56ead0a3_1478371.png" alt="输入图片说明"></p><p>整个URL限流就完成了。但是返回的提示不够友好。</p><h3 id="配置自定义限流规则-SentinelResource埋点"><a href="#配置自定义限流规则-SentinelResource埋点" class="headerlink" title="配置自定义限流规则(@SentinelResource埋点)"></a>配置自定义限流规则(@SentinelResource埋点)</h3><p>自定义限流规则就不是添加方法的访问路径。 配置的是@SentinelResource注解中value的值。比如<code>@SentinelResource(&quot;resource&quot;)</code>就是配置路径为resource<br><img src="https://images.gitee.com/uploads/images/2019/0128/144027_2261e5f6_1478371.png" alt="输入图片说明"></p><ul><li>访问：<a href="http://localhost:18084/sentinel/hello" target="_blank" rel="noopener">http://localhost:18084/sentinel/hello</a></li><li>通过<code>@SentinelResource</code>注解埋点配置的限流规则如果没有自定义处理限流逻辑，当请求到达限流的阀值时就返回404页面<br><img src="https://images.gitee.com/uploads/images/2019/0128/144236_3ea6d1b5_1478371.png" alt="输入图片说明"></li></ul><h2 id="自定义限流处理逻辑"><a href="#自定义限流处理逻辑" class="headerlink" title="自定义限流处理逻辑"></a>自定义限流处理逻辑</h2><p>@SentinelResource 注解包含以下属性：</p><ul><li>value: 资源名称，必需项（不能为空）</li><li>entryType: 入口类型，可选项（默认为 EntryType.OUT）</li><li>blockHandler:blockHandlerClass中对应的异常处理方法名。参数类型和返回值必须和原方法一致</li><li><p>blockHandlerClass：自定义限流逻辑处理类<br><code>`</code> java</p><p>//通过注解限流并自定义限流逻辑<br>@SentinelResource(value = “resource2”, blockHandler = “handleException”, blockHandlerClass = {ExceptionUtil.class})<br>@RequestMapping(“/sentinel/test2”)<br>  public Map&lt;String,Object&gt; test2() {</p><pre><code>  Map&lt;String,Object&gt; map=new HashMap&lt;&gt;();  map.put(&quot;method&quot;,&quot;test2&quot;);  map.put(&quot;msg&quot;,&quot;自定义限流逻辑处理&quot;);  return  map;</code></pre><p>  }</p></li></ul><p>public class ExceptionUtil {</p><pre><code>public static Map&lt;String,Object&gt; handleException(BlockException ex) {    Map&lt;String,Object&gt; map=new HashMap&lt;&gt;();    System.out.println(&quot;Oops: &quot; + ex.getClass().getCanonicalName());    map.put(&quot;Oops&quot;,ex.getClass().getCanonicalName());    map.put(&quot;msg&quot;,&quot;通过@SentinelResource注解配置限流埋点并自定义处理限流后的逻辑&quot;);    return  map;}</code></pre><p>}</p><pre><code>控制台新增resource2的限流规则并设置阀值为1。访问http://localhost:18084/sentinel/test2 请求到达阀值时机会返回自定义的异常消息![输入图片说明](https://images.gitee.com/uploads/images/2019/0128/144957_69a6d3d0_1478371.png)基本的限流处理就完成了。 但是每次服务重启后 之前配置的限流规则就会被清空因为是内存态的规则对象.所以下面就要用到Sentinel一个特性ReadableDataSource 获取文件、数据库或者配置中心是限流规则## 读取文件的实现限流规则一条限流规则主要由下面几个因素组成：* resource：资源名，即限流规则的作用对象* count: 限流阈值* grade: 限流阈值类型（QPS 或并发线程数）* limitApp: 流控针对的调用来源，若为 default 则不区分调用来源* strategy: 调用关系限流策略* controlBehavior: 流量控制效果（直接拒绝、Warm Up、匀速排队）  SpringCloud alibaba集成Sentinel后只需要在配置文件中进行相关配置，即可在 Spring 容器中自动注册 DataSource，这点很方便。配置文件添加如下配置``` bash#通过文件读取限流规则spring.cloud.sentinel.datasource.ds1.file.file=classpath: flowrule.jsonspring.cloud.sentinel.datasource.ds1.file.data-type=jsonspring.cloud.sentinel.datasource.ds1.file.rule-type=flow</code></pre><p>在resources新建一个文件 比如flowrule.json 添加限流规则</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token string">"resource"</span><span class="token punctuation">:</span> <span class="token string">"resource"</span><span class="token punctuation">,</span>    <span class="token string">"controlBehavior"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"count"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"grade"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"limitApp"</span><span class="token punctuation">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token string">"strategy"</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token string">"resource"</span><span class="token punctuation">:</span> <span class="token string">"resource3"</span><span class="token punctuation">,</span>    <span class="token string">"controlBehavior"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"count"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"grade"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"limitApp"</span><span class="token punctuation">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token string">"strategy"</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p> <strong>重新启动项目。出现如下日志说明文件读取成功</strong> </p><pre class=" language-Java"><code class="language-Java"> [Sentinel Starter] DataSource ds1-sentinel-file-datasource start to loadConfig [Sentinel Starter] DataSource ds1-sentinel-file-datasource load 2 FlowRule</code></pre><p> <strong>刷新Sentinel 控制台 限流规则就会自动添加进去</strong><br><img src="https://images.gitee.com/uploads/images/2019/0128/154204_aafdbed2_1478371.png" alt="输入图片说明"></p><h2 id="Sentinel的基本配置"><a href="#Sentinel的基本配置" class="headerlink" title="Sentinel的基本配置"></a>Sentinel的基本配置</h2><pre class=" language-bash"><code class="language-bash">spring.cloud.sentinel.enabled              <span class="token comment" spellcheck="true">#Sentinel自动化配置是否生效</span>spring.cloud.sentinel.eager               <span class="token comment" spellcheck="true">#取消Sentinel控制台懒加载</span>spring.cloud.sentinel.transport.dashboard   <span class="token comment" spellcheck="true">#Sentinel 控制台地址</span>spring.cloud.sentinel.transport.heartbeatIntervalMs        <span class="token comment" spellcheck="true">#应用与Sentinel控制台的心跳间隔时间</span>spring.cloud.sentinel.log.dir            <span class="token comment" spellcheck="true">#Sentinel 日志文件所在的目录</span></code></pre><ul><li>案例源码：<a href="https://github.com/a870439570/alibaba-cloud" target="_blank" rel="noopener">https://github.com/a870439570/alibaba-cloud</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
            <tag> alibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring cloud alibaba系列(一) 服务注册</title>
      <link href="/2019/01/27/spring-xi-lie/springcloudalibaba-zhi-fu-wu-zhu-ce-fa-xian/"/>
      <url>/2019/01/27/spring-xi-lie/springcloudalibaba-zhi-fu-wu-zhu-ce-fa-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="alibaba-cloud"><a href="#alibaba-cloud" class="headerlink" title="alibaba-cloud"></a>alibaba-cloud</h2><p>本项目演示如何使用 spring cloud alibaba系列之服务的注册于发现</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><ul><li><p>版本 0.2.1.RELEASE 对应的是 Spring Cloud Finchley 版本，</p></li><li><p>版本 0.1.1.RELEASE 对应的是 Spring Cloud Edgware 版本。</p></li><li><p>官方文档目前推荐的SpringBoot 2.0.6.RELEASE版本。如果注册不了一般都是版本不对。可以去官方文档查看对应的版本<br>如果需要使用已发布的版本，在 <code>dependencyManagement</code> 中添加如下配置。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencyManagement<span class="token operator">></span>      <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>          <span class="token operator">&lt;</span>dependency<span class="token operator">></span>              <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>              <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>alibaba<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>              <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.2</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>              <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>              <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependencyManagement<span class="token operator">></span></code></pre></li></ul><p>然后在 <code>dependencies</code> 中添加自己所需使用的依赖即可使用。</p><p>如果您想体验最新的 BUILD-SNAPSHOT 的新功能，则可以将版本换成最新的版本，但是需要在 pom.xml 中配置 Spring BUILDSNAPSHOT 仓库，<strong>注意: SNAPSHOT 版本随时可能更新</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>repositories<span class="token operator">></span>    <span class="token operator">&lt;</span>repository<span class="token operator">></span>        <span class="token operator">&lt;</span>id<span class="token operator">></span>spring<span class="token operator">-</span>snapshot<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>        <span class="token operator">&lt;</span>name<span class="token operator">></span>Spring Snapshot Repository<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>url<span class="token operator">></span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>repo<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>io<span class="token operator">/</span>snapshot<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>        <span class="token operator">&lt;</span>snapshots<span class="token operator">></span>            <span class="token operator">&lt;</span>enabled<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>enabled<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>snapshots<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>repository<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>repositories<span class="token operator">></span></code></pre><h2 id="服务的注册发现-Nacos-Discovery"><a href="#服务的注册发现-Nacos-Discovery" class="headerlink" title="服务的注册发现(Nacos Discovery)"></a>服务的注册发现(Nacos Discovery)</h2><p>Nacos 是阿里巴巴开源的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。<br>如何使用Nacos Discovery Starter 完成 Spring Cloud 应用的服务注册与发现</p><h3 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h3><p>新建一个项目 cloud-client</p><ol><li>引入Nacos Discovery Starter</li></ol><pre class=" language-java"><code class="language-java">      <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>alibaba<span class="token operator">-</span>nacos<span class="token operator">-</span>discovery<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><ol start="2"><li><p>配置Nacos Server地址</p><pre class=" language-bash"><code class="language-bash">server.port<span class="token operator">=</span>18082<span class="token comment" spellcheck="true">#服务名称</span>spring.application.name<span class="token operator">=</span>cloud-client<span class="token comment" spellcheck="true">#Nacos Server 地址</span>spring.cloud.nacos.discovery.server-addr<span class="token operator">=</span>127.0.0.1:8848</code></pre></li><li><p>启动类上使用 @EnableDiscoveryClient 注解开启服务注册与发现功能</p></li></ol><p>4 下载 Nacos Server ：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a></p><ol start="5"><li>启动 Server</li></ol><ul><li>Linux/Unix/Mac 操作系统，执行命令 sh startup.sh -m standalone</li><li>Windows 操作系统，执行命令 cmd startup.cmd</li><li><p>访问控制台：<a href="http://127.0.0.1:8848/nacos/index.html" target="_blank" rel="noopener">http://127.0.0.1:8848/nacos/index.html</a>  </p><p><strong>0.8版本默认登录账号的密码nacos/nacos.</strong> </p></li></ul><p><img src="https://images.gitee.com/uploads/images/2019/0124/125758_aa62dddb_1478371.png" alt="输入图片说明"><br><img src="https://images.gitee.com/uploads/images/2019/0124/130000_4da3402a_1478371.png" alt="输入图片说明" title="登录界面"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>出现如下信息说明注册到nacos成功<br><img src="https://images.gitee.com/uploads/images/2019/0125/180020_c426127d_1478371.png" alt="输入图片说明"><br>nacos控制条界面就会出现注册的服务<br><img src="https://images.gitee.com/uploads/images/2019/0125/180210_3d75c743_1478371.png" alt="输入图片说明"></p><p>以上步骤向您展示了如何将一个服务注册到 Nacos。</p><h3 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h3><p>新建一个项目 cloud-consumer.配置文件和消费者一样更换下端口即可。</p><pre class=" language-bash"><code class="language-bash">server.port<span class="token operator">=</span>18083spring.application.name<span class="token operator">=</span>service-consumer<span class="token comment" spellcheck="true">#Nacos Server 地址</span>spring.cloud.nacos.discovery.server-addr<span class="token operator">=</span>127.0.0.1:8848management.endpoints.web.exposure.include<span class="token operator">=</span>*</code></pre><p>启动类同样添加@EnableDiscoveryClient 注册到nacos</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloudConsumerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>CloudConsumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//实例化 RestTemplate 实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>新建一个 ConsumerController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoadBalancerClient loadBalancerClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.application.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String appName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过带有负载均衡的RestTemplate 和 FeignClient 也是可以访问的     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/echo/app-name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">echoAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用 LoadBalanceClient 和 RestTemolate 结合的方式来访问</span>        ServiceInstance serviceInstance <span class="token operator">=</span> loadBalancerClient<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">"service-provider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"http://%s:%s/echo/%s"</span><span class="token punctuation">,</span>serviceInstance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>serviceInstance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>appName<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"request url:"</span><span class="token operator">+</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>分别启动cloud-client和cloud-consumer刷新nacos<br><img src="https://images.gitee.com/uploads/images/2019/0125/183238_acff8d12_1478371.png" alt="输入图片说明"><br>两个服务都注册成功</p><p>##测试<br>访问 <a href="http://127.0.0.1:18083/echo/app-name" target="_blank" rel="noopener">http://127.0.0.1:18083/echo/app-name</a> 消费者输出访问日志说明请求成功</p><p><img src="https://images.gitee.com/uploads/images/2019/0125/183350_f130882c_1478371.png" alt="输入图片说明"></p><p>浏览器出现 第一个Nacos 程序service-consumer 到此Over 基于Nacos实现的服务注册发现已经调用就到此为止。入门还是很简单的 阿里巴巴大法好！</p><h3 id="Nacos更多配置信息"><a href="#Nacos更多配置信息" class="headerlink" title="Nacos更多配置信息"></a>Nacos更多配置信息</h3><pre class=" language-bash"><code class="language-bash">spring.cloud.nacos.discovery.server-addr  <span class="token comment" spellcheck="true">#Nacos Server 启动监听的ip地址和端口</span>spring.cloud.nacos.discovery.service  <span class="token comment" spellcheck="true">#给当前的服务命名</span>spring.cloud.nacos.discovery.weight  <span class="token comment" spellcheck="true">#取值范围 1 到 100，数值越大，权重越大</span>spring.cloud.nacos.discovery.network-interface <span class="token comment" spellcheck="true">#当IP未配置时，注册的IP为此网卡所对应的IP地址，如果此项也未配置，则默认取第一块网卡的地址</span>spring.cloud.nacos.discovery.ip  <span class="token comment" spellcheck="true">#优先级最高</span>spring.cloud.nacos.discovery.port  <span class="token comment" spellcheck="true">#默认情况下不用配置，会自动探测</span>spring.cloud.nacos.discovery.namespace <span class="token comment" spellcheck="true">#常用场景之一是不同环境的注册的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</span>spring.cloud.nacos.discovery.access-key  <span class="token comment" spellcheck="true">#当要上阿里云时，阿里云上面的一个云账号名</span>spring.cloud.nacos.discovery.secret-key <span class="token comment" spellcheck="true">#当要上阿里云时，阿里云上面的一个云账号密码</span>spring.cloud.nacos.discovery.metadata    <span class="token comment" spellcheck="true">#使用Map格式配置，用户可以根据自己的需要自定义一些和服务相关的元数据信息</span>spring.cloud.nacos.discovery.log-name   日志文件名spring.cloud.nacos.discovery.enpoint   <span class="token comment" spellcheck="true">#地域的某个服务的入口域名，通过此域名可以动态地拿到服务端地址</span>ribbon.nacos.enabled  <span class="token comment" spellcheck="true">#是否集成Ribbon 一般都设置成true即可</span></code></pre><p> <strong>Demmo源码：<a href="https://github.com/a870439570/alibaba-cloud" target="_blank" rel="noopener">https://github.com/a870439570/alibaba-cloud</a></strong> </p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
            <tag> alibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot版的JVM检控工具</title>
      <link href="/2019/01/26/spring-xi-lie/springboot-ban-de-jvm-jian-kong-gong-ju/"/>
      <url>/2019/01/26/spring-xi-lie/springboot-ban-de-jvm-jian-kong-gong-ju/</url>
      
        <content type="html"><![CDATA[<h4 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h4><ul><li>基于SpringBoot2.0 实现的jvm远程监工图形化工具，可以同时监控多个web应用</li><li>该项目是借鉴另个一开源项目 （ JavaMonitor） <a href="https://gitee.com/zyzpp/JavaMonitor" target="_blank" rel="noopener">https://gitee.com/zyzpp/JavaMonitor</a> 演变而来，剔除了一些功能，增加了可远程监控模块，只需要在需要监控的项目集成监控的jar包 并设置可访问的IP（默认为空 则不拦截IP访问） 就可以实现远程监控,和用户管理模块,动态定时任务<br>支付windows服务器和Linux服务监控,Mac还未测试 应该也支持 </li></ul><h4 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h4><ol><li>boot-actuator  需要监控的项目demo</li><li>actuator-service  监控端点jar包 需要引入到需要监控的项目中（已打包好上传）</li><li>boot-monitor    监监控图形化工程</li><li>Sql文件  /boot-monitor/src/main/resources/db/actuator.sql</li></ol><h3 id="部署文档"><a href="#部署文档" class="headerlink" title="部署文档"></a><a href="https://a870439570.github.io/work-doc/actuator/" target="_blank" rel="noopener">部署文档</a></h3><ul><li><a href="https://a870439570.github.io/work-doc/actuator/" target="_blank" rel="noopener">https://a870439570.github.io/work-doc/actuator/</a></li></ul><h3 id="效果图如下"><a href="#效果图如下" class="headerlink" title="效果图如下"></a>效果图如下</h3><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/6/16821466557caba0?w=1305&amp;h=714&amp;f=png&amp;s=338901" alt="输入图片说明" title="屏幕截图.png"></p><h3 id="监控列表主页-增加应用，删除应用"><a href="#监控列表主页-增加应用，删除应用" class="headerlink" title="监控列表主页  增加应用，删除应用"></a>监控列表主页  增加应用，删除应用</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/6/168214665581edf1?w=1909&amp;h=931&amp;f=png&amp;s=126744" alt="输入图片说明" title="屏幕截图.png"></p><h3 id="监控详情"><a href="#监控详情" class="headerlink" title="监控详情"></a>监控详情</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/6/1682146656904113?w=1912&amp;h=936&amp;f=png&amp;s=164206" alt="输入图片说明" title="屏幕截图.png"></p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/6/1682146654d495fc?w=1895&amp;h=659&amp;f=png&amp;s=62302" alt="输入图片说明" title="屏幕截图.png"></p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/6/16821466580b1a29?w=1344&amp;h=660&amp;f=png&amp;s=125645" alt="输入图片说明" title="屏幕截图.png"></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM+脑图</title>
      <link href="/2019/01/25/java/shen-ru-li-jie-jvm-nao-tu/"/>
      <url>/2019/01/25/java/shen-ru-li-jie-jvm-nao-tu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://images.gitee.com/uploads/images/2019/0124/182055_4265159e_1478371.png" alt="深入理解JVM脑图"></p><h2 id="1-运行时数据区域"><a href="#1-运行时数据区域" class="headerlink" title="1. 运行时数据区域"></a>1. 运行时数据区域</h2><ul><li>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域有各自的用途,以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。</li></ul><p><img src="https://images.gitee.com/uploads/images/2019/0120/110634_7e0e2b98_1478371.jpeg" alt=""></p><ul><li>线程私有的：虚拟机栈，本地方法栈，程序计数器</li><li>线程共享的 方法区，堆</li></ul><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><ul><li>程序计数器是一块较小的内存空间,它的作用可以看作是当前线程所执行的字节码行号指示器，在虚拟机的概念模型里，字节码解释器工作时 就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支,循环,跳转,异常处理,线程恢复等基础功能都需要这个计数器来完成。（如果正在执行的是本地方法则计数器为空）。</li></ul><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><ul><li>虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会创建一个栈帧用于存储局部变量表，操作栈，动态链接，方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机中从入栈到出栈的过程。</li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。</p><h3 id="Java-堆"><a href="#Java-堆" class="headerlink" title="Java 堆"></a>Java 堆</h3><ul><li><code>Java</code> 堆是整个虚拟机所管理的最大内存区域，所有的对象创建都是在这个区域进行内存分配。</li><li>这块区域也是垃圾回收器重点管理的区域，由于大多数垃圾回收器都采用<code>分代回收算法</code>，所有堆内存也分为 <code>新生代</code>、<code>老年代</code>，可以方便垃圾的准确回收。</li></ul><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ul><li>方法区主要用于存放已经被虚拟机加载的类信息，如<code>常量，静态变量</code>，即时编译器编译后的代码等。和Java堆一样不需要连续的内存，并且可以动态扩展。</li><li>对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。</li></ul><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><ul><li>运行时常量池是方法区的一部分。class文件除了有类的版本，字段，方法，接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，会在类加载后放入这个区域。</li></ul><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><ul><li>直接内存并不是虚拟机运行时数据区域的一部分。</li><li>在 JDK 1.4 中新加入了 NIO 类，它可以使用 Native 函数库直接分配堆外内存，然后通过 Java堆里的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在堆内存和堆外内存来回拷贝数据。</li></ul><h2 id="2-Minor-GC和Full-GC"><a href="#2-Minor-GC和Full-GC" class="headerlink" title="2. Minor GC和Full GC"></a>2. Minor GC和Full GC</h2><ul><li>Minor GC：指发生在新生代的垃圾收集动作，因为 Java 对象大多都具<br>备朝生夕灭的特性，所以<code>Minor GC</code> 非常频繁，一般回收速度也比较快。</li><li>Major GC或Full GC：指发生在老年代的 GC，出现了 Major GC，经常<br>会伴随至少一次的 Minor GC（但非绝对的，在 ParallelScavenge 收集器的收集策略里<br>就有直接进行 <code>Major GC</code> 的策略选择过程） 。<code>MajorGC</code> 的速度一般会比 Minor GC 慢 10<br>倍以上。</li></ul><h3 id="Minor-GC触发机制"><a href="#Minor-GC触发机制" class="headerlink" title="Minor GC触发机制"></a>Minor GC触发机制</h3><p>当年轻代满时就会触发Minor GC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC</p><h3 id="Full-GC触发机制："><a href="#Full-GC触发机制：" class="headerlink" title="Full GC触发机制："></a>Full GC触发机制：</h3><ul><li>当年老代满时会引发Full GC，Full GC将会同时回收年轻代、年老代，</li><li>当永久代满时也会引发Full GC，会导致Class、Method元信息的卸载</li></ul><h2 id="3-Java中的四种引用"><a href="#3-Java中的四种引用" class="headerlink" title="3. Java中的四种引用"></a>3. Java中的四种引用</h2><p>强引用,软引用,弱引用,虚引用</p><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>就是指在程序代码中普遍存在的，类似Object obj=new Object()这类的引用，只要强引用还存在，垃圾回收期永远不会回收掉被引用的对象</p><h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>用来描述一些还有用，但并非必须的对象。对于软引用关联着的对象，在系统将要发生内存溢出前，将会把这些对象列进回收范围之内并进行第二次回收，如果这此次回收还是没有足够的内存，才会抛出内存溢出。</p><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>用来描述非必须的对象，但是它的强度比软引用更弱一下，被弱引用关联的对象，只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，只会回收被弱引用关联的对象</p><h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>被称为幽灵引用或幻引用，是最弱的一种引用关系，一个对象是否有虚引用的存在，完全不会对其它生存时间构成影响，也无法通过虚引用来取得一个实列。为一个对象设置虚引用的目的就是在对象被回收时收到一个系统通知。</p><h2 id="4-垃圾收集算法"><a href="#4-垃圾收集算法" class="headerlink" title="4. 垃圾收集算法"></a>4. 垃圾收集算法</h2><h3 id="1-Serial收集器"><a href="#1-Serial收集器" class="headerlink" title="1.Serial收集器"></a>1.Serial收集器</h3><ul><li>一个单线程的收集器，只会使用一个CPU或一条收集线程去完成垃圾收集工作。在进行垃圾收集时必须暂停其它所有的工作线程，直接到结束。(Stop The Word)这项工作是虚拟机在后台自动发起和完成的。</li><li>JDK1.3之前是新生代收集的唯一选择。</li><li>它依然是虚拟机运行在Client模式下的默认新手代收集器，简单而高效。<h3 id="2-ParNew收集器"><a href="#2-ParNew收集器" class="headerlink" title="2. ParNew收集器"></a>2. ParNew收集器</h3>Serial收集器的多线程版本，使用多条线程收集。其余的和Serial一样，是许多运行在Server模式下的虚拟机首选新生代收集器。且目前除了Serial收集器，只有它可以与CMS收集器配合工作<h3 id="3-Parallel-Scavenge收集器"><a href="#3-Parallel-Scavenge收集器" class="headerlink" title="3.Parallel Scavenge收集器"></a>3.Parallel Scavenge收集器</h3></li><li>它是一款新生代收集器。使用复制算法收集，又是并行的多线程收集器</li><li>特点是达到一个可控制的吞吐量，也被称为“吞吐量优先”收集器。<h3 id="4-Serial-Old收集器"><a href="#4-Serial-Old收集器" class="headerlink" title="4.Serial Old收集器"></a>4.Serial Old收集器</h3></li><li>它是Serial收集器的老年代版本，是一个单线程收集器，使用标记-整理算法收集。</li><li>主要意义是给Client模式下虚拟机使用。如果是Server模式，则有两种用途，一是在JDK1.5之前与Parallel Scavenge收集器搭配使用。二是作为CMS收集器的后背预案<h3 id="5-Parallel-Old收集器"><a href="#5-Parallel-Old收集器" class="headerlink" title="5.Parallel Old收集器"></a>5.Parallel Old收集器</h3>它是Parallel Scavenge收集器的老年代版本，使用多线程和标记-整理算法。JDK1.6才开始提供。<h3 id="6-CMS收集器"><a href="#6-CMS收集器" class="headerlink" title="6.CMS收集器"></a>6.CMS收集器</h3></li><li>是一种以获取最短回收停顿时间的为目标的收集器。基于标记-清楚算法实现。</li><li>运作过程分为四个阶段。初始标记,并发标记,重新标记,并发清除。</li><li>初始标记和并发标记仍然需要”Stop The Word”.初始标记只是记录下GC Roots能直接关联到对象，速度快。并发标记就是进行GC Roots Tracing过程。重新标记修正并发标记期间因程序继续运作导致标记产生变动的一部分对象的标记记录。整个过程耗时最长是并发标记和并发清除过程。</li><li>优点是并发收集，低停顿。缺点是：对CPU资源非常敏感，无法处理浮动垃圾。收集结束时会产生大量空间碎片<h3 id="7-G1收集器"><a href="#7-G1收集器" class="headerlink" title="7.G1收集器"></a>7.G1收集器</h3></li><li>当前收集器技术最前沿成果之一。将整个Java堆分为多个大小相等的独立区域。虽然保留新生代和老年代，但它们不再是物理隔离，都是一部分不需要连续的集合。</li><li>特点是并行与并发充分利用CPU缩短停顿时间。分代收集，空间整合不会产生内存空间碎片，可预测的停顿。有计划的避免回收整个Java堆。</li><li>运行大致分为:初始标记,并发标记,最终标记,筛选回收。</li></ul><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><ul><li><p>算法分为标记和清除两个阶段。首先先标记所有要被回收的对象，标记完成后再统一清除被标记的对象。</p><p><strong>主要缺点有两个，</strong> </p></li><li>一是效率问题，标记和清除的过程效率都不高。二是空间问题，标记清除后会产生大量不连续的内存碎片，空间碎片太多,可能会导致，当程序在以后的运行过程中需要分配较大的对象时无法找到足够的连续内存，而不得不提前出发另一次垃圾收集动作</li></ul><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><ul><li>为了解决效率问题，一种复制收集的算法出现了。它将可用内存按容量划分为大小相等的两块，每次只用其中的一块。当这一块内存用完，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对其中一块进行内存回收，内存分配时也就不用内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为原来的一半未免太高了一点。</li></ul><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><ul><li>复制手机算法在对象存活率较高的时要执行多的复制操作，效率将会变低。更关键的是，如果不想浪费50%的空间，就需要额外的空间进行分配担保，以应对被使用的内存中对象都100%存货的极端情况，所以在老年代一般不能直接选用这种算法。根据老年代的特点，有人提出了另一种 标记-整理的算法，标记过程仍然与 标记-清楚算法一样。但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存</li></ul><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><ul><li>根据对象的存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高，没有额外空间对它进行分配担保，就必须使用标记-清理或标记-整理算法来进行回收</li></ul><h2 id="5-内存分配与回收策略"><a href="#5-内存分配与回收策略" class="headerlink" title="5. 内存分配与回收策略"></a>5. 内存分配与回收策略</h2><ul><li>对象的内存分配，往大方向讲，就是在堆上分配，对象主要分配在新生代的Eden区上，如果启动本地线程分配缓冲，将按线程的优先级在TLAB上分配。少数情况也可能分配在老年代中，分配的规则并不是百分之白固定，其细节取决于当前使用的是哪一种垃圾回收期组合，还有虚拟机中于内存相关的参数设置。</li></ul><h3 id="对象优先在Eden区分配"><a href="#对象优先在Eden区分配" class="headerlink" title="对象优先在Eden区分配"></a>对象优先在Eden区分配</h3><p>对象通常在新生代的Eden区进行分配，当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC，与Minor GC对应的是Major GC、Full GC。</p><ul><li>Minor GC:指发生在新生代的垃圾收集动作，非常频繁，速度较快。</li><li>Major GC:指发生在老年代的GC，出现Major GC，经常会伴随一次Minor GC，同时Minor GC也会引起Major GC，一般在GC日志中统称为GC，不频繁。</li><li>Full GC:指发生在老年代和新生代的GC，速度很慢，需要Stop The World。</li></ul><h3 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h3><ul><li>需要大量连续内存空间的Java对象称为大对象，大对象的出现会导致提前触发垃圾收集以获取更大的连续的空间来进行大对象的分配。虚拟机提供了-XX:PretenureSizeThreadshold参数来设置大对象的阈值，超过阈值的对象直接分配到老年代。</li></ul><h3 id="长期存活的对象进入老年代"><a href="#长期存活的对象进入老年代" class="headerlink" title="长期存活的对象进入老年代"></a>长期存活的对象进入老年代</h3><ul><li>每个对象有一个对象年龄计数器，与前面的对象的存储布局中的GC分代年龄对应。对象出生在Eden区、经过一次Minor GC后仍然存活，并能够被Survivor容纳，设置年龄为1，对象在Survivor区每次经过一次Minor GC，年龄就加1，当年龄达到一定程度（默认15），就晋升到老年代，虚拟机提供了-XX:MaxTenuringThreshold来进行设置。</li></ul><h3 id="动态对象年龄判断"><a href="#动态对象年龄判断" class="headerlink" title="动态对象年龄判断"></a>动态对象年龄判断</h3><ul><li>对象的年龄到达了MaxTenuringThreshold可以进入老年代，同时，如果在survivor区中相同年龄所有对象大小的总和大于survivor区的一半，年龄大于等于该年龄的对象就可以直接进入老年代。无需等到MaxTenuringThreshold中要求的年龄。</li></ul><p>具体代码如下：</p><pre><code>public class AllocationTest {    private static final int _1MB = 1024 * 1024;    /*     *     -Xms20M -Xmx20M -Xmn10M         -XX:SurvivorRatio=8         -XX:+PrintGCDetails        -XX:+UseSerialGC        -XX:MaxTenuringThreshold=15        -XX:+PrintTenuringDistribution     * */    public static void testTenuringThreshold2() {        byte[] allocation1, allocation2, allocation3, allocation4;        allocation1 = new byte[_1MB / 4];        allocation2 = new byte[_1MB / 4];        allocation3 = new byte[4 * _1MB];        allocation4 = new byte[4 * _1MB];        allocation4 = null;        allocation4 = new byte[4 * _1MB];    }    public static void main(String[] args) {        testPretenureSizeThreshold2();    }}</code></pre><h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><ul><li>发生Minor GC时，虚拟机会检查老年代连续的空闲区域是否大于新生代所有对象的总和，若成立，则说明Minor GC是安全的，否则，虚拟机需要查看HandlePromotionFailure的值，看是否运行担保失败，若允许，则虚拟机继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，若大于，将尝试进行一次Minor GC；若小于或者HandlePromotionFailure设置不运行冒险，那么此时将改成一次Full GC，以上是JDK Update 24之前的策略，之后的策略改变了，只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行Full GC。</li><li>冒险是指经过一次Minor GC后有大量对象存活，而新生代的survivor区很小，放不下这些大量存活的对象，所以需要老年代进行分配担保，把survivor区无法容纳的对象直接进入老年代。</li></ul><h3 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h3><ul><li>很多人任务方法区是没有垃圾回收的，Java虚拟机规范中确实说过可以不要求虚拟机在方法区实现垃圾收集，而在方法去进行垃圾收集的性价比一般比较低，在堆中，由其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%~96%的空间，而永久代的垃圾收集效率远低于此。</li><li>永久代的垃圾主要回收两部分内容：废弃常量和无用的类。</li><li>回收废弃常量于回收<code>Java堆</code>中的对象非常相似。以常量池中字面量的回收为列，假如一个字符串“<code>abc</code>“已经进入常量池中，但是当前系统没有任何一个String对象叫做”<code>abc</code>“的，换句话就是没有任何Sting对象引用常量池中的”abc”,也没有其它地方引用了这个字面变量，如果这时候发生内存回收，而且必要的话，这个“<code>abc</code>“常量就会被系统请出常量池，常量池中的其它类，接口，方法，字段的符号引用也与此类似。</li></ul><p><img src="https://gitee.com/uploads/images/2018/0703/173826_78dcbdc8_1478371.png" alt="输入图片说明" title="image.png"></p><h3 id="Java中对象访问是如何进行的"><a href="#Java中对象访问是如何进行的" class="headerlink" title="Java中对象访问是如何进行的"></a>Java中对象访问是如何进行的</h3><ul><li><p>对象访问在Java中无处不在，即时是最简单的访问也会涉及到Java栈，Java堆，方法区这三个最重要的内存区域之间的关系。</p><pre><code>Object obj=new Object();</code></pre></li><li><p>假设这段代码出现在方法体中， 那吗“<code>Object obj</code>”这部分的语义将会反应到<code>Java栈</code>的本地变量中，作为一个<code>reference</code>类型数据出现。而“<code>new Object()</code>”这部分的语义将会反应到<code>Java堆</code>中,形成一块存储了Object类型所有实例数据值的结构化内存，根据具体类型以及虚拟机实现的对象内存布局的不同，这块内存的长度是不固定的。</p></li><li>另外，在Java堆中还必须包含能查找到此对象类型数据（如对象类型，父亲，实现的接口，方法等）的地址消息，这些类型数据则存储在方法区中。</li></ul><h3 id="怎样判断对象是否存活"><a href="#怎样判断对象是否存活" class="headerlink" title="怎样判断对象是否存活"></a>怎样判断对象是否存活</h3><ul><li>是否使用引用计数法？很多判断对象存活的算法是这样的，给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1，当引用失效时，计数器减1；</li><li>任何时刻计数器都为0的对象就是不可能再被使用的。客观的来说，引用计数法的实现简单，判定效率也很高，在大部分情况下是一个不错的算法，也有一些著名的案例，列如微软的COM技术，但是，在Java语言中没有选用引用技术发来管理内存，其中最主要的原因是因为它很难解决对象之间的互循环引用问题。</li></ul><blockquote><p>摘抄自&lt;&lt;深入理解Java虚拟机&gt;&gt;一书中的原话</p><ul><li>根搜索算法：Java是使用根搜索算法判断对象是否存活的。</li><li>这个算法的思路就是通过一系列的名为“GC roots”的对象作为起点，从这些节点开始向下搜索，搜索走过的路径称为引用链，当一个对象的GC roots没有任何引用链相连时，则证明此对象是不可用的。如下图所示，对象object5,object6,object7虽然相互关联，但是他们的GC roots是不可达到的，所以它们将会被判定是可回收的对象。</li></ul></blockquote><p><img src="https://gitee.com/uploads/images/2018/0703/173354_410e32c9_1478371.png" alt="输入图片说明" title="image.png"></p><h3 id="作为GC-roots的几种对象"><a href="#作为GC-roots的几种对象" class="headerlink" title="作为GC roots的几种对象"></a>作为GC roots的几种对象</h3><ul><li>虚拟机栈(栈中的本地变量表)中的引用对象。</li><li>方法区中的类静态属性引用对象。</li><li>方法区中的常量引用的对象。</li><li>本地方法中JNI（即一般说的native方法）的引用的对象。</li></ul><h2 id="6-虚拟机类加载机制"><a href="#6-虚拟机类加载机制" class="headerlink" title="6. 虚拟机类加载机制"></a>6. 虚拟机类加载机制</h2><h3 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h3><ul><li><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载（Loading）、验证（Verification）、准备(Preparation)、解析(Resolution)、初始化(Initialization)、使用(Using)和卸载(Unloading)7个阶段。其中准备、验证、解析3个部分统称为连接（Linking）<br><img src="https://images.gitee.com/uploads/images/2019/0120/145642_5617ec80_1478371.png" alt="输入图片说明" title="在这里输入图片标题"></p></li><li><p>加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始，而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定（也称为动态绑定或晚期绑定）。</p></li></ul><h3 id="何时开始类加载的第一个阶段"><a href="#何时开始类加载的第一个阶段" class="headerlink" title="何时开始类加载的第一个阶段"></a>何时开始类加载的第一个阶段</h3><ul><li>java虚拟机规范中并没有进行强制约束，这点可以交给虚拟机的具体实现来自由把握。但是对于初始阶段，虚拟机规范则是严格规定了有且只有5种情况必须立即对类进行初始化（而加载，验证，准备自然需要再次之前开始）</li></ul><ol><li>遇到<code>new,getstatic,pustatic</code>或<code>invokestatic</code>这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。生成这4条指令的最常见Java代码场景是：使用new关键字实例化对象，读取或设置一个类的静态字段（被final修饰，已在编译器把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法的时候。</li><li>对类进行反射调用时，如果类没有进行过初始化，则需要先触发其初始化。</li><li>当初始化一个类时，如果发现父类还没有初始化，则需要先触发父类初始化。</li><li>当虚拟机启动时，用户指定一个执行的主类，虚拟机会先初始化这个主类。</li><li>当使用jdk1.7动态语言支持时,如果一个实例最后解析结果REF_getStatic,REF_putStatic,REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</li></ol><h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><h4 id="1-加载"><a href="#1-加载" class="headerlink" title="1. 加载"></a>1. 加载</h4><p>在加载阶段（可以参考java.lang.ClassLoader的loadClass()方法），虚拟机需要完成以下3件事情：</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流（并没有指明要从一个Class文件中获取，可以从其他渠道，譬如：网络、动态生成、数据库等）；</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构；</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口；</li></ul><p>加载阶段和连接阶段（Linking）的部分内容（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的内容，这两个阶段的开始时间仍然保持着固定的先后顺序。</p><h4 id="2-验证"><a href="#2-验证" class="headerlink" title="2. 验证"></a>2. 验证</h4><p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。 </p><p> <strong>验证阶段大致会完成4个阶段的检验动作：</strong> </p><ol><li>文件格式验证：验证字节流是否符合Class文件格式的规范；例如：是否以魔术0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。</li><li>元数据验证：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求；例如：这个类是否有父类，除了java.lang.Object之外。</li><li>字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的</li><li>符号引用验证：确保解析动作能正确执行。</li></ol><p>验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用-Xverifynone参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</p><h4 id="3-准备"><a href="#3-准备" class="headerlink" title="3. 准备"></a>3. 准备</h4><ul><li>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。这时候进行内存分配的仅包括类变量（被static修饰的变量），而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在堆中。其次，这里所说的初始值“通常情况”下是数据类型的零值，假设一个类变量的定义为：</li></ul><pre><code>public static int value=123;</code></pre><ul><li>那变量value在准备阶段过后的初始值为0而不是123.因为这时候尚未开始执行任何java方法，而把value赋值为123的putstatic指令是程序被编译后，存放于类构造器()方法之中，所以把value赋值为123的动作将在初始化阶段才会执行。 </li><li>至于“特殊情况”是指：public static final int value=123，即当类字段的字段属性是ConstantValue时，会在准备阶段初始化为指定的值，所以标注为final之后，value的值在准备阶段初始化为123而非0.</li></ul><h4 id="4-解析"><a href="#4-解析" class="headerlink" title="4. 解析"></a>4. 解析</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。</p><h4 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5. 初始化"></a>5. 初始化</h4><ul><li>如果一个类被主动引用，就会触发类的初始化。</li><li>在java中，直接引用的情况有，通过new关键字实例化对象、读取或设置类的静态变量、调用类的静态方法。通过反射方式执行以上三种行为。初始化子类的时候，会触发父类的初始化。作为程序入口直接运行时（也就是直接调用main方法）。除了以上四种情况，其他使用类的方式叫做被动引用，而被动引用不会触发类的初始化<h4 id="6-使用"><a href="#6-使用" class="headerlink" title="6. 使用"></a>6. 使用</h4></li><li>类的使用包括主动引用和被动引用</li><li>被动引用：引用父类的静态字段，只会引起父类的初始化，而不会引起子类的初始化。定义类数组，不会引起类的初始化。引用类的常量，不会引起类的初始化。<h4 id="7-卸载"><a href="#7-卸载" class="headerlink" title="7. 卸载"></a>7. 卸载</h4></li><li>满足下面的情况，类就会被卸载：该类所有的实例都已经被回收，也就是java堆中不存在该类的任何实例。加载该类的ClassLoader已经被回收。该类对应的java.lang.Class对象没有任何地方被引用，无法在任何地方通过反射访问该类的方法。</li><li>如果以上三个条件全部满足，jvm就会在方法区垃圾回收的时候对类进行卸载，类的卸载过程其实就是在方法区中清空类信息，java类的整个生命周期就结束了。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>对象基本上都是在jvm的堆区中创建，在创建对象之前，会触发类加载（加载、连接、初始化），当类初始化完成后，根据类信息在堆区中实例化类对象，初始化非静态变量、非静态代码以及默认构造方法，当对象使用完之后会在合适的时候被jvm垃圾收集器回收。</li><li>对象的生命周期只是类的生命周期中使用阶段的主动引用的一种情况（即实例化类对象）。而类的整个生命周期则要比对象的生命周期长的多。</li></ul><h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><ul><li>jvm（java虚拟机）中的几个比较重要的内存区域，这几个区域在java类的生命周期中扮演着比较重要的角色：</li></ul><ol><li>方法区：在java的虚拟机中有一块专门用来存放已经加载的类信息、常量、静态变量以及方法代码的内存区域，叫做方法区。</li><li>常量池：常量池是方法区的一部分，主要用来存放常量和类中的符号引用等信息。</li><li>堆区：用于存放类的对象实例。</li><li>栈区：也叫java虚拟机栈，是由一个一个的栈帧组成的后进先出的栈式结构，栈桢中存放方法运行时产生的局部变量、方法出口等信息。当调用一个方法时，虚拟机栈中就会创建一个栈帧存放这些数据，当方法调用完成时，栈帧消失，如果方法中调用了其他方法，则继续在栈顶创建新的栈桢。</li></ol><ul><li><p>当我们编写一个java的源文件后，经过编译会生成一个后缀名为class的文件，这种文件叫做字节码文件，只有这种字节码文件才能够在java虚拟机中运行，java类的生命周期就是指一个class文件从加载到卸载的全过程</p></li><li><p>一个java类的完整的生命周期会经历加载、连接、初始化、使用、和卸载五个阶段，当然也有在加载或者连接之后没有被初始化就直接被使用的情况</p></li></ul><p><img src="https://gitee.com/uploads/images/2018/0704/125820_a13e503b_1478371.png" alt="输入图片说明" title="微信图片_20180704125805.png"></p><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><ul><li>通过一个类的全限定名来获取描述此类的二进制字节流,这个动作放到java虚拟机外部去实现。以便让应用程序自己决定如何去获取所需要的类。实现各动作的代码模块称为“类加载器”。</li><li>比较两个类是否相等，只有这两个类是由同一个类加载器加载的前提下才有意义，否则即使这两个；诶是来源同一个class文件，但类加载器不同，他们也不相等。<h4 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h4>这个类加载器负责放在&lt;JAVA_HOME&gt;\lib目录中的，或者被-Xbootclasspath参数所指定的路径中的，并且是虚拟机识别的类库。用户无法直接使用。</li></ul><h4 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h4><p>这个类加载器由sun.misc.Launcher$AppClassLoader实现。它负责&lt;JAVA_HOME&gt;\lib\ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库。用户可以直接使用。</p><h4 id="应用程序类加载器"><a href="#应用程序类加载器" class="headerlink" title="应用程序类加载器"></a>应用程序类加载器</h4><p>这个类由sun.misc.Launcher$AppClassLoader实现。是ClassLoader中getSystemClassLoader()方法的返回值。它负责用户路径（ClassPath）所指定的类库。用户可以直接使用。如果用户没有自己定义类加载器，默认使用这个</p><h4 id="自定义加载器"><a href="#自定义加载器" class="headerlink" title="自定义加载器"></a>自定义加载器</h4><p>用户自己定义的类加载器。</p><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>如果一个类加载器收到类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器完成。每个类加载器都是如此，只有当父加载器在自己的搜索范围内找不到指定的类时（即ClassNotFoundException），子加载器才会尝试自己去加载。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>Java类随着它的类加载器一起具备了一种带有优先级的层次关系。例如类java.lang.Object，它存在在rt.jar中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的Bootstrap ClassLoader进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。</li><li>相反，如果没有双亲委派模型而是由各个类加载器自行加载的话，如果用户编写了一个java.lang.Object的同名类并放在ClassPath中，那系统中将会出现多个不同的Object类，程序将混乱。因此，如果开发者尝试编写一个与rt.jar类库中重名的Java类，可以正常编译，但是永远无法被加载运行。</li></ul><h2 id="7-happens-before原则"><a href="#7-happens-before原则" class="headerlink" title="7. happens-before原则"></a>7. happens-before原则</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>我们无法就所有场景来规定某个线程修改的变量何时对其他线程可见，但是我们可以指定某些规则，这规则就是happens-before，从JDK 5 开始，JMM就使用happens-before的概念来阐述多线程之间的内存可见性。</li><li>在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系。<br>happens-before原则非常重要，它是判断数据是否存在竞争、线程是否安全的主要依据，依靠这个原则，我们解决在并发环境下两操作之间是否可能存在冲突的所有问题。下面我们就一个简单的例子稍微了解下happens-before ；</li></ul><pre><code>i = 1;       //线程A执行j = i ;      //线程B执行</code></pre><p>j 是否等于1呢？假定线程A的操作（i = 1）happens-before线程B的操作（j = i）,那么可以确定线程B执行后j = 1 一定成立，如果他们不存在happens-before原则，那么j = 1 不一定成立。这就是happens-before原则的威力。</p><h3 id="原则定义"><a href="#原则定义" class="headerlink" title="原则定义"></a>原则定义</h3><ul><li>如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。 </li><li>两个操作之间存在happens-before关系，并不意味着一定要按照happens-before原则制定的顺序来执行。如果重排序之后的执行结果与按照happens-before关系来执行的结果一致，那么这种重排序并不非法。</li></ul><h3 id="规则如下"><a href="#规则如下" class="headerlink" title="规则如下"></a>规则如下</h3><h4 id="程序次序规则"><a href="#程序次序规则" class="headerlink" title="程序次序规则"></a>程序次序规则</h4><p>一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作；</p><h4 id="锁定规则"><a href="#锁定规则" class="headerlink" title="锁定规则"></a>锁定规则</h4><p>一个unLock操作先行发生于后面对同一个锁额lock操作；</p><h4 id="volatile变量规则"><a href="#volatile变量规则" class="headerlink" title="volatile变量规则"></a>volatile变量规则</h4><p>对一个变量的写操作先行发生于后面对这个变量的读操作；</p><h4 id="传递规则"><a href="#传递规则" class="headerlink" title="传递规则"></a>传递规则</h4><p>如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C；</p><h4 id="线程启动规则"><a href="#线程启动规则" class="headerlink" title="线程启动规则"></a>线程启动规则</h4><p>Thread对象的start()方法先行发生于此线程的每个一个动作；</p><h4 id="程中断规则"><a href="#程中断规则" class="headerlink" title="程中断规则"></a>程中断规则</h4><p>对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生；</p><h4 id="线程终结规则"><a href="#线程终结规则" class="headerlink" title="线程终结规则"></a>线程终结规则</h4><p>线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行；</p><h4 id="对象终结规则"><a href="#对象终结规则" class="headerlink" title="对象终结规则"></a>对象终结规则</h4><p>一个对象的初始化完成先行发生于他的finalize()方法的开始；</p><h2 id="8-对象"><a href="#8-对象" class="headerlink" title="8. 对象"></a>8. 对象</h2><h3 id="Java中创建对象的5种方式"><a href="#Java中创建对象的5种方式" class="headerlink" title="Java中创建对象的5种方式"></a>Java中创建对象的5种方式</h3><p>使用new关键字 → 调用了构造函数</p><pre><code>Employee emp1 = new Employee();</code></pre><p>使用Class类的newInstance方法→ 调用了构造函数</p><pre><code>&lt;!--使用Class类的newInstance方法创建对象。这个newInstance方法调用无参的构造函数创建对象。--&gt;Employee emp2 = (Employee) Class.forName(&quot;org.programming.mitra.exercises.Employee&quot;).newInstance();</code></pre><p>使用Constructor类的newInstance方法 → 调用了构造函数</p><pre><code>&lt;!--和Class类的newInstance方法很像， java.lang.reflect.Constructor类里也有一个newInstance方法可以创建对象--&gt;Constructor&lt;Employee&gt; constructor = Employee.class.getConstructor();Employee emp3 = constructor.newInstance();</code></pre><p>使用clone方法→ 没有调用构造函数</p><pre><code>&lt;!--无论何时我们调用一个对象的clone方法，jvm就会创建一个新的对象，将前面对象的内容全部拷贝进去。用clone方法创建对象并不会调用任何构造函数。--&gt;&lt;!--要使用clone方法，我们需要先实现Cloneable接口并实现其定义的clone方法--&gt;Employee emp4 = (Employee) emp3.clone();</code></pre><p>使用反序列化→ 没有调用构造函数</p><pre><code>ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;data.obj&quot;));Employee emp5 = (Employee) in.readObject();</code></pre><p><img src="https://images.gitee.com/uploads/images/2019/0120/151315_16e661d8_1478371.png" alt="对象的创建"></p><h3 id="Java-对象生命周期"><a href="#Java-对象生命周期" class="headerlink" title="Java 对象生命周期"></a>Java 对象生命周期</h3><p> 对象的整个生命周期大致可以分为7个阶段：</p><h4 id="创建阶段（Creation）"><a href="#创建阶段（Creation）" class="headerlink" title="创建阶段（Creation）"></a>创建阶段（Creation）</h4><pre><code>在创建阶段系统通过下面的几个步骤来完成对象的创建过程1，为对象分配存储空间2，开始构造对象3，从超类到子类对static成员进行初始化4，超类成员变量按顺序初始化，递归调用超类的构造方法5，子类成员变量按顺序初始化，子类构造方法调用一旦对象被创建，并被分派给某些变量赋值，这个对象的状态就切换到了应用阶段</code></pre><h4 id="阶段（Using）"><a href="#阶段（Using）" class="headerlink" title="阶段（Using）"></a>阶段（Using）</h4><pre><code>对象至少被一个强引用持有着</code></pre><h4 id="不可视阶段（Invisible）"><a href="#不可视阶段（Invisible）" class="headerlink" title="不可视阶段（Invisible）"></a>不可视阶段（Invisible）</h4><pre><code>当一个对象处于不可见阶段时，说明程序本身不再持有该对象的任何强引用，虽然该这些引用仍然是存在着的。简单说就是程序的执行已经超出了该对象的作用域了。</code></pre><h4 id="不可到达阶段（Unreachable）"><a href="#不可到达阶段（Unreachable）" class="headerlink" title="不可到达阶段（Unreachable）"></a>不可到达阶段（Unreachable）</h4><pre><code>对象处于不可达阶段是指该对象不再被任何强引用所持有与“不可见阶段”相比，“不可见阶段”是指程序不再持有该对象的任何强引用，这种情况下，该对象仍可能被JVM等系统下的某些已装载的静态变量或线程或JNI等强引用持有着，这些特殊的强引用被称为”GC root”。存在着这些GC root会导致对象的内存泄露情况，无法被回收。</code></pre><h4 id="可收集阶段（Collected）"><a href="#可收集阶段（Collected）" class="headerlink" title="可收集阶段（Collected）"></a>可收集阶段（Collected）</h4><pre><code>当垃圾回收器发现该对象已经处于“不可达阶段”并且垃圾回收器已经对该对象的内存空间重新分配做好准备时，则对象进入了“收集阶段”。如果该对象已经重写了finalize()方法，则会去执行该方法的终端操作。</code></pre><h4 id="终结阶段（Finalized）"><a href="#终结阶段（Finalized）" class="headerlink" title="终结阶段（Finalized）"></a>终结阶段（Finalized）</h4><pre><code>当对象执行完finalize()方法后仍然处于不可达状态时，则该对象进入终结阶段。在该阶段是等待垃圾回收器对该对象空间进行回收。</code></pre><h4 id="对象空间重新分配阶段"><a href="#对象空间重新分配阶段" class="headerlink" title="对象空间重新分配阶段"></a>对象空间重新分配阶段</h4><pre><code>垃圾回收器对该对象的所占用的内存空间进行回收或者再分配了，则该对象彻底消失了，称之为“对象空间重新分配阶段”。</code></pre><h2 id="9-对象内存分配"><a href="#9-对象内存分配" class="headerlink" title="9. 对象内存分配"></a>9. 对象内存分配</h2><p>类加载检查通过后，虚拟机将为新生对象分配内存，对象所需内存大小在类加载完成后可以完全确定，对象内存分配任务就是把一块确定大小的内存从堆中划分出来。</p><h3 id="指针碰撞法"><a href="#指针碰撞法" class="headerlink" title="指针碰撞法"></a>指针碰撞法</h3><ul><li>如果堆中内存是绝对规整的。用过的内存放一边，空闲的放一边，中间放着一个指针作为分界点的指示器，那所分配内存就是把指针向空闲一边移动一段与对象大小相等的距离，即为“指针碰撞”<h3 id="空闲列表法"><a href="#空闲列表法" class="headerlink" title="空闲列表法"></a>空闲列表法</h3></li><li>如果堆中内存不规整，已使用内存和未使用内存相互交错，虚拟机就必须一个列表，记录哪些内存块可用，在分配时从列表中找到一块足够大空间划分给对象，并更新列表上记录，即为“空闲列表”<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3></li><li>选择何种分配方式，由堆是否规整决定，而堆是否规整由采用的垃圾收集器是否有压缩整理功能决定。</li><li>使用Serial，ParNew等带Compactg过程的收集器时，系统采用指针碰撞法</li><li>使用CMS这种基于Mark-Sweep算法的收集器时，系统采用空闲列表法<h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2></li><li>Java程序需要通过栈上的references数据来操作堆上的具体对象。因为referencesz只是指向对象的一个引用，并没有定义这个引用通过何种方式去方位堆中对象的具体位置。所以对象访问方式取决于虚拟机实现而定的。</li><li>目前主流的访问方式有使用句柄和直接指针两种。<h3 id="句柄定位"><a href="#句柄定位" class="headerlink" title="句柄定位"></a>句柄定位</h3>使用句柄访问时，Java堆中会划分出一块内存来作为句柄池，references中存储的就是对象的句柄地址。句柄中包含对象实列数据与类型数据各组的具体地址信息  references-&gt;句柄池-&gt;java堆</li></ul><p><img src="https://images.gitee.com/uploads/images/2019/0121/203615_b37c5a59_1478371.png" alt="输入图片说明" title="屏幕截图.png"></p><h3 id="直接指针定位"><a href="#直接指针定位" class="headerlink" title="直接指针定位"></a>直接指针定位</h3><p>如果是直接指针访问，Java堆的布局就必须考虑如何放置访问类型数据相关。</p><p><img src="https://images.gitee.com/uploads/images/2019/0121/203833_a0988220_1478371.png" alt="输入图片说明" title="屏幕截图.png"></p><h3 id="各自优点"><a href="#各自优点" class="headerlink" title="各自优点"></a>各自优点</h3><ul><li>句柄访问最大好处就是references中存储的是稳定的句柄地址，在对象移动(垃圾收集时移动对象是普遍行为)时只会改变句柄中的实列数据指针，references本身不需要修改。</li><li>直接指针访问的最大好处是速度快，节省了一次定位的实时间开销。</li></ul><h2 id="10-常量池总结"><a href="#10-常量池总结" class="headerlink" title="10. 常量池总结"></a>10. 常量池总结</h2><h3 id="全局字符串池"><a href="#全局字符串池" class="headerlink" title="全局字符串池"></a>全局字符串池</h3><p>string pool也有叫做string literal pool</p><ul><li>全局字符串池里的内容是在类加载完成，经过验证，准备阶段之后在堆中生成字符串对象实例，然后将该字符串对象实例的引用值存到string pool中（记住：string pool中存的是引用值而不是具体的实例对象，具体的实例对象是在堆中开辟的一块空间存放的。）。</li><li>在HotSpot VM里实现的string pool功能的是一个StringTable类，它是一个哈希表，里面存的是驻留字符串(也就是我们常说的用双引号括起来的)的引用（而不是驻留字符串实例本身），也就是说在堆中的某些字符串实例被这个StringTable引用之后就等同被赋予了”驻留字符串”的身份。这个StringTable在每个HotSpot VM的实例只有一份，被所有的类共享。</li></ul><h3 id="class文件常量池"><a href="#class文件常量池" class="headerlink" title="class文件常量池"></a>class文件常量池</h3><p>class constant pool</p><ul><li>我们都知道，class文件中除了包含类的版本、字段、方法、接口等描述信息外，还有一项信息就是常量池(constant pool table)，用于存放编译器生成的各种字面量(Literal)和符号引用(Symbolic References)。 </li><li>字面量就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。</li><li>符号引用是一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可（它与直接引用区分一下，直接引用一般是指向方法区的本地指针，相对偏移量或是一个能间接定位到目标的句柄）。一般包括下面三类常量。类和接口的全限定名，字段的名称和描述符，方法的名称和描述符。</li></ul><p>常量池的每一项常量都是一个表，一共有如下表所示的11种各不相同的表结构数据，这每个表开始的第一位都是一个字节的标志位（取值1-12），代表当前这个常量属于哪种常量类型。 </p><p><img src="https://images.gitee.com/uploads/images/2018/1024/155541_2eec5e16_1478371.png" alt="输入图片说明" title="屏幕截图.png"></p><h3 id="运行时常量池（runtime-constant-pool）"><a href="#运行时常量池（runtime-constant-pool）" class="headerlink" title="运行时常量池（runtime constant pool）"></a>运行时常量池（runtime constant pool）</h3><p>当java文件被编译成class文件之后，也就是会生成我上面所说的class常量池，那么运行时常量池又是什么时候产生的呢？</p><ul><li>jvm在执行某个类的时候，必须经过加载、连接、初始化，而连接又包括验证、准备、解析三个阶段。而当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，运行时常量池也是每个类都有一个。在上面我也说了，class常量池中存的是字面量和符号引用，也就是说他们存的并不是对象的实例，而是对象的符号引用值。而经过解析（resolve）之后，也就是把符号引用替换为直接引用，解析的过程会去查询全局字符串池，也就是我们上面所说的StringTable，以保证运行时常量池所引用的字符串与全局字符串池中所引用的是一致的。</li></ul><p>举个实例来说明一下:</p><pre><code>public class HelloWorld {    public static void main(String []args) {        String str1 = &quot;abc&quot;;         String str2 = new String(&quot;def&quot;);         String str3 = &quot;abc&quot;;         String str4 = str2.intern();         String str5 = &quot;def&quot;;         System.out.println(str1 == str3);//true         System.out.println(str2 == str4);//false         System.out.println(str4 == str5);//true    }}</code></pre><ul><li>回到上面的那个程序，现在就很容易解释整个程序的内存分配过程了，首先，在堆中会有一个”abc”实例，全局StringTable中存放着”abc”的一个引用值</li><li>然后在运行第二句的时候会生成两个实例，一个是”def”的实例对象，并且StringTable中存储一个”def”的引用值，还有一个是new出来的一个”def”的实例对象 与上面那个是不同的实例</li><li>当在解析str3的时候查找StringTable，里面有”abc”的全局驻留字符串引用，所以str3的引用地址与之前的那个已存在的相同</li><li>str4是在运行的时候调用intern()函数，返回StringTable中”def”的引用值，如果没有就将str2的引用值添加进去，在这里，StringTable中已经有了”def”的引用值了，所以返回上面在new str2的时候添加到StringTable中的 “def”引用值</li><li>上面程序的首先经过编译之后，在该类的class常量池中存放一些符号引用，然后类加载之后，将class常量池中存放的符号引用转存到运行时常量池中，然后经过验证，准备阶段之后，在堆中生成驻留字符串的实例对象（也就是上例中str1所指向的”abc”实例对象），然后将这个对象的引用存到全局String Pool中，也就是StringTable中，最后在解析阶段，要把运行时常量池中的符号引用替换成直接引用，那么就直接查询StringTable，保证StringTable里的引用值与运行时常量池中的引用值一致，大概整个过程就是这样了。</li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li>1.全局常量池在每个VM中只有一份，存放的是字符串常量的引用值。</li><li>2.class常量池是在编译的时候每个class都有的，在编译阶段，存放的是常量的符号引用。</li><li>3.运行时常量池是在类加载完成之后，将每个class常量池中的符号引用值转存到运行时常量池中，也就是说，每个class都有一个运行时常量池，类在解析之后，将符号引用替换成直接引用，与全局常量池中的引用值保持一致。</li></ul><h3 id="class文件常量池和运行时常量池"><a href="#class文件常量池和运行时常量池" class="headerlink" title="class文件常量池和运行时常量池"></a>class文件常量池和运行时常量池</h3><p>最近一直被方法区里面存着什么东西困扰着？</p><pre><code> 1.方法区里存class文件信息和class文件常量池是个什么关系。 2.class文件常量池和运行时常量池是什么关系。        </code></pre><p>方法区存着类的信息，常量和静态变量，即类被编译后的数据。这个说法其实是没问题的，只是太笼统了。更加详细一点的说法是方法区里存放着类的版本，字段，方法，接口和常量池。常量池里存储着字面量和符号引用。</p><p>符号引用包括：1.类的全限定名，2.字段名和属性，3.方法名和属性。</p><p><img src="https://images.gitee.com/uploads/images/2018/1024/165202_c3ff9d88_1478371.png" alt="输入图片说明" title="屏幕截图.png"><br><img src="https://images.gitee.com/uploads/images/2018/1024/165214_c6ff9536_1478371.png" alt="输入图片说明" title="屏幕截图.png"></p><p> 可以看到在方法区里的class文件信息包括：魔数，版本号，常量池，类，父类和接口数组，字段，方法等信息，其实类里面又包括字段和方法的信息。</p><p><img src="https://images.gitee.com/uploads/images/2018/1024/165252_dced1999_1478371.png" alt="输入图片说明" title="屏幕截图.png"></p><p><img src="https://images.gitee.com/uploads/images/2018/1024/165306_6bb9129a_1478371.png" alt="输入图片说明" title="屏幕截图.png"></p><h3 id="class文件常量池和运行时常量池的关系以及区别"><a href="#class文件常量池和运行时常量池的关系以及区别" class="headerlink" title="class文件常量池和运行时常量池的关系以及区别"></a>class文件常量池和运行时常量池的关系以及区别</h3><ul><li>class文件常量池存储的是当class文件被java虚拟机加载进来后存放在方法区的一些字面量和符号引用，字面量包括字符串，基本类型的常量。</li><li><p>运行时常量池是当class文件被加载完成后，java虚拟机会将class文件常量池里的内容转移到运行时常量池里，在class文件常量池的符号引用有一部分是会被转变为直接引用的，比如说类的静态方法或私有方法，实例构造方法，父类方法，这是因为这些方法不能被重写其他版本，所以能在加载的时候就可以将符号引用转变为直接引用，而其他的一些方法是在这个方法被第一次调用的时候才会将符号引用转变为直接引用的。</p><p><strong>总结：</strong> </p></li><li><p>方法区里存储着class文件的信息和运行时常量池,class文件的信息包括类信息和class文件常量池。</p></li><li><p>运行时常量池里的内容除了是class文件常量池里的内容外，还将class文件常量池里的符号引用转变为直接引用，而且运行时常量池里的内容是能动态添加的。例如调用String的intern方法就能将string的值添加到String常量池中，这里String常量池是包含在运行时常量池里的，但在jdk1.8后，将String常量池放到了堆中。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode我们必知必会的SQL面试题</title>
      <link href="/2019/01/15/sui-bi/leetcode-wo-men-bi-zhi-bi-hui-de-sql-mian-shi-ti/"/>
      <url>/2019/01/15/sui-bi/leetcode-wo-men-bi-zhi-bi-hui-de-sql-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="获取Employee第n高的薪水"><a href="#获取Employee第n高的薪水" class="headerlink" title="获取Employee第n高的薪水"></a>获取Employee第n高的薪水</h2><p>编写一个 SQL 查询，获取 Employee 表中第 n 高的薪水（Salary）</p><pre><code>+----+--------+| Id | Salary |+----+--------+| 1  | 100    || 2  | 200    || 3  | 300    |+----+--------+</code></pre><p>例如上述 Employee 表，n = 2 时，应返回第二高的薪水 200。如果不存在第 n 高的薪水，那么查询应返回 null。</p><pre><code>+------------------------+| getNthHighestSalary(2) |+------------------------+| 200                    |+------------------------+</code></pre><p>分组去重加分页查询语法</p><pre><code>CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INTBEGINSET N = N - 1;  RETURN ( select Salary from Employee  GROUP BY Salary ORDER BY Salary desc  LIMIT N,1    );END</code></pre><h3 id="SQL查询来实现分数排名"><a href="#SQL查询来实现分数排名" class="headerlink" title="SQL查询来实现分数排名"></a>SQL查询来实现分数排名</h3><p>编写一个 SQL 查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。</p><pre><code>+----+-------+| Id | Score |+----+-------+| 1  | 3.50  || 2  | 3.65  || 3  | 4.00  || 4  | 3.85  || 5  | 4.00  || 6  | 3.65  |+----+-------+</code></pre><p>例如，根据上述给定的 Scores 表，你的查询应该返回（按分数从高到低排列）：</p><pre><code>+-------+------+| Score | Rank |+-------+------+| 4.00  | 1    || 4.00  | 1    || 3.85  | 2    || 3.65  | 3    || 3.65  | 3    || 3.50  | 4    |+-------+------+</code></pre><p> 考虑两件事：1按分数降序排列  2 分数相同属同一级</p><ul><li>外面的查询负责查排序后的粉数</li><li>select里的查询语句负责排名操作 通过score条件判断 如果<pre><code>select Score,(SELECT COUNT(DISTINCT score) from Scores WHERE score &gt;= s.score) as Rank  from scores s ORDER BY Score DESC </code></pre></li></ul><h3 id="超过经理收入的员工"><a href="#超过经理收入的员工" class="headerlink" title="超过经理收入的员工"></a>超过经理收入的员工</h3><p>Employee 表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。</p><pre><code>+----+-------+--------+-----------+| Id | Name  | Salary | ManagerId |+----+-------+--------+-----------+| 1  | Joe   | 70000  | 3         || 2  | Henry | 80000  | 4         || 3  | Sam   | 60000  | NULL      || 4  | Max   | 90000  | NULL      |+----+-------+--------+-----------+</code></pre><p>给定 Employee 表，编写一个 SQL 查询，该查询可以获取收入超过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入超过他的经理的员工。</p><pre><code>+----------+| Employee |+----------+| Joe      |+----------+</code></pre><p>通过</p><p>解答：通过自连接 关联表两次查询 组装出员工表每个员工对应的经理信息 即可通过条件判断取出结果</p><pre><code>select e1.Name Employee  from Employee e1,Employee e2 where e1.ManagerId=e2.Idand e1.Salary&gt;e2.Salary</code></pre><h2 id="部门工资最高的员工"><a href="#部门工资最高的员工" class="headerlink" title="部门工资最高的员工"></a>部门工资最高的员工</h2><p>Employee 表包含所有员工信息，每个员工有其对应的 Id, salary 和 department Id。</p><pre><code>+----+-------+--------+--------------+| Id | Name  | Salary | DepartmentId |+----+-------+--------+--------------+| 1  | Joe   | 70000  | 1            || 2  | Henry | 80000  | 2            || 3  | Sam   | 60000  | 2            || 4  | Max   | 90000  | 1            |+----+-------+--------+--------------+</code></pre><p>Department 表包含公司所有部门的信息。</p><pre><code>+----+----------+| Id | Name     |+----+----------+| 1  | IT       || 2  | Sales    |+----+----------+</code></pre><p>编写一个 SQL 查询，找出每个部门工资最高的员工。例如，根据上述给定的表格，Max 在 IT 部门有最高工资，Henry 在 Sales 部门有最高工资。</p><p>解答 内连接匹配查询出所有员工对应的部门名称 然后通过子查询条件匹配</p><pre><code>select d.Name as Department,e.Name as Employee, e.Salary          from Department d  join Employee e on d.Id=e.DepartmentId        where e.Salary &gt;=(select max(Salary) from Employee where DepartmentId=d.Id)</code></pre><h2 id="部门工资前三高的员工"><a href="#部门工资前三高的员工" class="headerlink" title="部门工资前三高的员工"></a>部门工资前三高的员工</h2><p>Employee 表包含所有员工信息，每个员工有其对应的 Id, salary 和 department Id 。</p><pre><code>+----+-------+--------+--------------+| Id | Name  | Salary | DepartmentId |+----+-------+--------+--------------+| 1  | Joe   | 70000  | 1            || 2  | Henry | 80000  | 2            || 3  | Sam   | 60000  | 2            || 4  | Max   | 90000  | 1            || 5  | Janet | 69000  | 1            || 6  | Randy | 85000  | 1            |+----+-------+--------+--------------+</code></pre><p>Department 表包含公司所有部门的信息。</p><pre><code>+----+----------+| Id | Name     |+----+----------+| 1  | IT       || 2  | Sales    |+----+----------+</code></pre><ul><li>思路是查询Employee a,Employee b 而且a.salary小于b.salary，a.departmentid=b.departmengtid，其中去重后的b数量不能大于3，这样就可以查出每个部门工资前三的员工</li><li>链接两表，将部门id换成name</li><li>如何取前三高？不妨再加入一张Employee表，将其与1中的表作对比，令e2表中的salary大于e1表中的salary</li><li>限制条件：e2表中salary大于e1表中salary的个数少于3 ==》取前三高的salary<pre><code>SELECT Department.Name AS Department, e1.Name AS Employee, e1.Salary AS SalaryFROM Employee e1JOIN DepartmentON e1.DepartmentId = Department.IdWHERE 3 &gt;   (          SELECT COUNT(DISTINCT e2.Salary)           FROM Employee e2          WHERE e2.Salary &gt; e1.Salary AND e1.DepartmentId = e2.DepartmentId          )</code></pre></li></ul><h2 id="删除重复的电子邮箱"><a href="#删除重复的电子邮箱" class="headerlink" title="删除重复的电子邮箱"></a>删除重复的电子邮箱</h2><p>编写一个 SQL 查询，来删除 Person 表中所有重复的电子邮箱，重复的邮箱里只保留 Id 最小 的那个。</p><pre><code>+----+------------------+| Id | Email            |+----+------------------+| 1  | john@example.com || 2  | bob@example.com  || 3  | john@example.com |+----+------------------+</code></pre><p>Id 是这个表的主键。</p><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>我们可以使用以下代码，将此表与它自身在电子邮箱列中连接起来。</p><pre><code>SELECT p1.* FROM Person p1,Person p2 WHERE  p1.Email = p2.Email</code></pre><p>然后我们需要找到其他记录中具有相同电子邮件地址的更大 ID。所以我们可以像这样给 WHERE 子句添加一个新的条件。</p><pre><code>SELECT p1.* FROM Person p1,Person p2 WHERE  p1.Email = p2.Email AND p1.Id &gt; p2.Id</code></pre><p>因为我们已经得到了要删除的记录，所以我们最终可以将该语句更改为 DELETE。</p><pre><code>DELETE p1 FROM Person p1, Person p2  WHERE   p1.Email = p2.Email AND p1.Id &gt; p2.Id</code></pre><h2 id="上升的温度"><a href="#上升的温度" class="headerlink" title="上升的温度"></a>上升的温度</h2><p>给定一个 Weather 表，编写一个 SQL 查询，来查找与之前（昨天的）日期相比温度更高的所有日期的 Id。</p><pre><code>+---------+------------------+------------------+| Id(INT) | RecordDate(DATE) | Temperature(INT) |+---------+------------------+------------------+|       1 |       2015-01-01 |               10 ||       2 |       2015-01-02 |               25 ||       3 |       2015-01-03 |               20 ||       4 |       2015-01-04 |               30 |+---------+------------------+------------------+</code></pre><p>例如，根据上述给定的 Weather 表格，返回如下 Id:</p><pre><code>+----+| Id |+----+|  2 ||  4 |+----+</code></pre><ul><li>使用join 和datediff 日期函数 求差  自连接匹配出有昨天的数据</li></ul><pre><code>select * from  weather w1 join weather w2 on DATEDIFF(w1.RecordDate,w2.RecordDate)=1id  RecordDate    Temperature       w2.id          昨天的日期          w2.Temperature(昨天的温度)2      2019-01-02      25                  1                 2019-01-01                104      2019-01-04      30                  3                 2019-01-03               204      2019-01-04      30                  3                 2019-01-03                20条件帅选今天比昨天温度高的数据 w1.Temperature&gt;w2.Temperatureselect w1.id  from  weather w1 join weather w2 on DATEDIFF(w1.RecordDate,w2.RecordDate)=1 where w1.Temperature&gt;w2.Temperature</code></pre><h2 id="行程和用户"><a href="#行程和用户" class="headerlink" title="行程和用户"></a>行程和用户</h2><p>Trips 表中存所有出租车的行程信息。每段行程有唯一键 Id，Client_Id 和 Driver_Id 是 Users 表中 Users_Id 的外键。Status 是枚举类型，枚举成员为 (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’)。</p><pre><code>+----+-----------+-----------+---------+--------------------+----------+| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|+----+-----------+-----------+---------+--------------------+----------+| 1  |     1     |    10     |    1    |     completed      |2013-10-01|| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|| 3  |     3     |    12     |    6    |     completed      |2013-10-01|| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|| 5  |     1     |    10     |    1    |     completed      |2013-10-02|| 6  |     2     |    11     |    6    |     completed      |2013-10-02|| 7  |     3     |    12     |    6    |     completed      |2013-10-02|| 8  |     2     |    12     |    12   |     completed      |2013-10-03|| 9  |     3     |    10     |    12   |     completed      |2013-10-03| | 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|+----+-----------+-----------+---------+--------------------+----------+</code></pre><p>Users 表存所有用户。每个用户有唯一键 Users_Id。Banned 表示这个用户是否被禁止，Role 则是一个表示（‘client’, ‘driver’, ‘partner’）的枚举类型。</p><pre><code>+----------+--------+--------+| Users_Id | Banned |  Role  |+----------+--------+--------+|    1     |   No   | client ||    2     |   Yes  | client ||    3     |   No   | client ||    4     |   No   | client ||    10    |   No   | driver ||    11    |   No   | driver ||    12    |   No   | driver ||    13    |   No   | driver |+----------+--------+--------+</code></pre><p>查出 2013年10月1日 至 2013年10月3日 期间非禁止用户的取消率。基于上表，你的 SQL 语句应返回如下结果，取消率（Cancellation Rate）保留两位小数。</p><pre><code>+------------+-------------------+|     Day    | Cancellation Rate |+------------+-------------------+| 2013-10-01 |       0.33        || 2013-10-02 |       0.00        || 2013-10-03 |       0.50        |+------------+-------------------+</code></pre><p>解法</p><pre><code>#先求出非禁止用户的所有记录 select * from  Trips t  join Users  u on t.Client_Id =u.Users_Id   where u.Banned=&#39;No&#39; 通过if函数加分组 2013年10月1日 至 2013年10月3日 期间非禁止用户的取消率IF(expr1,expr2,expr3)，如果expr1的值为true，则返回expr2的值，如果expr1的值为false，round(x,d)  ，x指要处理的数，d是指保留几位小数select t.Request_at as Day,   round(count( IF ( t.Status !=&quot;completed&quot;, t.Status, NULL ) ) / count(t.Status),2) as `Cancellation Rate`    from  Trips t   join Users u on t.Client_Id =u.Users_Id        where u.Banned=&#39;No&#39;  and t.request_at between  &quot;2013-10-01&quot; and &quot;2013-10-03&quot;  group by t.Request_at </code></pre><h2 id="换座位"><a href="#换座位" class="headerlink" title="换座位"></a>换座位</h2><ul><li>小美是一所中学的信息科技老师，她有一张 seat 座位表，平时用来储存学生名字和与他们相对应的座位 id。</li><li>其中纵列的 id 是连续递增的 小美想改变相邻俩学生的座位。你能不能帮她写一个 SQL query 来输出小美想要的结果呢？</li></ul><pre><code>+---------+---------+|    id   | student |+---------+---------+|    1    | Abbot   ||    2    | Doris   ||    3    | Emerson ||    4    | Green   ||    5    | Jeames  |+---------+---------+</code></pre><p>假如数据输入的是上表，则输出结果如下：</p><pre><code>+---------+---------+|    id   | student |+---------+---------+|    1    | Doris   ||    2    | Abbot   ||    3    | Green   ||    4    | Emerson ||    5    | Jeames  |+---------+---------+</code></pre><p>注意：如果学生人数是奇数，则不需要改变最后一个同学的座位。</p><pre><code>先把简单的偶数都-1；然后对于非最大的奇数id+1；最后(即else)如果存在未变化的数则值不变select    case                                             #如果    when id%2=0 then id-1                           # id%2为偶数 则返回 id-1     when id&lt;(select max(id) from seat) then id+1   #如果表中最大的ID 小于当前返回的ID 则执行 id+1 也就是取最大ID    else id                                          #如果存在未变化的数则值不变    end as id,student from seat  order by  id</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+docsify打造个人文档</title>
      <link href="/2019/01/04/sui-bi/github-docsify-da-zao-ge-ren-wen-dang/"/>
      <url>/2019/01/04/sui-bi/github-docsify-da-zao-ge-ren-wen-dang/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在日常开发中 前后端对接时 经常要写很多文档Api。docsify就是一个强大的文档生成工具 界面清新好 支持语法高亮和Markdown 语法，并且docsify 扩展了一些 Markdown 语法可以让文档更易读。像vue.js官网(<a href="https://cn.vuejs.org/)就是docsify" target="_blank" rel="noopener">https://cn.vuejs.org/)就是docsify</a> 其中的一种注意 并且是目前用的的最多的主题</p><h3 id="效果图如下"><a href="#效果图如下" class="headerlink" title="效果图如下"></a>效果图如下</h3><p>预览链接：<a href="https://a870439570.github.io/interview-docs" target="_blank" rel="noopener">https://a870439570.github.io/interview-docs</a><br><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de06fadda89?w=1237&amp;h=607&amp;f=png&amp;s=367834" alt=""><br><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de06f91f058?w=1919&amp;h=933&amp;f=png&amp;s=239829" alt=""></p><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>首先先安装好npm和nodejs,这里就不做过多介绍了 自信安装即可 （<a href="https://blog.csdn.net/zimushuang/article/details/79715679）" target="_blank" rel="noopener">https://blog.csdn.net/zimushuang/article/details/79715679）</a></p><p>安装docsify 推荐安装 docsify-cli 工具，可以方便创建及本地预览文档网站。</p><pre><code>npm i docsify-cli -g</code></pre><p>初始化项目 </p><pre><code># 进入指定文件目录 如下：F:\ideWork\githubWork\test_docs 运行    docsify init ./docs</code></pre><p><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de06fdd7ea4?w=485&amp;h=72&amp;f=png&amp;s=3356" alt=""><br>初始化成功后，可以看到 ./docs 目录下创建的几个文件</p><pre><code>index.html 入口文件README.md 会做为主页内容渲染.nojekyll 用于阻止 GitHub Pages 会忽略掉下划线开头的文件</code></pre><p><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de0706dda77?w=341&amp;h=172&amp;f=png&amp;s=13375" alt=""></p><h2 id="本地预览网站"><a href="#本地预览网站" class="headerlink" title="本地预览网站"></a>本地预览网站</h2><p>运行一个本地服务器通过 docsify serve 可以方便的预览效果，而且提供 LiveReload 功能，可以让实时的预览。默认访问<a href="http://localhost:3000/#/。" target="_blank" rel="noopener">http://localhost:3000/#/。</a></p><pre><code>docsify serve docs</code></pre><p>一个基本的文档网站就搭建好了，docsify还可以自定义导航栏，自定义侧边栏以及背景图和一些开发插件等等<br>更多配置请参考官方文档  <a href="https://docsify.js.org/#/zh-cn/quickstart" target="_blank" rel="noopener">https://docsify.js.org/#/zh-cn/quickstart</a></p><h3 id="下面介绍docsify如何部署到Github-使用免费的站点"><a href="#下面介绍docsify如何部署到Github-使用免费的站点" class="headerlink" title="下面介绍docsify如何部署到Github  使用免费的站点"></a>下面介绍docsify如何部署到Github  使用免费的站点</h3><p>和 GitBook 生成的文档一样，我们可以直接把文档网站部署到 GitHub Pages 或者 VPS 上</p><h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>GitHub Pages 支持从三个地方读取文件</p><ul><li>docs/ 目录</li><li>master 分支</li><li>gh-pages 分支</li></ul><p>上传文件至Github仓库  官方推荐直接将文档放在 docs/ 目录下，在设置页面开启 GitHub Pages 功能并选择 master branch /docs folder 选项。<br><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de071452a5a?w=778&amp;h=519&amp;f=png&amp;s=64539" alt="在这里插入图片描述"></p><p>此时等待几秒钟 就可以访问了   我这里使用了自定义域名 </p><h3 id="Github如何配置自定义域名"><a href="#Github如何配置自定义域名" class="headerlink" title="Github如何配置自定义域名"></a>Github如何配置自定义域名</h3><p>在根目录下创建CNAME文件  并配置你的阿里云或其它网站购买的域名<br><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de07178e371?w=628&amp;h=309&amp;f=png&amp;s=33631" alt="在这里插入图片描述"></p><p>设置页面 Custom domain 更改域名<br><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de096c243bc?w=746&amp;h=460&amp;f=png&amp;s=61973" alt="在这里插入图片描述"></p><p>进入域名平台 进行解析  添加继续记录 ；类型为CNAME<br><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de098ed1780?w=644&amp;h=463&amp;f=png&amp;s=32769" alt="在这里插入图片描述"></p><p>解析后 等待十分钟既可开启了</p><p>官方文档  <a href="https://docsify.js.org/#/zh-cn/quickstart" target="_blank" rel="noopener">https://docsify.js.org/#/zh-cn/quickstart</a></p><p>预览链接：<a href="https://a870439570.github.io/interview-docs" target="_blank" rel="noopener">https://a870439570.github.io/interview-docs</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docsify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot实现的Mongodb管理工具</title>
      <link href="/2018/11/21/spring-xi-lie/springboot-shi-xian-de-mongodb-guan-li-gong-ju/"/>
      <url>/2018/11/21/spring-xi-lie/springboot-shi-xian-de-mongodb-guan-li-gong-ju/</url>
      
        <content type="html"><![CDATA[<p>源码：<a href="https://github.com/a870439570/Mongodb-WeAdmin" target="_blank" rel="noopener">https://github.com/a870439570/Mongodb-WeAdmin</a></p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><ul><li>Mongodb网页管理工具,基于Spring Boot2.0，前端采用layerUI实现。</li><li>源于线上环境部署mongodb时屏蔽了外网访问mongodb,所以使用不了mongochef这样方便的远程连接工具，便Mongodb提供的java api实现的的网页版管理</li><li>未设置登录权限相关模块，低耦合性 方便嵌入到现有的项目<h2 id="部署文档"><a href="#部署文档" class="headerlink" title="部署文档"></a>部署文档</h2></li><li><a href="https://a870439570.github.io/work-doc/mongdb" target="_blank" rel="noopener">https://a870439570.github.io/work-doc/mongdb</a></li></ul><h1 id="效果图如下"><a href="#效果图如下" class="headerlink" title="效果图如下"></a>效果图如下</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><img src="https://user-gold-cdn.xitu.io/2019/1/9/168304a51e26dccc?w=1034&amp;h=533&amp;f=png&amp;s=205775" alt=""></p><h2 id="显示所有的数据源"><a href="#显示所有的数据源" class="headerlink" title="显示所有的数据源"></a>显示所有的数据源</h2><p><img src="https://user-gold-cdn.xitu.io/2019/1/9/168304a51dfea7d8?w=1918&amp;h=871&amp;f=png&amp;s=130673" alt=""></p><h2 id="显示指定数据源下的表"><a href="#显示指定数据源下的表" class="headerlink" title="显示指定数据源下的表"></a>显示指定数据源下的表</h2><p><img src="https://user-gold-cdn.xitu.io/2019/1/9/168304a51ddca95e?w=1337&amp;h=782&amp;f=png&amp;s=84793" alt=""></p><h2 id="查询指定表的数据"><a href="#查询指定表的数据" class="headerlink" title="查询指定表的数据"></a>查询指定表的数据</h2><p><img src="https://user-gold-cdn.xitu.io/2019/1/9/168304a51e1fad10?w=1707&amp;h=835&amp;f=png&amp;s=63766" alt=""></p><h2 id="多任务监控管理"><a href="#多任务监控管理" class="headerlink" title="多任务监控管理"></a>多任务监控管理</h2><p><img src="https://user-gold-cdn.xitu.io/2019/1/9/168304a51de098d9?w=1920&amp;h=779&amp;f=png&amp;s=101757" alt=""><br><img src="https://user-gold-cdn.xitu.io/2019/1/9/168304a51dcc70c7?w=1682&amp;h=627&amp;f=png&amp;s=46961" alt=""></p><p><a href="https://jq.qq.com/?_wv=1027&amp;k=5PIRvFq" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/QQ%E7%BE%A4-924715723-yellowgreen.svg" alt="QQ群"></a><br><a href="https://gitee.com/qinxuewu" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Gitee-%E7%A0%81%E4%BA%91-yellow.svg" alt="码云"></a><br><a href="https://github.com/a870439570" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Github-Github-red.svg" alt="Github"></a></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud服务链路追踪</title>
      <link href="/2018/10/27/spring-xi-lie/springcloud-fu-wu-lian-lu-zhui-zong/"/>
      <url>/2018/10/27/spring-xi-lie/springcloud-fu-wu-lian-lu-zhui-zong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/a870439570/boot-cloud" target="_blank" rel="noopener">SpringCloud 教程Finchley版本</a></p><h3 id="服务链路追踪-Spring-Cloud-Sleuth-Finchley版本"><a href="#服务链路追踪-Spring-Cloud-Sleuth-Finchley版本" class="headerlink" title="服务链路追踪(Spring Cloud Sleuth)(Finchley版本)"></a>服务链路追踪(Spring Cloud Sleuth)(Finchley版本)</h3><p>在spring Cloud为F版本的时候，已经不需要自己构建Zipkin Server了，只需要下载jar即可，下载地址：<br><a href="https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/" target="_blank" rel="noopener">https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/</a></p><pre><code>java -jar zipkin-server-2.10.1-exec.jar访问 localhost:9411</code></pre><p> <strong>构建工程</strong> </p><ul><li><p>基本知识讲解完毕，下面我们来实战，本文的案例主要有三个工程组成:一个server-zipkin,它的主要作用使用ZipkinServer 的功能，收集调用数据，并展示；一个service-hi,对外暴露hi接口；一个service-miya,对外暴露miya接口；这两个service可以相互调用；并且只有调用了，server-zipkin才会收集数据的，这就是为什么叫服务追踪了。</p><p><strong>创建service-hi</strong> </p></li></ul><p>application.properties配制文件</p><pre><code>server.port=8988spring.zipkin.base-url=http://localhost:9411spring.application.name=service-hi</code></pre><p>启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceHiApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ServiceHiApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOG <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ServiceHiApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hi"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">callHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token string">"calling trace service-hi  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8989/miya"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token string">"calling trace service-hi "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"i'm service-hi"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Sampler <span class="token function">defaultSampler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Sampler<span class="token punctuation">.</span>ALWAYS_SAMPLE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>  <strong>创建service-miya</strong> </p><p> 创建过程痛service-hi，引入相同的依赖，配置下spring.zipkin.base-url。<br>application.properties配制文件</p><pre><code>server.port=8989spring.zipkin.base-url=http://localhost:9411spring.application.name=service-miya</code></pre><p>启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceMiyaApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ServiceMiyaApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOG <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ServiceMiyaApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hi"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token string">"hi is being called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hi i'm miya!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/miya"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token string">"info is being called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8988/info"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Sampler <span class="token function">defaultSampler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Sampler<span class="token punctuation">.</span>ALWAYS_SAMPLE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>pom.xml</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span> xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>         xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>modelVersion<span class="token operator">></span><span class="token number">4.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>modelVersion<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>pflm<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>service<span class="token operator">-</span>miya<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span>packaging<span class="token operator">></span>jar<span class="token operator">&lt;</span><span class="token operator">/</span>packaging<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>service<span class="token operator">-</span>miya<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>description<span class="token operator">></span>服务链路追踪演示<span class="token operator">&lt;</span><span class="token operator">/</span>description<span class="token operator">></span>    <span class="token operator">&lt;</span>parent<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>relativePath<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> lookup parent from repository <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span>    <span class="token operator">&lt;</span>properties<span class="token operator">></span>        <span class="token operator">&lt;</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span>        <span class="token operator">&lt;</span>project<span class="token punctuation">.</span>reporting<span class="token punctuation">.</span>outputEncoding<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token punctuation">.</span>reporting<span class="token punctuation">.</span>outputEncoding<span class="token operator">></span>        <span class="token operator">&lt;</span>java<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>java<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>spring<span class="token operator">-</span>cloud<span class="token punctuation">.</span>version<span class="token operator">></span>Finchley<span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>spring<span class="token operator">-</span>cloud<span class="token punctuation">.</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>zipkin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span>dependencyManagement<span class="token operator">></span>        <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token operator">-</span>cloud<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>                <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>                <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencyManagement<span class="token operator">></span>    <span class="token operator">&lt;</span>build<span class="token operator">></span>        <span class="token operator">&lt;</span>plugins<span class="token operator">></span>            <span class="token operator">&lt;</span>plugin<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>build<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token operator">></span></code></pre><ul><li>依次启动上面的工程，打开浏览器访问：<a href="http://localhost:9411/，会出现以下界面：" target="_blank" rel="noopener">http://localhost:9411/，会出现以下界面：</a></li><li>访问：<a href="http://localhost:8989/miya，浏览器出现：" target="_blank" rel="noopener">http://localhost:8989/miya，浏览器出现：</a> i’m service-hi</li><li>再打开<a href="http://localhost:9411/的界面，点击Dependencies,可以发现服务的依赖关系：" target="_blank" rel="noopener">http://localhost:9411/的界面，点击Dependencies,可以发现服务的依赖关系：</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zipkin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud集成Consul注册中心</title>
      <link href="/2018/10/26/spring-xi-lie/springcloud-ji-cheng-consul-zhu-ce-zhong-xin/"/>
      <url>/2018/10/26/spring-xi-lie/springcloud-ji-cheng-consul-zhu-ce-zhong-xin/</url>
      
        <content type="html"><![CDATA[<p> <strong>Spring Cloud 支持很多服务发现的软件，Eureka 只是其中之一，下面是 Spring Cloud 支持的服务发现软件以及特性对比：</strong><br><img src="https://user-gold-cdn.xitu.io/2019/1/17/168597b59609d307?w=780&amp;h=441&amp;f=jpeg&amp;s=70496" alt="输入图片说明"></p><h3 id="Consul-介绍"><a href="#Consul-介绍" class="headerlink" title="Consul 介绍"></a>Consul 介绍</h3><ul><li>Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案，Consul 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其他工具（比如 ZooKeeper 等）。使用起来也较 为简单。Consul 使用 Go 语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与 Docker 等轻量级容器可无缝配合。</li></ul><h3 id="Consul-的优势："><a href="#Consul-的优势：" class="headerlink" title="Consul 的优势："></a>Consul 的优势：</h3><ul><li>使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接. 相比较而言, zookeeper 采用的是 Paxos, 而 etcd 使用的则是 Raft。</li><li>支持多数据中心，内外网的服务采用不同的端口进行监听。 多数据中心集群可以避免单数据中心的单点故障,而其部署则需要考虑网络延迟, 分片等情况等。 zookeeper 和 etcd 均不提供多数据中心功能的支持。</li><li>支持健康检查。 etcd 不提供此功能。</li><li>支持 http 和 dns 协议接口。 zookeeper 的集成较为复杂, etcd 只支持 http 协议。</li><li>官方提供 web 管理界面, etcd 无此功能。</li><li>综合比较, Consul 作为服务注册和配置管理的新星, 比较值得关注和研究。</li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>服务发现</li><li>健康检查</li><li>Key/Value 存储</li><li>多数据中心</li></ul><h3 id="Consul-角色"><a href="#Consul-角色" class="headerlink" title="Consul 角色"></a>Consul 角色</h3><ul><li>client: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群。</li><li>server: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其他数据中心通讯。 每个数据中心的 server 数量推荐为 3 个或是 5 个。</li></ul><h3 id="Consul-安装"><a href="#Consul-安装" class="headerlink" title="Consul 安装"></a>Consul 安装</h3><p>Consul 不同于 Eureka 需要单独安装，访问Consul 官网下载 Consul 的最新版本，</p><p>我这里以 Windows 为例，下载下来是一个 consul_1.2.1_windows_amd64.zip 的压缩包，解压是是一个 consul.exe 的执行文件。<br><img src="https://user-gold-cdn.xitu.io/2019/1/17/168597b598e0dc0a?w=493&amp;h=190&amp;f=png&amp;s=10743" alt="输入图片说明" title="64517552831A48A88E3B1906BC501705.png"></p><p>cd 到对应的目录下，使用 cmd 启动 Consul</p><pre><code>cd D:\Common Files\consul#cmd启动：consul agent -dev        # -dev表示开发模式运行，另外还有-server表示服务模式运行</code></pre><p>为了方便期间，可以在同级目录下创建一个 run.bat 脚本来启动，脚本内容如下</p><pre><code>consul agent -dev</code></pre><p>启动结果如下：<br><img src="https://user-gold-cdn.xitu.io/2019/1/17/168597b598c738c8?w=876&amp;h=300&amp;f=png&amp;s=8073" alt="输入图片说明" title="F2A8ABD028D8428D875EE8806BDA0CF7.png"></p><p>启动成功之后访问：<a href="http://localhost:8500，可以看到" target="_blank" rel="noopener">http://localhost:8500，可以看到</a> Consul 的管理界面<br><img src="https://user-gold-cdn.xitu.io/2019/1/17/168597b59ae74863?w=1080&amp;h=512&amp;f=png&amp;s=33086" alt="输入图片说明" title="F74DE8E446464BC1A3AE58534A7AB8D8.png"></p><p>这样就意味着我们的 Consul 服务启动成功了。</p><h3 id="Linux环境安装"><a href="#Linux环境安装" class="headerlink" title="Linux环境安装"></a>Linux环境安装</h3><p>把下载的linux下的安装包consul拷贝到linux环境里面，使用unzip进行解压：</p><p> <strong>2，配置环境变量</strong> </p><pre><code>vi /etc/profileexport JAVA_HOME=/usr/local/jdk1.8.0_172export MAVEN_HOME=/usr/local/apache-maven-3.5.4export CONSUL_HOME=/usr/local/consulexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$CONSUL_HOME:$PATH#上面的CONSUL_HOME就是consul的路径，上面的配置仅供参考。source /etc/profile #命令使配置生效#查看安装的consul版本[root@CentOS124 /]# consul -vConsul v1.2.2Protocol 2 spoken by default, understands 2 to 3 (agent will automatically use protocol &gt;2 when speaking to compatible agents)[root@CentOS124 /]# </code></pre><h3 id="Consul-服务端"><a href="#Consul-服务端" class="headerlink" title="Consul 服务端"></a>Consul 服务端</h3><p>创建一个 spring-cloud-consul-producer 项目 依赖包如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring-boot-starter-actuator<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.springframework.cloud<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring-cloud-starter-consul-discovery<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring-boot-starter-web<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring-boot-starter-test<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span>/scope<span class="token operator">></span>    <span class="token operator">&lt;</span>/dependency<span class="token operator">></span><span class="token operator">&lt;</span>/dependencies<span class="token operator">></span></code></pre><ul><li>spring-boot-starter-actuator 健康检查依赖于此包。</li><li><p>spring-cloud-starter-consul-discovery Spring Cloud Consul 的支持。</p><p><strong>配置文件内容如下</strong> </p></li></ul><pre><code>spring.application.name=spring-cloud-consul-producerserver.port=8501spring.cloud.consul.host=localhostspring.cloud.consul.port=8500#注册到consul的服务名称spring.cloud.consul.discovery.serviceName=service-producer</code></pre><ul><li>Consul 的地址和端口号默认是 localhost:8500 ，如果不是这个地址可以自行配置。</li><li><p>spring.cloud.consul.discovery.serviceName 是指注册到 Consul 的服务名称，后期客户端会根据这个名称来进行服务调用。</p><p><strong>启动类</strong> </p></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsulProducerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsulProducerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>添加了 @EnableDiscoveryClient 注解表示支持服务发现。</p><p> <strong>创建一个 Controller，推文提供 hello 的服务</strong> </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"helle consul"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>为了模拟注册均衡负载复制一份上面的项目重命名为 spring-cloud-consul-producer-2 ,修改对应的端口为 8502，修改 hello 方法的返回值为：”helle consul two”，修改完成后依次启动两个项目。</p><p>这时候我们再次在浏览器访问地址：<a href="http://localhost:8500" target="_blank" rel="noopener">http://localhost:8500</a> 就会显示出来两个服务提供者</p><h3 id="Consul-消费端"><a href="#Consul-消费端" class="headerlink" title="Consul 消费端"></a>Consul 消费端</h3><p>创建一个 spring-cloud-consul-consumer 项目，pom 文件和上面示例保持一致</p><p><strong>配置文件内容如下</strong> </p><pre class=" language-bash"><code class="language-bash">spring.application.name<span class="token operator">=</span>spring-cloud-consul-consumerserver.port<span class="token operator">=</span>8503spring.cloud.consul.host<span class="token operator">=</span>127.0.0.1spring.cloud.consul.port<span class="token operator">=</span>8500<span class="token comment" spellcheck="true">#设置不需要注册到 consul 中</span>spring.cloud.consul.discovery.register<span class="token operator">=</span>false</code></pre><p>客户端可以设置注册到 Consul 中，也可以不注册到 Consul 注册中心中，根据我们的业务来选择，只需要在使用服务时通过 Consul 对外提供的接口获取服务信息即可。</p><p> <strong>启动类</strong> </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsulConsumerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsulConsumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> <strong>进行测试</strong> </p><p>创建一个 ServiceController ,试试如果去获取 Consul 中的服务</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoadBalancerClient loadBalancer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DiscoveryClient discoveryClient<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取所有服务</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/services"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">services</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"service-producer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//从所有服务中选择一个服务（轮询）</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/discover"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">discover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> loadBalancer<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">"service-producer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Controller 中有俩个方法，一个是获取所有服务名为service-producer的服务信息并返回到页面，一个是随机从服务名为service-producer的服务中获取一个并返回到页面。</p><p>添加完 ServiceController 之后我们启动项目，访问地址：<a href="http://localhost:8503/services，返回jsn数据" target="_blank" rel="noopener">http://localhost:8503/services，返回jsn数据</a> </p><pre><code>[{&quot;serviceId&quot;:&quot;service-producer&quot;,&quot;host&quot;:&quot;windows10.microdone.cn&quot;,&quot;port&quot;:8501,&quot;secure&quot;:false,&quot;metadata&quot;:{&quot;secure&quot;:&quot;false&quot;},&quot;uri&quot;:&quot;http://windows10.microdone.cn:8501&quot;,&quot;scheme&quot;:null},{&quot;serviceId&quot;:&quot;service-producer&quot;,&quot;host&quot;:&quot;windows10.microdone.cn&quot;,&quot;port&quot;:8502,&quot;secure&quot;:false,&quot;metadata&quot;:{&quot;secure&quot;:&quot;false&quot;},&quot;uri&quot;:&quot;http://windows10.microdone.cn:8502&quot;,&quot;scheme&quot;:null}]</code></pre><p>发现我们刚才创建的端口为 8501 和 8502 的两个服务端都存在</p><p>多次访问地址：<a href="http://localhost:8503/discover，页面会交替返回信息：" target="_blank" rel="noopener">http://localhost:8503/discover，页面会交替返回信息：</a></p><p>说明 8501 和 8501 的两个服务会交替出现，从而实现了获取服务端地址的均衡负载。</p><p>大多数情况下我们希望使用均衡负载的形式去获取服务端提供的服务，因此使用第二种方法来模拟调用服务端提供的 hello 方法。</p><p> <strong>创建 CallHelloController ：</strong> </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallHelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoadBalancerClient loadBalancer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/call"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServiceInstance serviceInstance <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">"service-producer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务地址："</span> <span class="token operator">+</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务名称："</span> <span class="token operator">+</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getServiceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String callServiceResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>serviceInstance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/hello"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>callServiceResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> callServiceResult<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用 RestTemplate 进行远程调用。添加完之后重启 spring-cloud-consul-consumer 项目。在浏览器中访问地址：<a href="http://localhost:8503/call，依次返回结果如下：" target="_blank" rel="noopener">http://localhost:8503/call，依次返回结果如下：</a></p><pre><code>helle consulhelle consul two</code></pre><p>说明我们已经成功的调用了 Consul 服务端提供的服务，并且实现了服务端的均衡负载功能</p><p>示例代码:<a href="https://github.com/ityouknow/spring-cloud-examples" target="_blank" rel="noopener">https://github.com/ityouknow/spring-cloud-examples</a></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eureka注册中心增加访问权限</title>
      <link href="/2018/10/26/spring-xi-lie/eureka-zhu-ce-zhong-xin-zeng-jia-fang-wen-quan-xian/"/>
      <url>/2018/10/26/spring-xi-lie/eureka-zhu-ce-zhong-xin-zeng-jia-fang-wen-quan-xian/</url>
      
        <content type="html"><![CDATA[<p>eureka注册中心增加访问权限（Springboot2.0版本解决方案）</p><ul><li>SpringCloud组件它主要提供的模块包括：服务发现（Eureka），断路器（Hystrix），智能路有（Zuul），客户端负载均衡（Ribbon），Archaius，Turbine等</li><li>Eureka作用相当于zookeeper,用于微服务项目中的服务注册及发现，在采用springBoot+springCloud开发微服务时，通过一些简单的配置就能够达到基本的目的</li></ul><h3 id="eureka注册中心访问权限"><a href="#eureka注册中心访问权限" class="headerlink" title="eureka注册中心访问权限"></a>eureka注册中心访问权限</h3><p>在注册中心服务pom.xml添加依赖</p><pre><code> &lt;!-- 添加注册中心权限依赖  --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;        &lt;/dependency&gt;</code></pre><p>在注册中心服务application.properties文件（注意），内容如下</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#新版本开启权限</span><span class="token comment" spellcheck="true">#注册中心配置</span>spring.application.name<span class="token operator">=</span>szq-serverserver.port<span class="token operator">=</span>8761eureka.instance.hostname<span class="token operator">=</span>localhosteureka.client.registerWithEureka<span class="token operator">=</span>falseeureka.client.fetch-registry<span class="token operator">=</span>falseeureka.client.serviceUrl.defaultZone<span class="token operator">=</span>http://admin:123456@<span class="token variable">${eureka.instance.hostname}</span><span class="token keyword">:</span><span class="token variable">${server.port}</span>/eureka/<span class="token comment" spellcheck="true">#新版本开启权限</span>spring.security.user.name<span class="token operator">=</span>adminspring.security.user.password<span class="token operator">=</span>123456</code></pre><p>启动注册中心服务项目，浏览器输入<a href="http://localhost:8761/出现eureka控制台页面并要求输入用户名和密码框即为成功" target="_blank" rel="noopener">http://localhost:8761/出现eureka控制台页面并要求输入用户名和密码框即为成功</a></p><p><img src="https://images.gitee.com/uploads/images/2018/0724/140715_4f6f683e_1478371.png" alt="输入图片说明" title="微信图片_20180724140701.png"></p><h3 id="eureka开启验证后服务无法连接注册中心解决方案"><a href="#eureka开启验证后服务无法连接注册中心解决方案" class="headerlink" title="eureka开启验证后服务无法连接注册中心解决方案"></a>eureka开启验证后服务无法连接注册中心解决方案</h3><p>运行错误提示</p><pre><code>com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server</code></pre><p>Spring Cloud 2.0 以上的security默认启用了csrf检验，要在eurekaServer端配置security的csrf检验为false</p><pre><code>服务注册中心注册时加上账号密码eureka.client.serviceUrl.defaultZone=http://admin:123456@localhost:8761/eureka/ </code></pre><ul><li>添加一个继承 WebSecurityConfigurerAdapter 的类</li><li>在类上添加 @EnableWebSecurity 注解；</li><li>覆盖父类的 configure(HttpSecurity http) 方法，关闭掉 csrf<br><code>`</code> java<br>package com.pflm;<br>import org.springframework.security.config.annotation.web.builders.HttpSecurity;<br>import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br>import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</li></ul><p>/**</p><ul><li>eureka开启验证后无法连接注册中心?</li><li>spring Cloud 2.0 以上）的security默认启用了csrf检验，要在eurekaServer端配置security的csrf检验为false</li><li>@author qxw</li><li>@data 2018年7月24日下午1:58:31<br>*/<br>@EnableWebSecurity<br>public class WebSecurityConfig extends WebSecurityConfigurerAdapter{<br>  @Override<pre><code> protected void configure(HttpSecurity http) throws Exception {     http.csrf().disable();     super.configure(http); }</code></pre>}</li></ul><p><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot Admin2.1应用监控</title>
      <link href="/2018/10/26/spring-xi-lie/springbootadmin/"/>
      <url>/2018/10/26/spring-xi-lie/springbootadmin/</url>
      
        <content type="html"><![CDATA[<ul><li>Spring Boot Admin 是一个管理和监控Spring Boot 应用程序的开源软件。每个应用都认为是一个客户端，通过HTTP或者使用 Eureka注册到admin server中进行展示，Spring Boot Admin UI部分使用AngularJs将数据展示在前端。</li><li>Spring Boot Admin 是一个针对spring-boot的actuator接口进行UI美化封装的监控工具。他可以：在列表中浏览所有被监控spring-boot项目的基本信息，详细的Health信息、内存信息、JVM信息、垃圾回收信息、各种配置信息（比如数据源、缓存列表和命中率）等，还可以直接修改logger的level。</li></ul><h3 id="设置Spring-Boot-Admin-Server"><a href="#设置Spring-Boot-Admin-Server" class="headerlink" title="设置Spring Boot Admin Server"></a>设置Spring Boot Admin Server</h3><ul><li>新建一个springBoot2.x工程，将Spring Boot Admin Server启动器添加到pom.xml</li><li>使用ide新建工程可以直接选择引入Spring Boot Admin</li></ul><pre class=" language-bash"><code class="language-bash">  <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>de.codecentric<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring-boot-admin-starter-server<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring-boot-starter-test<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span>/scope<span class="token operator">></span>        <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring-boot-starter-web<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>de.codecentric<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring-boot-admin-server-ui<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>   <span class="token operator">&lt;</span>/dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring-boot-starter-security<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>   <span class="token operator">&lt;</span>/dependency<span class="token operator">></span></code></pre><h3 id="启动类添加如下注解"><a href="#启动类添加如下注解" class="headerlink" title="启动类添加如下注解"></a>启动类添加如下注解</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableAdminServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootAdminApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootAdminApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="添加身份验证和授权"><a href="#添加身份验证和授权" class="headerlink" title="添加身份验证和授权"></a>添加身份验证和授权</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecuritySecureConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String adminContextPath<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SecuritySecureConfig</span><span class="token punctuation">(</span>AdminServerProperties adminServerProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adminContextPath <span class="token operator">=</span> adminServerProperties<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// @formatter:off</span>        SavedRequestAwareAuthenticationSuccessHandler successHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SavedRequestAwareAuthenticationSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        successHandler<span class="token punctuation">.</span><span class="token function">setTargetUrlParameter</span><span class="token punctuation">(</span><span class="token string">"redirectTo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        successHandler<span class="token punctuation">.</span><span class="token function">setDefaultTargetUrl</span><span class="token punctuation">(</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//授予对所有静态资产和登录页面的公共访问权限。</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/assets/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//必须对每个其他请求进行身份验证</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//    配置登录和注销。</span>                <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">successHandler</span><span class="token punctuation">(</span>successHandler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/logout"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//启用HTTP-Basic支持。这是Spring Boot Admin Client注册所必需的</span>                <span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//使用Cookie启用CSRF保护</span>                <span class="token punctuation">.</span><span class="token function">csrfTokenRepository</span><span class="token punctuation">(</span>CookieCsrfTokenRepository<span class="token punctuation">.</span><span class="token function">withHttpOnlyFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ignoringAntMatchers</span><span class="token punctuation">(</span>                        adminContextPath <span class="token operator">+</span> <span class="token string">"/instances"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//禁用CRSF-Protection Spring Boot Admin Client用于注册的端点。</span>                        adminContextPath <span class="token operator">+</span> <span class="token string">"/actuator/**"</span> <span class="token comment" spellcheck="true">//</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// @formatter:on</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="application-properties配置文件"><a href="#application-properties配置文件" class="headerlink" title="application.properties配置文件"></a>application.properties配置文件</h3><pre class=" language-bash"><code class="language-bash">server.port<span class="token operator">=</span>8088server.tomcat.uri-encoding<span class="token operator">=</span>UTF-8server.tomcat.max-threads<span class="token operator">=</span>1000server.tomcat.min-spare-threads<span class="token operator">=</span>30<span class="token comment" spellcheck="true">#账户密码</span>spring.security.user.name<span class="token operator">=</span>gzpflmspring.security.user.password<span class="token operator">=</span>gzpflm<span class="token comment" spellcheck="true">#项目访问名</span>spring.boot.admin.context-path<span class="token operator">=</span>/szq-monitoring<span class="token comment" spellcheck="true">#UI界面标题</span>spring.boot.admin.ui.title<span class="token operator">=</span>szq-Monitpring</code></pre><p>启动运行：<a href="http://localhost:8088/szq-monitoring/login" target="_blank" rel="noopener">http://localhost:8088/szq-monitoring/login</a> 出现登录界面表示成功<br><img src="https://user-gold-cdn.xitu.io/2019/1/25/1688378e770b7afe?w=1091&amp;h=735&amp;f=png&amp;s=45284" alt="输入图片说明" title="屏幕截图.png"></p><h3 id="Spring-Boot客户端配置监控"><a href="#Spring-Boot客户端配置监控" class="headerlink" title="Spring Boot客户端配置监控"></a>Spring Boot客户端配置监控</h3><ul><li>客户端需要配置账户密码 不然无法注册到springBoot Admin</li><li>每个要注册的应用程序都必须包含Spring Boot Admin Client 配置如下<pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>dependency<span class="token operator">></span>          <span class="token operator">&lt;</span>groupId<span class="token operator">></span>de<span class="token punctuation">.</span>codecentric<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>          <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>admin<span class="token operator">-</span>starter<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><strong>application.properties配置文件</strong> </li></ul><pre class=" language-bash"><code class="language-bash">server.port<span class="token operator">=</span>8081spring.application.name<span class="token operator">=</span>Spring Boot Clientspring.boot.admin.client.url<span class="token operator">=</span>http://localhost:8088/szq-monitoringmanagement.endpoints.web.exposure.include<span class="token operator">=</span>*spring.boot.admin.client.username<span class="token operator">=</span>gzpflmspring.boot.admin.client.password<span class="token operator">=</span>gzpflmspring.boot.admin.client.enabled<span class="token operator">=</span>true<span class="token comment" spellcheck="true">#启用ip显示</span>spring.boot.admin.client.instance.prefer-ip<span class="token operator">=</span>true</code></pre><p>启动后：监控的服务端就会收到通知 刷新页面就可以看到监控的服务<br><img src="https://user-gold-cdn.xitu.io/2019/1/25/1688378e77f3f8f1?w=1513&amp;h=802&amp;f=png&amp;s=66492" alt="输入图片说明"></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/25/1688378e779b1b6c?w=1670&amp;h=867&amp;f=png&amp;s=89632" alt="输入图片说明"></p><p>项目地址：<a href="https://gitee.com/qinxuewu/SpringBoot--Admin-demo" target="_blank" rel="noopener">https://gitee.com/qinxuewu/SpringBoot--Admin-demo</a></p><h3 id="Spring-Boot-Admin-Client配置选项"><a href="#Spring-Boot-Admin-Client配置选项" class="headerlink" title="Spring Boot Admin Client配置选项"></a>Spring Boot Admin Client配置选项</h3><pre class=" language-bash"><code class="language-bash">spring.boot.admin.client.enabled    <span class="token comment" spellcheck="true">#启用S​​pring Boot Admin Client,默认值true</span>spring.boot.admin.client.url  <span class="token comment" spellcheck="true">#逗号分隔Spring Boot Admin服务器的有序URL列表以进行注册</span>spring.boot.admin.client.api-path <span class="token comment" spellcheck="true">#管理服务器上的注册端点的Http路径 默认值"instances"</span><span class="token comment" spellcheck="true">#SBA Server api受HTTP基本身份验证保护时的用户名和密码。</span>spring.boot.admin.client.username spring.boot.admin.client.passwordspring.boot.admin.client.period <span class="token comment" spellcheck="true">#重复注册的间隔（以ms为单位）默认自10,000</span>spring.boot.admin.client.connect-timeout  <span class="token comment" spellcheck="true">#连接超时进行注册（以ms为单位 #默认5,000</span></code></pre><h3 id="官方配置"><a href="#官方配置" class="headerlink" title="官方配置"></a>官方配置</h3><p><a href="http://codecentric.github.io/spring-boot-admin/current/#register-clients-via-spring-boot-admin" target="_blank" rel="noopener">http://codecentric.github.io/spring-boot-admin/current/#register-clients-via-spring-boot-admin</a></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springbootAdmin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty入门(二)TCP粘包与拆包问题处理</title>
      <link href="/2018/10/12/netty/netty-ru-men-er-tcp-nian-bao-yu-chai-bao-wen-ti-chu-li/"/>
      <url>/2018/10/12/netty/netty-ru-men-er-tcp-nian-bao-yu-chai-bao-wen-ti-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP粘包与拆包是什么？"><a href="#TCP粘包与拆包是什么？" class="headerlink" title="TCP粘包与拆包是什么？"></a>TCP粘包与拆包是什么？</h2><p>上一章的demo中客户端发送了三条数据<br><img src="https://img-blog.csdn.net/20181011135210357?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br>服务端收到确是合并在一起的一条数据<br><img src="https://img-blog.csdn.net/20181011135352522?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><p>这就是是TCP粘包</p><p>TCP是一个”流”协议，就像河流中的溪流一样，没有严格的分界线。<br>当我们客户端向服务端发送数据时（比如以下发送了三条数据A,B,C），原本的想法就是三条数据单独发送，服务端接收时也是接收到三条单独的数据，但是ABC会变成一条数据发送到服务端，这就是粘包<br>所谓拆包: 如果发送数据的时候，你把A、B,B拆成了几份发，就是拆包了。当然数据不是你主动拆的，是TCP流自动拆的</p><h2 id="TCP粘包与拆包产生原因"><a href="#TCP粘包与拆包产生原因" class="headerlink" title="TCP粘包与拆包产生原因"></a>TCP粘包与拆包产生原因</h2><ol><li>要发送的数据大于TCP发送缓冲区剩余空间大小，将会发生拆包。</li><li>待发送数据大于MSS（最大报文长度），TCP在传输前将进行拆包。</li><li>要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去，将会发生粘包。</li><li>接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。</li></ol><h2 id="粘包、拆包三种解决方案"><a href="#粘包、拆包三种解决方案" class="headerlink" title="粘包、拆包三种解决方案"></a>粘包、拆包三种解决方案</h2><ul><li>发送数据时在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开（DelimiterBasedFrameDecoder自定义分隔符）</li><li>发送端将每个数据包封装为固定长度（FixedLengthFrameDecoder）</li><li>使用带消息头的协议，消息头存储消息开始标识及消息长度信息，服务端获取消息头的时候解析出消息长度，然后向后读取该长度的内容。（自定义协议）</li></ul><h2 id="自定义分隔符方案"><a href="#自定义分隔符方案" class="headerlink" title="自定义分隔符方案"></a>自定义分隔符方案</h2><pre><code>public class Client {    //消息响应处理    public static  class ClientHander extends ChannelHandlerAdapter{        @Override        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {            try {                String response = (String)msg;                System.out.println(&quot;客户端收到消息: &quot; + response);            } finally {                // 抛弃收到的数据                ReferenceCountUtil.release(msg);            }        }        @Override        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {            ctx.close();        }    }    public static void main(String[] args) throws  Exception{        EventLoopGroup group=new NioEventLoopGroup();        Bootstrap b=new Bootstrap();        b.group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer&lt;SocketChannel&gt;() {            @Override            protected void initChannel(SocketChannel socketChannel) {                //消息响应处理                ByteBuf buf = Unpooled.copiedBuffer(&quot;$_&quot;.getBytes());                socketChannel.pipeline().addLast(new DelimiterBasedFrameDecoder(1024, buf));                socketChannel.pipeline().addLast(new StringDecoder());                socketChannel.pipeline().addLast(new ClientHander());            }        });        ChannelFuture cf = b.connect(&quot;127.0.0.1&quot;, 8888).sync();        //尾部加入分隔符        cf.channel().writeAndFlush(Unpooled.wrappedBuffer(&quot;bbbb$_&quot;.getBytes()));        cf.channel().writeAndFlush(Unpooled.wrappedBuffer(&quot;cccc$_&quot;.getBytes()));        //等待客户端端口关闭        cf.channel().closeFuture().sync();        group.shutdownGracefully();    }}</code></pre><p>服务端</p><pre><code>public class Server {    public static  class ServerHander extends ChannelHandlerAdapter{        @Override        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {            String request = (String)msg;            System.out.println(&quot;服务端收到的消息 :&quot; + msg);            String response = &quot;服务器响应：&quot; + msg + &quot;$_&quot;;            ctx.writeAndFlush(Unpooled.copiedBuffer(response.getBytes()));        }        @Override        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {            ctx.close();        }    }    public static void main(String[] args) throws Exception {        //1 创建2个线程，一个是负责接收客户端的连接。一个是负责进行数据传输的        EventLoopGroup pGroup = new NioEventLoopGroup();        EventLoopGroup cGroup = new NioEventLoopGroup();        //2 创建辅助工具类，用于服务器通道的一系列配置        ServerBootstrap b = new ServerBootstrap();        b.group(pGroup, cGroup)        //绑定俩个线程组                .channel(NioServerSocketChannel.class)        //指定NIO的模式                .option(ChannelOption.SO_BACKLOG, 1024)        //设置tcp缓冲区                .option(ChannelOption.SO_SNDBUF, 32*1024)    //设置发送缓冲大小                .option(ChannelOption.SO_RCVBUF, 32*1024)    //这是接收缓冲大小                .option(ChannelOption.SO_KEEPALIVE, true)    //保持连接                .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() {                    @Override                    protected void initChannel(SocketChannel sc) throws Exception {                        //设置特殊分隔符                        ByteBuf buf = Unpooled.copiedBuffer(&quot;$_&quot;.getBytes());                        sc.pipeline().addLast(new DelimiterBasedFrameDecoder(1024, buf));                        //设置字符串形式的解码                        sc.pipeline().addLast(new StringDecoder());                        sc.pipeline().addLast(new ServerHander());                    }                });        //4 进行绑定        ChannelFuture cf1 = b.bind(8888).sync();        //5 等待关闭        cf1.channel().closeFuture().sync();        pGroup.shutdownGracefully();        cGroup.shutdownGracefully();    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty入门(一)快速入门</title>
      <link href="/2018/10/11/netty/netty-ru-men-yi-kuai-su-ru-men/"/>
      <url>/2018/10/11/netty/netty-ru-men-yi-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="Netty介绍"><a href="#Netty介绍" class="headerlink" title="Netty介绍"></a>Netty介绍</h2><p>  Netty是一个NIO client-server(客户端服务器)框架，使用Netty可以快速开发网络应用，例如服务器和客户端协议。Netty提供了一种新的方式来使开发网络应用程序，这种新的方式使得它很容易使用和有很强的扩展性。Netty的内部实现时很复杂的，但是Netty提供了简单易用的api从网络处理代码中解耦业务逻辑。Netty是完全基于NIO实现的，所以整个Netty都是异步的。</p><h2 id="Netty框架的组成"><a href="#Netty框架的组成" class="headerlink" title="Netty框架的组成"></a>Netty框架的组成</h2><p>   <img src="https://img-blog.csdn.net/20181011131758867?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><h2 id="一个Netty程序的工作图如下"><a href="#一个Netty程序的工作图如下" class="headerlink" title="一个Netty程序的工作图如下"></a>一个Netty程序的工作图如下</h2><p><img src="https://img-blog.csdn.net/20181011131844464?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br>1.客户端连接到服务器<br>2.建立连接后，发送或接收数据<br>3.服务器处理所有的客户端连接 </p><h2 id="Netty为什么传输快"><a href="#Netty为什么传输快" class="headerlink" title="Netty为什么传输快"></a>Netty为什么传输快</h2><ul><li>Netty的传输快其实也是依赖了NIO的一个特性——零拷贝。我们知道，Java的内存有堆内存、栈内存和字符串常量池等等，其中堆内存是占用内存空间最大的一块，也是Java对象存放的地方，一般我们的数据如果需要从IO读取到堆内存，中间需要经过Socket缓冲区，也就是说一个数据会被拷贝两次才能到达他的的终点，如果数据量大，就会造成不必要的资源浪费。</li><li>Netty针对这种情况，使用了NIO中的另一大特性——零拷贝，当他需要接收数据的时候，他会在堆内存之外开辟一块内存，数据就直接从IO读到了那块内存中去，在netty里面通过ByteBuf可以直接对这些数据进行直接操作，从而加快了传输速度。</li></ul><h2 id="编写一个HelloWorld"><a href="#编写一个HelloWorld" class="headerlink" title="编写一个HelloWorld"></a>编写一个HelloWorld</h2><p>服务端</p><pre><code>public class Server {    public static void main(String[] args) throws Exception{        //1 创建2个线程，一个是负责接收客户端的连接。一个是负责进行数据传输的        EventLoopGroup pGroup = new NioEventLoopGroup();        EventLoopGroup cGroup = new NioEventLoopGroup();        //2 创建服务器辅助类        ServerBootstrap b = new ServerBootstrap();        b.group(pGroup, cGroup)         .channel(NioServerSocketChannel.class)         .option(ChannelOption.SO_BACKLOG, 1024)         .option(ChannelOption.SO_SNDBUF, 32*1024)         .option(ChannelOption.SO_RCVBUF, 32*1024)         .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() {            @Override            protected void initChannel(SocketChannel sc) throws Exception {                //设置特殊分隔符                ByteBuf buf = Unpooled.copiedBuffer(&quot;$_&quot;.getBytes());                sc.pipeline().addLast(new DelimiterBasedFrameDecoder(1024, buf));                //设置字符串形式的解码                sc.pipeline().addLast(new StringDecoder());                sc.pipeline().addLast(new ServerHandler());            }        });        //4 绑定连接        ChannelFuture cf = b.bind(8765).sync();        //等待服务器监听端口关闭        cf.channel().closeFuture().sync();        pGroup.shutdownGracefully();        cGroup.shutdownGracefully();    }}</code></pre><p>服务端消息处理类</p><pre><code>public class ServerHandler extends ChannelHandlerAdapter{    /**     * 通道刚被激活时会调用次方法     * @param ctx     * @throws Exception     */    @Override    public void channelActive(ChannelHandlerContext ctx) throws Exception {        System.out.println(&quot;server channel active... &quot;);    }    /**     * 读取消息方法     * @param ctx     * @param msg     * @throws Exception     */    @Override    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {        ByteBuf buf = (ByteBuf) msg;        byte[] req = new byte[buf.readableBytes()];        buf.readBytes(req);        String body = new String(req, &quot;utf-8&quot;);        System.out.println(&quot;Server :&quot; + body );        String response = &quot;进行返回给客户端的响应：&quot; + body ;        ctx.writeAndFlush(Unpooled.copiedBuffer(response.getBytes()));    }    /**     * 读取完毕后处理方法     * @param ctx     * @throws Exception     */    @Override    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {        System.out.println(&quot;读完了&quot;);        ctx.flush();    }    /***     * 这个方法会在发生异常时触发     */    @Override    public void exceptionCaught(ChannelHandlerContext ctx, Throwable t) throws Exception {        /**         * exceptionCaught() 事件处理方法是当出现 Throwable 对象才会被调用，即当 Netty 由于 IO         * 错误或者处理器在处理事件时抛出的异常时。在大部分情况下，捕获的异常应该被记录下来 并且把关联的 channel         * 给关闭掉。然而这个方法的处理方式会在遇到不同异常的情况下有不 同的实现，比如你可能想在关闭连接之前发送一个错误码的响应消息。         */        // 出现异常就关闭        t.printStackTrace();        ctx.close();    }}</code></pre><p>客户端</p><pre><code>public class Client {    public static void main(String[] args) {        EventLoopGroup group = new NioEventLoopGroup();        Bootstrap b = new Bootstrap();        b.group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer&lt;SocketChannel&gt;() {                    @Override                    protected void initChannel(SocketChannel sc) throws Exception {                        sc.pipeline().addLast(new ClientHandler()); //收到服务端发送过来的消息处理类                    }                });        ChannelFuture cf1 = null;        try {            cf1 = b.connect(&quot;127.0.0.1&quot;, 8765).sync();            //发送消息            cf1.channel().writeAndFlush(Unpooled.copiedBuffer(&quot;777&quot;.getBytes()));            cf1.channel().writeAndFlush(Unpooled.copiedBuffer(&quot;666&quot;.getBytes()));            cf1.channel().writeAndFlush(Unpooled.copiedBuffer(&quot;888&quot;.getBytes()));            //关闭通道            cf1.channel().closeFuture().sync();            group.shutdownGracefully();        } catch (InterruptedException e) {            e.printStackTrace();        }    }</code></pre><p>客户端消息处理类</p><pre><code>** * 服务端处理通道.这里只是打印一下请求的内容，并不对请求进行任何的响应 DiscardServerHandler 继承自 * ChannelHandlerAdapter， 这个类实现了ChannelHandler接口， ChannelHandler提供了许多事件处理的接口方法， * 然后你可以覆盖这些方法。 现在仅仅只需要继承ChannelHandlerAdapter类而不是你自己去实现接口方法。 * */public class ClientHandler extends ChannelHandlerAdapter {    /**     * 通道刚被激活时会调用次方法     * @param ctx     * @throws Exception     */    @Override    public void channelActive(ChannelHandlerContext ctx) throws Exception {        System.out.println(&quot;Client channel active... &quot;);    }    @Override    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {    }    @Override    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {        ctx.close();    }    /**这里我们覆盖了chanelRead()事件处理方法。 每当从客户端收到新的数据时， 这个方法会在收到消息时被调用，     * 读取消息处理方法     * @param ctx  通道处理的上下文信息     * @param msg  接收的消息     * @throws Exception     */    @Override    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {        try {            ByteBuf buf = (ByteBuf) msg;            byte[] req = new byte[buf.readableBytes()];            buf.readBytes(req);            String body = new String(req, &quot;utf-8&quot;);            String response = &quot;收到服务器端的返回信息：&quot; + body;            System.out.println(response);        } finally {            // 抛弃收到的数据            ReferenceCountUtil.release(msg);        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+hexo搭建个人静态博客</title>
      <link href="/2018/09/22/sui-bi/hello-world/"/>
      <url>/2018/09/22/sui-bi/hello-world/</url>
      
        <content type="html"><![CDATA[<ul><li>写博客的好处是我们用博客表达自己、升华自己。</li><li>平时学习新知识总是经常性会遗忘部分内容，使用过有道云，印象笔记，公众号，缺金社区，csdn,Github,码云等等记录了零零散散一些内容。所以准备使用hexo做一个归纳</li></ul><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>首选安装好node.js和npm</p><h4 id="安装-Heox"><a href="#安装-Heox" class="headerlink" title="安装 Heox"></a>安装 Heox</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><pre class=" language-bash"><code class="language-bash">$ hexo init<span class="token comment" spellcheck="true"># 会生成如下文件</span>├── .deploy <span class="token comment" spellcheck="true">#需要部署的文件</span>├── node_modules <span class="token comment" spellcheck="true">#Hexo插件</span>├── public <span class="token comment" spellcheck="true">#生成的静态网页文件</span>├── scaffolds <span class="token comment" spellcheck="true">#模板</span>├── <span class="token function">source</span> <span class="token comment" spellcheck="true">#博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</span><span class="token operator">|</span> ├── _drafts <span class="token comment" spellcheck="true">#草稿</span><span class="token operator">|</span> └── _posts <span class="token comment" spellcheck="true">#文章</span>├── themes <span class="token comment" spellcheck="true">#主题</span>├── _config.yml <span class="token comment" spellcheck="true">#全局配置文件</span>└── package.json</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="发表草稿。"><a href="#发表草稿。" class="headerlink" title="发表草稿。"></a>发表草稿。</h3><pre class=" language-bash"><code class="language-bash">$ hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span></code></pre><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy<span class="token comment" spellcheck="true">#打包并上传的github</span>$ hexo d -g</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="清除缓存文件"><a href="#清除缓存文件" class="headerlink" title="清除缓存文件"></a>清除缓存文件</h3><pre class=" language-bash"><code class="language-bash">$ hexo clean</code></pre><h3 id="列出网站资料"><a href="#列出网站资料" class="headerlink" title="列出网站资料"></a>列出网站资料</h3><pre class=" language-bash"><code class="language-bash">$ hexo list <span class="token operator">&lt;</span>type<span class="token operator">></span></code></pre><h3 id="显示-Hexo-版本"><a href="#显示-Hexo-版本" class="headerlink" title="显示 Hexo 版本"></a>显示 Hexo 版本</h3><pre class=" language-bash"><code class="language-bash">$ hexo version</code></pre><h3 id="hexo自定义页面"><a href="#hexo自定义页面" class="headerlink" title="hexo自定义页面"></a>hexo自定义页面</h3><pre class=" language-bash"><code class="language-bash">使用：hexo new page <span class="token string">"about"</span> 新建一个 关于我 页面。 使用： hexo new page tags 新建一个 标签 页面。 使用： hexo new page categories 新建一个 分类 页面。 使用： hexo new page <span class="token string">"guestbook"</span> 新建一个 自定义 页面。 </code></pre>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storm系列(六)storm和kafka集成</title>
      <link href="/2018/09/21/storm/storm-xi-lie-liu-storm-he-kafka-ji-cheng/"/>
      <url>/2018/09/21/storm/storm-xi-lie-liu-storm-he-kafka-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="使用kafka-client-jar进行Storm-Apache-Kafka集成"><a href="#使用kafka-client-jar进行Storm-Apache-Kafka集成" class="headerlink" title="使用kafka-client jar进行Storm Apache Kafka集成"></a>使用kafka-client jar进行Storm Apache Kafka集成</h2><p>这包括新的Apache Kafka消费者API。兼容性 Apache Kafka版本0.10起<br>引入jar包</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>storm<span class="token operator">-</span>kafka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h2 id="从kafka中订阅消息读取"><a href="#从kafka中订阅消息读取" class="headerlink" title="从kafka中订阅消息读取"></a>从kafka中订阅消息读取</h2><p>通过使用KafkaSpoutConfig类来配置spout实现。此类使用Builder模式，可以通过调用其中一个Builders构造函数或通过调用KafkaSpoutConfig类中的静态方法构建器来启动。</p><h2 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h2><p>创建一个简单的不kafka数据源<br>以下将使用发布到“topic”的所有事件，并将它们发送到MyBolt，其中包含“topic”，“partition”，“offset”，“key”，“value”字段。</p><pre class=" language-java"><code class="language-java">  TopologyBuilder tp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopologyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tp<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span><span class="token string">"kafka_spout"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">KafkaSpout</span><span class="token punctuation">(</span>KafkaSpoutConfig<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">"localhost:9092"</span> <span class="token punctuation">,</span> <span class="token string">"qxw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tp<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"bolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"kafka_spout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Config cfg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cfg<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定工作进程数  （jvm数量，分布式环境下可用，本地模式设置无意义）</span>            cfg<span class="token punctuation">.</span><span class="token function">setDebug</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LocalCluster locl<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             locl<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"kkafka-topo"</span><span class="token punctuation">,</span>cfg<span class="token punctuation">,</span>tp<span class="token punctuation">.</span><span class="token function">createTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">class</span> <span class="token class-name">MyBolt</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBasicBolt</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple tuple<span class="token punctuation">,</span> BasicOutputCollector basicOutputCollector<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接受订阅kafka消息：  "</span><span class="token operator">+</span>tuple<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接受订阅kafka消息：  "</span><span class="token operator">+</span>tuple<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer outputFieldsDeclarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> storm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storm系列(五)DRPC实现远程调用</title>
      <link href="/2018/09/20/storm/storm-xi-lie-wu-drpc-shi-xian-yuan-cheng-diao-yong/"/>
      <url>/2018/09/20/storm/storm-xi-lie-wu-drpc-shi-xian-yuan-cheng-diao-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="Trident简介"><a href="#Trident简介" class="headerlink" title="Trident简介"></a>Trident简介</h2><ul><li>Trident拥有一流的抽象，可以读取和写入有状态的来源。状态可以是拓扑的内部 - 例如，保存在内存中并由HDFS支持 -  或者外部存储在Memcached或Cassandra等数据库中。在任何一种情况下，Trident API都没有区别。</li><li>Trident以容错的方式管理状态，以便状态更新在重试和失败时是幂等的。这使您可以推理Trident拓扑，就好像每条消息都是精确处理一次一样。</li><li>在进行状态更新时，可以实现各种级别的容错<h2 id="例子说明"><a href="#例子说明" class="headerlink" title="例子说明"></a>例子说明</h2>假设您正在对流进行计数聚合，并希望将运行计数存储在数据库中。现在假设您在数据库中存储了一个表示计数的值，并且每次处理新元组时都会增加计数。</li></ul><p>发生故障时，将重发送元组。这会在执行状态更新（或任何带有副作用的事物）时出现问题 - 您不知道以前是否曾基于此元组成功更新状态。也许你以前从未处理过元组，在这种情况下你应该增加计数。也许你已经处理了元组并成功递增了计数，但是元组在另一个步骤中处理失败。在这种情况下，您不应增加计数。或许您之前看过元组但在更新数据库时出错。在这种情况下，您应该更新数据库。</p><p>只需将计数存储在数据库中，您就不知道之前是否已经处理过这个元组。因此，您需要更多信息才能做出正确的决定。Trident提供以下语义，足以实现一次性处理语义：</p><ol><li>元组作为小批量处理</li><li>每批元组都有一个称为“事务ID”（txid）的唯一ID。如果批量重播，则给出完全相同的txid</li><li>批次之间订购状态更新。也就是说，在批处理2的状态更新成功之前，不会应用批处理3的状态更新。</li></ol><p>使用这些原语，您的State实现可以检测之前是否已经处理了一批元组，并采取适当的操作以一致的方式更新状态。您采取的操作取决于输入splot提供的确切语义，即每批中的内容。在容错方面有三种可能的splot：“非事务性”，“事务性”和“不透明事务性”。同样，在容错方面有三种可能的状态：“非事务性”，“事务性”和“不透明事务性”。让我们来看看每个splot类型，看看每种喷口可以达到什么样的容错能力。</p><h2 id="Transactional-spout-事物性spouts"><a href="#Transactional-spout-事物性spouts" class="headerlink" title="Transactional spout(事物性spouts)"></a>Transactional spout(事物性spouts)</h2><p>请记住，Trident将元组作为小批量处理，每个批次都被赋予唯一的事务ID。spout的属性根据它们可以提供的关于每批中的含量的保证而变化。事务性spout具有以下属性：</p><ol><li>给定txid的批次始终相同。对txid进行批量重放将与第一次为该txid发出批次完全相同的元组集。</li><li>批处理元组之间没有重叠（元组是一批或另一批，从不多元组）。</li><li>每个元组都是一个批处理（没有跳过元组）<br>这是一个非常容易理解的事物性spout，将流分为不变的固定批次。Storm 为Kafka 实施了一个事务spout。</li></ol><p><strong>为什么不总是使用事务性spout？</strong><br>它们简单易懂。您可能不使用它的一个原因是因为它们不一定非常容错。例如，TransactionalTridentKafkaSpout的工作方式是txid的批处理将包含来自主题的所有Kafka分区的元组。一旦批次被发出，那么在将来重新发出批次的任何时候都必须发出完全相同的元组集合以满足事务性喷口的语义。现在假设从TransactionalTridentKafkaSpout发出批处理，批处理无法处理，同时其中一个Kafka节点发生故障。您现在无法重播与之前相同的批次（因为节点已关闭且主题的某些分区不可用），</p><p>这就是存在“不透明事务”spout的原因 - 它们对丢失源节点具有容错能力，同时仍允许您实现一次性处理语义。</p><p>（一方面注意 - 一旦Kafka支持复制，就有可能拥有对节点故障具有容错能力的事务性spout，但该功能尚不存在。）</p><p>假设您的拓扑计算字数，并且您希望将字数存储在键/值数据库中。键将是单词，值将包含计数。您已经看到只存储计数，因为该值不足以知道您之前是否处理过一批元组。相反，您可以做的是将事务id与数据库中的count一起存储为原子值。然后，在更新计数时，您只需将数据库中的事务ID与当前批次的事务ID进行比较。如果它们是相同的，则跳过更新 - 由于强大的排序，您确定数据库中的值包含当前批次。如果它们不同，则增加计数。这个逻辑有效，因为txid的批处理永远不会改变，</p><p>假设您正在处理由以下一批元组组成的txid 3：</p><pre><code>[&quot;man&quot;][&quot;man&quot;][&quot;dog&quot;]</code></pre><p>假设数据库当前包含以下键/值对：</p><pre><code>man =&gt; [count=3, txid=1]dog =&gt; [count=4, txid=3]apple =&gt; [count=10, txid=2]</code></pre><p>与“man”关联的txid为txid 1.由于当前txid为3，因此您确定该批次中未表示此批元组。因此，您可以继续将计数增加2并更新txid。另一方面，“dog”的txid与当前的txid相同。因此，您确定已知当前批次的增量已在数据库中表示为“dog”键。所以你可以跳过更新。完成更新后，数据库如下所示：</p><pre><code>man =&gt; [count=5, txid=3]dog =&gt; [count=4, txid=3]apple =&gt; [count=10, txid=2]</code></pre><h2 id="不透明事务性-模糊事务型"><a href="#不透明事务性-模糊事务型" class="headerlink" title="不透明事务性(模糊事务型)"></a>不透明事务性(模糊事务型)</h2><p>模糊事务型spout不能保证txid的一批元组保持不变。不透明的事务性spout具有以下属性：</p><ol><li>每个元组只需一批成功处理。但是，元组可能无法在一个批处理中处理，然后在稍后的批处理中成功处理。</li><li>对于不透明的事务性spout，如果数据库中的事务id与当前批处理的事务id相同，则不再可能使用跳过状态更新的技巧。这是因为批次可能在状态更新之间发生了变化。</li></ol><h2 id="非事务型-spout"><a href="#非事务型-spout" class="headerlink" title="非事务型 spout"></a>非事务型 spout</h2><p>非事务型 spout不对每批中的物品提供任何保证。因此它可能最多只进行一次处理，在这种情况下，在批次失败后不会重试元组。或者它可能具有至少一次处理，其中元组可以通过多个批次成功处理。对于这种spout，没有办法实现完全一次的语义。</p><h2 id="不同类型的-Spout-与-State-的总结"><a href="#不同类型的-Spout-与-State-的总结" class="headerlink" title="不同类型的 Spout 与 State 的总结"></a>不同类型的 Spout 与 State 的总结</h2><p>模糊事务型 state 具有最好的容错性特征，不过这是以在数据库中存储更多的内容为代价的（一个 txid 和两个 value）。事务型 state 要求的存储空间相对较小，但是它的缺点是只对事务型 spout 有效。相对的，非事务型要求的存储空间最少，但是它也不能提供任何的恰好一次的消息执行语义。</p><p>你选择 state 与 spout 的时候必须在容错性与存储空间占用之间权衡。可以根据你的应用的需求来确定哪种组合最适合你。</p><h2 id="Trident代码实例"><a href="#Trident代码实例" class="headerlink" title="Trident代码实例"></a>Trident代码实例</h2><p>简单输出数据</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TridentTopology1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 接受一组输入字段并发出零个或多个元组作为输出 （类似storm bolt数据流处理组件）     * @author qxw     * @data 2018年9月19日下午6:17:14     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyFunction</span> <span class="token keyword">extends</span> <span class="token class-name">BaseFunction</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>TridentTuple tuple<span class="token punctuation">,</span> TridentCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a:  "</span><span class="token operator">+</span>tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b:  "</span><span class="token operator">+</span>tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c:  "</span><span class="token operator">+</span>tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d:  "</span><span class="token operator">+</span>tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//固定批处理数据源（类似storm原生的spout） 声明2个输入的字段</span>        FixedBatchSpout spout <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FixedBatchSpout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//设置批处理大小</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置数据内容</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否循环发送</span>        spout<span class="token punctuation">.</span><span class="token function">setCycle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建topology</span>        TridentTopology topology <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TridentTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定数据源</span>         Stream input<span class="token operator">=</span>topology<span class="token punctuation">.</span><span class="token function">newStream</span><span class="token punctuation">(</span><span class="token string">"spout"</span><span class="token punctuation">,</span> spout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//要实现storm原生spolt--bolt的模式在Trident中用each实现</span>         input<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token keyword">new</span> <span class="token class-name">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//执行函数 类似bolt</span>                 <span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//为空不向下发送</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span>        Config conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setMaxSpoutPending</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalCluster cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"TridentTopology1"</span><span class="token punctuation">,</span> conf<span class="token punctuation">,</span> topology<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Trident操作-flters海量数据过滤"><a href="#Trident操作-flters海量数据过滤" class="headerlink" title="Trident操作 - flters海量数据过滤"></a>Trident操作 - flters海量数据过滤</h2><p>通过要继承BaseFilter，重写isKeep方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TridentTopology2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 可以海量数据进行过滤，需要继承BaseFilter，重写isKeep方法     * @author qxw     * @data 2018年9月21日上午10:57:00     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">extends</span> <span class="token class-name">BaseFilter</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isKeep</span><span class="token punctuation">(</span>TridentTuple tuple<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//能够被2对第1个和第2个值进行相加.然后除2，为0则发射，不为零则不发射射</span>                   <span class="token keyword">return</span> tuple<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 类似原生storm bolt数据流处理组件     * @author qxw     * @data 2018年9月21日下午3:31:12     */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyFunction</span> <span class="token keyword">extends</span> <span class="token class-name">BaseFunction</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>TridentTuple tuple<span class="token punctuation">,</span> TridentCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取tuple输入内容</span>        Integer a <span class="token operator">=</span> tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer b <span class="token operator">=</span> tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer c <span class="token operator">=</span> tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer d <span class="token operator">=</span> tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a: "</span><span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">", b: "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">", c: "</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">", d: "</span> <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//固定批处理数据源（类似storm原生的spout） 声明a,b,c,d四个字段</span>        FixedBatchSpout spout <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FixedBatchSpout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//设置批处理大小</span>                        <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置数据内容</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//是否循环发送</span>         spout<span class="token punctuation">.</span><span class="token function">setCycle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建topology</span>         TridentTopology topology <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TridentTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定数据源</span>         Stream input<span class="token operator">=</span>topology<span class="token punctuation">.</span><span class="token function">newStream</span><span class="token punctuation">(</span><span class="token string">"spout"</span><span class="token punctuation">,</span> spout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//要实现storm原生spolt--bolt的模式在Trident中用each实现 (随机分组)</span>         input<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//本地模式</span>         Config conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         conf<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         conf<span class="token punctuation">.</span><span class="token function">setMaxSpoutPending</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         LocalCluster cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         cluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"TridentTopology2"</span><span class="token punctuation">,</span> conf<span class="token punctuation">,</span> topology<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//集群模式</span><span class="token comment" spellcheck="true">//         StormSubmitter.submitTopology("TridentTopology1", conf, buildTopology());</span>    <span class="token punctuation">}</span></code></pre><h2 id="Triden-实现单词计数统计"><a href="#Triden-实现单词计数统计" class="headerlink" title="Triden 实现单词计数统计"></a>Triden 实现单词计数统计</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TridentWordCount</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyFunction</span> <span class="token keyword">extends</span> <span class="token class-name">BaseFunction</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>TridentTuple tuple<span class="token punctuation">,</span> TridentCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String word<span class="token operator">=</span>tuple<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Long count<span class="token operator">=</span>tuple<span class="token punctuation">.</span><span class="token function">getLongByField</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>word<span class="token operator">+</span><span class="token string">"   :  "</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 创建spout */</span>        FixedBatchSpout spout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FixedBatchSpout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"sentence"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token string">"java php asd java"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token string">"php css js html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token string">"js php java java"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token string">"a a b c d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//是否循环发送</span>        spout<span class="token punctuation">.</span><span class="token function">setCycle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 创建topology */</span>        TridentTopology topology <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TridentTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 创建Stream spout1, 分词、统计 */</span>        topology<span class="token punctuation">.</span><span class="token function">newStream</span><span class="token punctuation">(</span><span class="token string">"spout"</span><span class="token punctuation">,</span> spout<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//先切割</span>                        <span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"sentence"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//分组</span>                        <span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true">//聚合统计</span>                        <span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//输出函数</span>                        <span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">,</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//设置并行度</span>                        <span class="token punctuation">.</span><span class="token function">parallelismHint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Config conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setMaxSpoutPending</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalCluster cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"TridentWordCount"</span><span class="token punctuation">,</span> conf<span class="token punctuation">,</span> topology<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Trident-实现Drpc"><a href="#Trident-实现Drpc" class="headerlink" title="Trident 实现Drpc"></a>Trident 实现Drpc</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TridentDrpc</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyFunction</span> <span class="token keyword">extends</span> <span class="token class-name">BaseFunction</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>TridentTuple tridentTuple<span class="token punctuation">,</span> TridentCollector tridentCollector<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String sentence <span class="token operator">=</span> tridentTuple<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> sentence<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tridentCollector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvalidTopologyException<span class="token punctuation">,</span> AuthorizationException<span class="token punctuation">,</span> AlreadyAliveException <span class="token punctuation">{</span>        TridentTopology topology<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TridentTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Config conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setMaxSpoutPending</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//本地模式</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            LocalCluster cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LocalDRPC drpc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalDRPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Stream input<span class="token operator">=</span>topology<span class="token punctuation">.</span><span class="token function">newDRPCStream</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span>drpc<span class="token punctuation">)</span><span class="token punctuation">;</span>            input<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"args"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"wordCount"</span><span class="token punctuation">,</span> conf<span class="token punctuation">,</span> topology<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//调用</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DRPC RESULT: "</span> <span class="token operator">+</span> drpc<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token string">"cat the dog jumped"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            drpc<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cluster<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//集群模式</span>            conf<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            StormSubmitter<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> conf<span class="token punctuation">,</span> topology<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>官方文档：<a href="https://github.com/apache/storm/blob/master/docs/Trident-state.md" target="_blank" rel="noopener">https://github.com/apache/storm/blob/master/docs/Trident-state.md</a></p>]]></content>
      
      
      <categories>
          
          <category> storm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storm系列(四)并行度和流分组</title>
      <link href="/2018/09/19/storm/storm-xi-lie-si-bing-xing-du-he-liu-fen-zu/"/>
      <url>/2018/09/19/storm/storm-xi-lie-si-bing-xing-du-he-liu-fen-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="并行度-parallelism-概念"><a href="#并行度-parallelism-概念" class="headerlink" title="并行度(parallelism)概念"></a>并行度(parallelism)概念</h2><ul><li>一个运行中的拓扑是由什么构成的：工作进程（worker processes），执行器（executors）和任务（tasks）</li><li>在 Worker 中运行的是拓扑的一个子集。一个 worker 进程是从属于某一个特定的拓扑的，在 worker<br>进程中会运行一个或者多个与拓扑中的组件相关联的 executor。一个运行中的拓扑就是由这些运行于 Storm集群中的很多机器上的进程组成的。s</li><li>一个 executor 是由 worker 进程生成的一个线程。在 executor 中可能会有一个或者多个 task，这些 task<br>都是为同一个组件（spout 或者 bolt）服务的。</li><li>task 是实际执行数据处理的最小工作单元（注意，task 并不是线程） —— 在你的代码中实现的每个 spout 或者 bolt 都会在集群中运行很多个 task。在拓扑的整个生命周期中每个组件的 task 数量都是保持不变的，不过每个组件的 executor数量却是有可能会随着时间变化。在默认情况下 task 的数量是和 executor 的数量一样的，也就是说，默认情况下 Storm会在每个线程上运行一个 task。</li></ul><h2 id="Storm的流分组策略"><a href="#Storm的流分组策略" class="headerlink" title="Storm的流分组策略"></a>Storm的流分组策略</h2><ul><li>Storm的分组策略对结果有着直接的影响，不同的分组的结果一定是不一样的。其次，不同的分组策略对资源的利用也是有着非常大的不同</li><li>拓扑定义的一部分就是为每个Bolt指定输入的数据流，而数据流分组则定义了在Bolt的task之间如何分配数据流。</li></ul><h2 id="八种流分组定义"><a href="#八种流分组定义" class="headerlink" title="八种流分组定义"></a>八种流分组定义</h2><p><strong>Shuffle grouping:</strong></p><ul><li>随机分组：随机的将tuple分发给bolt的各个task，每个bolt实例接收到相同数量的tuple。</li></ul><p><strong>Fields grouping:</strong></p><ul><li>按字段分组：根据指定的字段的值进行分组，举个栗子，流按照“user-id”进行分组，那么具有相同的“user-id”的tuple会发到同一个task，而具有不同“user-id”值的tuple可能会发到不同的task上。这种情况常常用在单词计数，而实际情况是很少用到，因为如果某个字段的某个值太多，就会导致task不均衡的问题。</li></ul><p><strong>Partial Key grouping:</strong></p><ul><li>部分字段分组：流由分组中指定的字段分区，如“字段”分组，但是在两个下游Bolt之间进行负载平衡，当输入数据歪斜时，可以更好地利用资源。优点。有了这个分组就完全可以不用Fields grouping了</li></ul><p><strong>All grouping:</strong></p><ul><li>广播分组：将所有的tuple都复制之后再分发给Bolt所有的task，每一个订阅数据流的task都会接收到一份相同的完全的tuple的拷贝。</li></ul><p><strong>Global grouping:</strong></p><ul><li>全局分组：这种分组会将所有的tuple都发到一个taskid最小的task上。由于所有的tuple都发到唯一一个task上，势必在数据量大的时候会造成资源不够用的情况。</li></ul><p><strong>None grouping</strong>:</p><ul><li>不分组：不指定分组就表示你不关心数据流如何分组。目前来说不分组和随机分组效果是一样的，但是最终，Storm可能会使用与其订阅的bolt或spout在相同进程的bolt来执行这些tuple</li></ul><p><strong>Direct grouping:</strong></p><ul><li>指向分组：这是一种特殊的分组策略。以这种方式分组的流意味着将由元组的生成者决定消费者的哪个task能接收该元组。指向分组只能在已经声明为指向数据流的数据流中声明。tuple的发射必须使用emitDirect种的一种方法。Bolt可以通过使用TopologyContext或通过在OutputCollector（返回元组发送到的taskID）中跟踪emit方法的输出来获取其消费者的taskID。</li></ul><p><strong>Local or shuffle grouping:</strong><br>本地或随机分组：和随机分组类似，但是如果目标Bolt在同一个工作进程中有一个或多个任务，那么元组将被随机分配到那些进程内task。简而言之就是如果发送者和接受者在同一个worker则会减少网络传输，从而提高整个拓扑的性能。有了此分组就完全可以不用shuffle grouping了。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>修改上一章节的Topology<br><a href="https://juejin.im/post/5c3024395188252584691be0" target="_blank" rel="noopener">Storm(三)Java编写第一个本地模式demo</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>topology<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>Config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>LocalCluster<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>TopologyBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Fields<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>bolt<span class="token punctuation">.</span>OutBolt<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>bolt<span class="token punctuation">.</span>OutBolt2<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>spout<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 拓扑的并行性 * @author qxw * @data 2018年9月17日下午2:49:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopologyTest2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置</span>        Config cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cfg<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定工作进程数  （jvm数量，分布式环境下可用，本地模式设置无意义）</span>        cfg<span class="token punctuation">.</span><span class="token function">setDebug</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造拓扑流程图</span>        TopologyBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopologyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置数据源（产生2个执行器和俩个任务）</span>        builder<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNumTasks</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置数据建流处理组件（产生2个执行器和4个任务）</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"out-bolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OutBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNumTasks</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//随机分组</span>        <span class="token comment" spellcheck="true">//设置bolt的并行度和任务数:（产生6个执行器和6个任务）</span><span class="token comment" spellcheck="true">//        builder.setBolt("out-bol2", new OutBolt2(),6).shuffleGrouping("out-bolt").setNumTasks(6); //随机分组</span>        <span class="token comment" spellcheck="true">//设置字段分组（产生8个执行器和8个任务）字段分组 </span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"out-bol2"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OutBolt2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fieldsGrouping</span><span class="token punctuation">(</span><span class="token string">"out-bolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"outdata"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNumTasks</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置广播分组</span>        <span class="token comment" spellcheck="true">//builder.setBolt("write-bolt", new OutBolt2(), 4).allGrouping("print-bolt");</span>        <span class="token comment" spellcheck="true">//设置全局分组</span>        <span class="token comment" spellcheck="true">//builder.setBolt("write-bolt", new OutBolt2(), 4).globalGrouping("print-bolt");</span>        <span class="token comment" spellcheck="true">//1 本地模式</span>        LocalCluster cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交拓扑图  会一直轮询执行</span>        cluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"topo"</span><span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">createTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 集群模式</span><span class="token comment" spellcheck="true">//        StormSubmitter.submitTopology("topo", cfg, builder.createTopology());</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> storm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storm系列(三)java编写第个storm程序</title>
      <link href="/2018/09/18/storm/storm-xi-lie-san-java-bian-xie-di-ge-storm-cheng-xu/"/>
      <url>/2018/09/18/storm/storm-xi-lie-san-java-bian-xie-di-ge-storm-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="本地模式"><a href="#本地模式" class="headerlink" title="本地模式"></a>本地模式</h2><p>在本地模式下，Storm拓扑结构运行在本地计算机的单一JVM进程上。这个模式用于开发、测试以及调试，因为这是观察所有组件如何协同工作的最简单方法。在这种模式下，我们可以调整参数，观察我们的拓扑结构如何在不同的Storm配置环境下运行。要在本地模式下运行，我们要下载Storm开发依赖，以便用来开发并测试我们的拓扑结构。我们创建了第一个Storm工程以后，很快就会明白如何使用本地模式了。<br>NOTE: 在本地模式下，跟在集群环境运行很像。不过很有必要确认一下所有组件都是线程安全的，因为当把它们部署到远程模式时它们可能会运行在不同的JVM进程甚至不同的物理机上，这个时候它们之间没有直接的通讯或共享内存。 </p><h2 id="远程模式"><a href="#远程模式" class="headerlink" title="远程模式"></a>远程模式</h2><p>在远程模式下，我们向Storm集群提交拓扑，它通常由许多运行在不同机器上的流程组成。远程模式不会出现调试信息， 因此它也称作生产模式。不过在单一开发机上建立一个Storm集群是一个好主意，可以在部署到生产环境之前，用来确认拓扑在集群环境下没有任何问题。</p><h2 id="常用Java-api"><a href="#常用Java-api" class="headerlink" title="常用Java api"></a>常用Java api</h2><p>1）基本接口</p><pre><code>   （1）IComponent接口   （2）ISpout接口   （3）IRichSpout接口   （4）IStateSpout接口   （5）IRichStateSpout接口   （6）IBolt接口   （7）IRichBolt接口   （8）IBasicBolt接口</code></pre><p>2）基本抽象类</p><pre><code>（1）BaseComponent抽象类（2）BaseRichSpout抽象类（3）BaseRichBolt抽象类（4）BaseTransactionalBolt抽象类（5）BaseBasicBolt抽象类</code></pre><p>创建数据源（Spouts )</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>spout<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>spout<span class="token punctuation">.</span>SpoutOutputCollector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>TopologyContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>OutputFieldsDeclarer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseRichSpout<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Fields<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Values<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数据源 spout * @author qxw * @data 2018年9月17日上午11:21:00 *  * 申明数据源的方式：继承BaseRichSpout类 ， 重写需要的方法。实现IRichSpout接口 重写所有的方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSource</span>  <span class="token keyword">extends</span> <span class="token class-name">BaseRichSpout</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> SpoutOutputCollector collector<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"groovy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ruby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span>Map conf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span> SpoutOutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collector <span class="token operator">=</span> collector<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 轮询tuple 发送数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextTuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里可以查询数据库 或者读取消息队列中的数据、测试使用map替代</span>        <span class="token keyword">final</span> Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//发送单词到下一个拓扑节点</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 声明发送数据的名称     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//指定名称 用于下一个节店取值时使用</span>        declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在该spout关闭前执行，但是并不能得到保证其一定被执行     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spout关闭前执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *  当Spout已经从失效模式中激活时被调用。该Spout的nextTuple()方法很快就会被调用。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当Spout已经从失效模式中激活时被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 当Spout已经失效时被调用。在Spout失效期间，nextTuple不会被调用。Spout将来可能会也可能不会被重新激活。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deactivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当Spout已经失效时被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 成功处理tuple回调方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ack</span><span class="token punctuation">(</span>Object paramObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功处理tuple回调方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理失败tuple回调方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span>Object paramObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"paramObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>数据流处理组件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>bolt<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>BasicOutputCollector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>OutputFieldsDeclarer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseBasicBolt<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Fields<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Values<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数据库流处理组件 *  * 打印出输处理的bolt * 实现方式：继承BaseBasicBolt类  或实现IBasicBolt * @author qxw * @data 2018年9月17日上午11:36:07 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutBolt</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBasicBolt</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 接受一个tuple进行处理，也可发送数据到下一级组件     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">,</span> BasicOutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">////获取上一个组件所声明的Field</span>        String value<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据源发送的data: "</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送到下一个组件</span>        collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 声明发送数据的名称     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//可同时发送多个Field</span>        declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"outdata"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>bolt<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>BasicOutputCollector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>OutputFieldsDeclarer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseBasicBolt<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数据库流处理组件 *  * 打印出输处理的bolt * 实现方式：继承BaseBasicBolt类  或实现IBasicBolt * @author qxw * @data 2018年9月17日上午11:36:07 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutBolt2</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBasicBolt</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 接受一个tuple进行处理，也可发送数据到下一级组件     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">,</span> BasicOutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">////获取上一个组件所声明的Field</span>        String value<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"outdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收OutBolt数据库流处理组件发送的值：   "</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 声明发送数据的名称     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>构造拓扑图</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>topology<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>Config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>LocalCluster<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>TopologyBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>bolt<span class="token punctuation">.</span>OutBolt<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>bolt<span class="token punctuation">.</span>OutBolt2<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>spout<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopologyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置</span>        Config cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cfg<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定工作进程数  （jvm数量，分布式环境下可用，本地模式设置无意义）</span>        cfg<span class="token punctuation">.</span><span class="token function">setDebug</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造拓扑流程图</span>        TopologyBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopologyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置数据源</span>        builder<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置数据建流处理组件</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"out-bolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OutBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随机分组</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"out-bol2"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OutBolt2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"out-bolt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1 本地模式</span>        LocalCluster cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交拓扑图  会一直轮询执行</span>        cluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"topo"</span><span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">createTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 集群模式</span><span class="token comment" spellcheck="true">//        StormSubmitter.submitTopology("topo", cfg, builder.createTopology());</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="storm实现单词计数器统计"><a href="#storm实现单词计数器统计" class="headerlink" title="storm实现单词计数器统计"></a>storm实现单词计数器统计</h2><p><img src="https://user-gold-cdn.xitu.io/2019/1/5/1681c0d7a465181f?w=298&amp;h=264&amp;f=png&amp;s=14505" alt="在这里插入图片描述"></p><p><strong>数据源Spout</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>wordCount<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>spout<span class="token punctuation">.</span>SpoutOutputCollector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>TopologyContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>IRichSpout<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>OutputFieldsDeclarer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Fields<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Values<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数据源 * @author qxw * @data 2018年9月18日上午11:58:35 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordSpout</span> <span class="token keyword">implements</span> <span class="token class-name">IRichSpout</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> SpoutOutputCollector collector<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> lines <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"long long ago I like playing with cat"</span><span class="token punctuation">,</span>                <span class="token string">"playing with cat make me happy"</span><span class="token punctuation">,</span>                <span class="token string">"I feel happy to be with you"</span><span class="token punctuation">,</span>                <span class="token string">"you give me courage"</span><span class="token punctuation">,</span>                <span class="token string">"I like to be together with you"</span><span class="token punctuation">,</span>                <span class="token string">"long long ago I like you"</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span>Map conf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span>SpoutOutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collector<span class="token operator">=</span>collector<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//发送数据</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextTuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">>=</span>lines<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deactivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ack</span><span class="token punctuation">(</span>Object msgId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span>Object msgId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getComponentConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>切割组件</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordSplitBolt</span> <span class="token keyword">implements</span> <span class="token class-name">IRichBolt</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>     <span class="token keyword">private</span> OutputCollector collector<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span>Map stormConf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span>OutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>collector <span class="token operator">=</span> collector<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**     * 这个函数也会被不断执行，但它的数据来自于上游。     * 这里将文本行分割为单词，并发送     * @param tuple     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">)</span> <span class="token punctuation">{</span>         String line <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>String word <span class="token operator">:</span> words<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getComponentConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>统计组件</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountBolt</span> <span class="token keyword">implements</span> <span class="token class-name">IRichBolt</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> OutputCollector collector<span class="token punctuation">;</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> counts<span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化放方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span>Map stormConf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span>OutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>collector <span class="token operator">=</span> collector<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>counts<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 统计单词出现的次数 一般是存储到数据库     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String word<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Long count <span class="token operator">=</span> 1L<span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>counts<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             count <span class="token operator">=</span> counts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>         counts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"统计单词："</span><span class="token operator">+</span>word<span class="token operator">+</span><span class="token string">" 出现次数: "</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">,</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getComponentConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>输出组件</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordReportBolt</span> <span class="token keyword">implements</span> <span class="token class-name">IRichBolt</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span>Map stormConf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span>            OutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String word<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Long count<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">getLongByField</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"实时统计单词出现次数  "</span><span class="token operator">+</span><span class="token string">"%s\t%d\n"</span><span class="token punctuation">,</span> word<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getComponentConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Topology主函数类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordTopology</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 组建拓扑，并使用流分组</span>        TopologyBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopologyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span><span class="token string">"WordSpout"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WordSpout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"WordSplitBolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WordSplitBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"WordSpout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"WordCountBolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WordCountBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fieldsGrouping</span><span class="token punctuation">(</span><span class="token string">"WordSplitBolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"WordReportBolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WordReportBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">globalGrouping</span><span class="token punctuation">(</span><span class="token string">"WordCountBolt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置</span>        Config cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cfg<span class="token punctuation">.</span><span class="token function">setDebug</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalCluster cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//提交拓扑图  会一直轮询执行</span>       cluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"wordcount-topo"</span><span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">createTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://user-gold-cdn.xitu.io/2019/1/5/1681c0d7a47ac4a9?w=876&amp;h=258&amp;f=png&amp;s=43581" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> storm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storm系列(二)常用shell命令操作</title>
      <link href="/2018/09/17/storm/storm-xi-lie-er-chang-yong-shell-ming-ling-cao-zuo/"/>
      <url>/2018/09/17/storm/storm-xi-lie-er-chang-yong-shell-ming-ling-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>官方文档<br><a href="http://storm.apache.org/releases/1.2.2/Command-line-client.html" target="_blank" rel="noopener">http://storm.apache.org/releases/1.2.2/Command-line-client.html</a></p><h3 id="查看命令帮助"><a href="#查看命令帮助" class="headerlink" title="查看命令帮助"></a>查看命令帮助</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@web1 apache-storm-1.2.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># bin/storm help</span>Commands:    activate    blobstore    classpath    deactivate    dev-zookeeper    drpc    get-errors    heartbeats    <span class="token function">help</span>    jar    <span class="token function">kill</span>    kill_workers    list    localconfvalue    logviewer    monitor    nimbus    node-health-check    pacemaker    rebalance    remoteconfvalue    repl    set_log_level    shell    sql    supervisor    ui    upload-credentials    versionHelp:     <span class="token function">help</span>     <span class="token function">help</span> <span class="token operator">&lt;</span>command<span class="token operator">></span>Documentation <span class="token keyword">for</span> the storm client can be found at http://storm.apache.org/documentation/Command-line-client.htmlConfigs can be overridden using one or <span class="token function">more</span> -c flags, e.g. <span class="token string">"storm list -c nimbus.host=nimbus.mycompany.com"</span></code></pre><p><strong>activate（激活指定拓扑的spouts。）</strong></p><pre><code>语法：storm activate topology-name</code></pre><p><strong>classpath（在运行命令时打印storm客户端使用的类路径）</strong></p><pre><code>storm classpath</code></pre><p><strong>deactivate  停用指定拓扑的spouts</strong> </p><pre><code>storm deactivate topology-name</code></pre><p><strong>drpc (启动DRPC守护程序)</strong></p><pre><code>storm drpc</code></pre><p><strong>get-errors</strong><br>从正在运行的拓扑中获取最新错误。返回的结果包含组件名称的键值对和错误组件的组件错误。结果以json格式返回</p><pre><code>storm get-errors topology-name</code></pre><p><strong>jar</strong><br>使用指定的参数运行类的主要方法。提交拓扑使用</p><pre><code>storm jar topology-jar-path class ...</code></pre><p><strong>kill</strong><br>使用名称终止拓扑topology-name 您可以使用-w标志覆盖Storm在停用和关闭之间等待的时间长度</p><pre><code>storm kill topology-name [-w wait-time-secs]</code></pre><p><strong>list</strong><br>列出正在运行的拓扑及其状态</p><pre><code>storm list</code></pre><p><strong>localconfvalue</strong><br>打印出本地Storm配置的conf-name的值</p><pre><code>storm localconfvalue conf-name</code></pre><p><strong>logviewer</strong><br>启动Logviewer守护进程</p><pre><code>storm logviewe</code></pre><p><strong>nimbus</strong><br>启动Nimbus守护进程</p><pre><code>storm nimbus</code></pre><p><strong>supervisor</strong> </p><pre><code>storm supervisor</code></pre><p><strong>version</strong></p><pre><code>storm version</code></pre>]]></content>
      
      
      <categories>
          
          <category> storm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storm系列(一)环境搭建安装</title>
      <link href="/2018/09/12/storm/storm-xi-lie-yi-huan-jing-da-jian-an-zhuang/"/>
      <url>/2018/09/12/storm/storm-xi-lie-yi-huan-jing-da-jian-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Apache-Storm"><a href="#什么是Apache-Storm" class="headerlink" title="什么是Apache Storm"></a>什么是Apache Storm</h3><p>Apache Storm是一个分布式实时大数据处理系统。Storm设计用于在容错和水平可扩展方法中处理大量数据。它是一个流数据框架，具有最高的摄取率。虽然Storm是无状态的，它通过Apache ZooKeeper管理分布式环境和集群状态。它很简单，您可以并行地对实时数据执行各种操作。</p><h3 id="Apache-Storm-和-Hadoop对比"><a href="#Apache-Storm-和-Hadoop对比" class="headerlink" title="Apache Storm 和 Hadoop对比"></a>Apache Storm 和 Hadoop对比</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138034dd15d34?w=704&amp;h=306&amp;f=png&amp;s=46836" alt="输入图片说明" title="屏幕截图.png"></p><h3 id="Apache-Storm优势"><a href="#Apache-Storm优势" class="headerlink" title="Apache Storm优势"></a>Apache Storm优势</h3><ul><li>storm是开源的，强大的，用户友好的。它可以用于小公司和大公司。</li><li>Storm是容错的，灵活的，可靠的，并且支持任何编程语言。</li><li>允许实时流处理。</li><li>Storm是令人难以置信的快，因为它具有巨大的处理数据的力量。</li><li>Storm可以通过线性增加资源来保持性能，即使在负载增加的情况下。它是高度可扩展的。</li><li>Storm在几秒钟或几分钟内执行数据刷新和端到端传送响应取决于问题。它具有非常低的延迟。</li><li>Storm有操作智能。</li><li>Storm提供保证的数据处理，即使群集中的任何连接的节点死或消息丢失。</li></ul><h2 id="Storm-系统中包含以下几个基本概念："><a href="#Storm-系统中包含以下几个基本概念：" class="headerlink" title="Storm 系统中包含以下几个基本概念："></a>Storm 系统中包含以下几个基本概念：</h2><p><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">拓扑（Topologies）</a><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">这里写链接内容</a><br><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">流（Streams）</a><br><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">数据源（Spouts</a><br><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">数据流处理组件（Bolts）</a><br><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">数据流分组（Stream groupings）</a><br><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">可靠性（Reliability）</a><br><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">任务（Tasks）</a><br><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">工作进程（Workers）</a></p><h3 id="Apache-Storm的组件"><a href="#Apache-Storm的组件" class="headerlink" title="Apache Storm的组件"></a>Apache Storm的组件</h3><p> <strong>Tuple</strong> </p><ul><li><p>Tuple是Storm中的主要数据结构。它是有序元素的列表。默认情况下，Tuple支持所有数据类型。通常，它被建模为一组逗号分隔的值，并传递到Storm集群。</p><p><strong>Stream</strong> </p></li><li><p>流是元组的无序序列。</p><p><strong>Spouts</strong> </p></li><li><p>流的源。通常，Storm从原始数据源（如Twitter Streaming API，Apache Kafka队列，Kestrel队列等）接受输入数据。否则，您可以编写spouts以从数据源读取数据。“ISpout”是实现spouts的核心接口，一些特定的接口是IRichSpout，BaseRichSpout，KafkaSpout等。</p><p><strong>Bolts</strong> </p></li><li>Bolts是逻辑处理单元。Spouts将数据传递到Bolts和Bolts过程，并产生新的输出流。Bolts可以执行过滤，聚合，加入，与数据源和数据库交互的操作。Bolts接收数据并发射到一个或多个Bolts。 “IBolt”是实现Bolts的核心接口。一些常见的接口是IRichBolt，IBasicBolt等。</li></ul><h3 id="Storm工作流程"><a href="#Storm工作流程" class="headerlink" title="Storm工作流程"></a>Storm工作流程</h3><p>一个工作的Storm集群应该有一个Nimbus和一个或多个supervisors。另一个重要的节点是Apache ZooKeeper，它将用于nimbus和supervisors之间的协调。</p><p> <strong>现在让我们仔细看看Apache Storm的工作流程 −</strong> </p><ul><li>最初，nimbus将等待“Storm拓扑”提交给它。</li><li>一旦提交拓扑，它将处理拓扑并收集要执行的所有任务和任务将被执行的顺序。</li><li>然后，nimbus将任务均匀分配给所有可用的supervisors。</li><li>在特定的时间间隔，所有supervisor将向nimbus发送心跳以通知它们仍然运行着。</li><li>当supervisor终止并且不向心跳发送心跳时，则nimbus将任务分配给另一个supervisor。</li><li>当nimbus本身终止时，supervisor将在没有任何问题的情况下对已经分配的任务进行工作。</li><li>一旦所有的任务都完成后，supervisor将等待新的任务进去。</li><li>同时，终止nimbus将由服务监控工具自动重新启动。</li><li>重新启动的网络将从停止的地方继续。同样，终止supervisor也可以自动重新启动。由于网络管理程序和supervisor都可以自动重新启动，并且两者将像以前一样继续，因此Storm保证至少处理所有任务一次。</li><li><p>一旦处理了所有拓扑，则网络管理器等待新的拓扑到达，并且类似地，管理器等待新的任务。</p><p><strong>默认情况下，Storm集群中有两种模式：</strong> </p></li><li>本地模式 -此模式用于开发，测试和调试，因为它是查看所有拓扑组件协同工作的最简单方法。在这种模式下，我们可以调整参数，使我们能够看到我们的拓扑如何在不同的Storm配置环境中运行。在本地模式下，storm拓扑在本地机器上在单个JVM中运行。</li><li>生产模式 -在这种模式下，我们将拓扑提交到工作Storm集群，该集群由许多进程组成，通常运行在不同的机器上。如在storm的工作流中所讨论的，工作集群将无限地运行，直到它被关闭。</li></ul><h3 id="Storm安装（首先安装jdk和zookeeper）"><a href="#Storm安装（首先安装jdk和zookeeper）" class="headerlink" title="Storm安装（首先安装jdk和zookeeper）"></a>Storm安装（首先安装jdk和zookeeper）</h3><p><a href="https://www.apache.org/dyn/closer.lua/storm/apache-storm-1.2.2/apache-storm-1.2.2.tar.gz" target="_blank" rel="noopener">https://www.apache.org/dyn/closer.lua/storm/apache-storm-1.2.2/apache-storm-1.2.2.tar.gz</a><br>下载解压，编辑conf/storm.yaml文件</p><pre><code>##填写zookeeper集群的ip地址或者主机名########### These MUST be filled in for a storm configurationstorm.zookeeper.servers:     - &quot;192.168.2.149&quot;     - &quot;192.168.2.150&quot;     - &quot;192.168.2.151&quot;nimbus.seeds: [&quot;192.168.2.149&quot;]#配置数据存储路径storm.local.dir: &quot;/data/ms/storm-1.1.1/data&quot;##配置节点健康检测storm.health.check.dir: &quot;healthchecks&quot;storm.health.check.timeout.ms: 5000storm.local.hostname: &quot;192.168.2.150&quot;#配置supervisor： 开启几个端口插槽，就开启几个对应的worker进程supervisor.slots.ports:    - 6700    - 6701    - 6702    - 6703</code></pre><p>配置详解 <a href="http://xstarcd.github.io/wiki/Cloud/storm_config_detail.html" target="_blank" rel="noopener">http://xstarcd.github.io/wiki/Cloud/storm_config_detail.html</a></p><h3 id="启动守护进程"><a href="#启动守护进程" class="headerlink" title="启动守护进程"></a>启动守护进程</h3><p>最后一步是启动所有的Storm守护进程。 在监督下运行这些守护进程是非常重要的。 Storm是一个快速失败(fail-fast)系统，意味着只要遇到意外错误，进程就会停止。 Storm的设计可以在任何时候安全停止，并在重新启动过程时正确恢复。 这就是为什么Storm在进程中不保持状态 - 如果Nimbus或Supervisors重新启动，运行的拓扑结构不受影响。 以下是如何运行Storm守护进程：</p><pre><code>Nimbus：在Storm主控节点上运行命令bin/storm nimbus &amp;，启动Nimbus后台程序，并放到后台执行。Supervisor：在Storm各个工作节点上运行命令bin/storm supervisor &amp;。UI： 在Storm主控节点上运行命令bin/storm ui &amp;，启动UI后台程序，并放到后台执行</code></pre><p>访问<a href="http://192.168.1.191:8080" target="_blank" rel="noopener">http://192.168.1.191:8080</a>  成功</p><p>参考链接：<a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md</a></p>]]></content>
      
      
      <categories>
          
          <category> storm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper实现分布式锁和队列</title>
      <link href="/2018/08/29/spring-xi-lie/zookeeper-shi-xian-fen-bu-shi-suo-he-dui-lie/"/>
      <url>/2018/08/29/spring-xi-lie/zookeeper-shi-xian-fen-bu-shi-suo-he-dui-lie/</url>
      
        <content type="html"><![CDATA[<h3 id="Zookeeper客户端（Apache-Curator）"><a href="#Zookeeper客户端（Apache-Curator）" class="headerlink" title="Zookeeper客户端（Apache Curator）"></a>Zookeeper客户端（Apache Curator）</h3><p> <strong>ZooKeeper常用客户端</strong> </p><ul><li>zookeeper自带的客户端是官方提供的，比较底层、使用起来写代码麻烦、不够直接。</li><li>Apache Curator是Apache的开源项目，封装了zookeeper自带的客户端，使用相对简便，易于使用。</li><li><p>zkclient是另一个开源的ZooKeeper客户端，其地址：<a href="https://github.com/adyliu/zkclient生产环境不推荐使用。" target="_blank" rel="noopener">https://github.com/adyliu/zkclient生产环境不推荐使用。</a> </p><p><strong>Curator主要解决了三类问题</strong> </p></li><li>封装ZooKeeper client与ZooKeeper server之间的连接处理</li><li>提供了一套Fluent风格的操作API</li><li>提供ZooKeeper各种应用场景(recipe, 比如共享锁服务, 集群领导选举机制)的抽象封装</li></ul><h3 id="Java操作api"><a href="#Java操作api" class="headerlink" title="Java操作api"></a>Java操作api</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>CuratorFramework<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>CuratorFrameworkFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>recipes<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>InterProcessMutex<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>retry<span class="token punctuation">.</span>ExponentialBackoffRetry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>CreateMode<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Stat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *  Curator主要解决了三类问题    1.封装ZooKeeper client与ZooKeeper server之间的连接处理    2.提供了一套Fluent风格的操作API    3.提供ZooKeeper各种应用场景(recipe, 比如共享锁服务, 集群领导选举机制)的抽象封装 * @author qxw * @data 2018年8月14日下午2:08:51 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CuratorAp</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Curator客户端     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CuratorFramework client <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 集群模式则是多个ip     */</span><span class="token comment" spellcheck="true">//    private static final String zkServerIps = "192.168.10.124:2182,192.168.10.124:2183,192.168.10.124:2184";</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String zkServerIps <span class="token operator">=</span> <span class="token string">"127.0.0.1:2181"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CuratorFramework <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>client<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>CuratorAp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>client<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//通过工程创建连接</span>                       client<span class="token operator">=</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span>zkServerIps<span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">connectionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">///连接超时时间</span>                               <span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 设定会话时间</span>                               <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExponentialBackoffRetry</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 重试策略：初试时间为1s 重试10次</span><span class="token comment" spellcheck="true">//                               .namespace("super")  // 设置命名空间以及开始建立连接</span>                               <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//开启连接</span>                         client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//分布锁</span>                      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> client<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建节点   不加withMode默认为持久类型节点     * @param path  节点路径     * @param value  值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">create</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>            <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建节点      * @param path  节点路径     * @param value  值     * @param modeType 节点类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">create</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String value<span class="token punctuation">,</span>String modeType<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//持久型节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//临时节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//持久类型顺序性节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT_SEQUENTIAL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//临时类型顺序性节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取单个节点     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getData</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *获取字节点     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getChildren</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 修改节点值     * @param path     * @param valu     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">setData</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String valu<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>valu<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除节点     * @param path     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">delete</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">guaranteed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deletingChildrenIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 检测节点是否存在     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span>  <span class="token function">checkExists</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Stat s<span class="token operator">=</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token operator">==</span>null<span class="token operator">?</span> <span class="token boolean">false</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 分布式锁 对象     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> InterProcessMutex <span class="token function">getLock</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        InterProcessMutex lock<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InterProcessMutex</span><span class="token punctuation">(</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span>  lock<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        if(checkExists("/qxw")){</span><span class="token comment" spellcheck="true">//            delete("/qxw");</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        System.out.println("创建节点："+create("/qxw/q1", "苏打水法萨芬撒"));</span><span class="token comment" spellcheck="true">//        System.out.println("创建节点："+create("/qxw/q2", "苏打水法萨芬撒"));</span><span class="token comment" spellcheck="true">//        System.out.println("创建节点："+create("/qxw/q3", "苏打水法萨芬撒"));</span><span class="token comment" spellcheck="true">//        </span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        </span><span class="token comment" spellcheck="true">//        ExecutorService pool = Executors.newCachedThreadPool();</span><span class="token comment" spellcheck="true">//        getConnection().create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).inBackground(new BackgroundCallback() {</span><span class="token comment" spellcheck="true">//            public void processResult(CuratorFramework cf, CuratorEvent ce) throws Exception {</span><span class="token comment" spellcheck="true">//                System.out.println("code:" + ce.getResultCode());</span><span class="token comment" spellcheck="true">//                System.out.println("type:" + ce.getType());</span><span class="token comment" spellcheck="true">//                System.out.println("线程为:" + Thread.currentThread().getName());</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//        }, pool)</span><span class="token comment" spellcheck="true">//        .forPath("/super/qxw/q4","q4内容".getBytes());</span><span class="token comment" spellcheck="true">//        </span><span class="token comment" spellcheck="true">//        System.out.println("读取节点： "+getData("/qxw"));</span><span class="token comment" spellcheck="true">//        System.out.println("读取字节点："+getChildren("/qxw").toString());</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 分布锁演示     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        <span class="token keyword">final</span> InterProcessMutex lock<span class="token operator">=</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"/lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> CountDownLatch c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService pool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                                c<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//加锁</span>                        lock<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"___"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            lock<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CountDownLatch执行完"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="zookeeper-集群的-监控图形化页面"><a href="#zookeeper-集群的-监控图形化页面" class="headerlink" title="zookeeper 集群的 监控图形化页面"></a>zookeeper 集群的 监控图形化页面</h3><p><a href="https://gitee.com/crystony/zookeeper-web" target="_blank" rel="noopener">https://gitee.com/crystony/zookeeper-web</a></p><p>如果你是gradle用户(2.0以上),请直接执行以下命令运行项目：</p><pre><code>gradle jettyRun</code></pre><p>如果你没使用gralde,执行项目跟路径下的脚本,linux/windows用户执行</p><pre><code>gradlew/gradlew.bat jettyRun</code></pre><p>自动下载gralde完成后,会自动使用jetty启动项目</p><p>如果想将项目导入IDE调试,eclipse用户执行</p><pre><code> gradlew/gradlew.bat eclipse</code></pre><p>idea用户执行</p><pre><code>gradlew/gradlew.bat idea</code></pre><h3 id="zookeeper分布式锁原理"><a href="#zookeeper分布式锁原理" class="headerlink" title="zookeeper分布式锁原理"></a>zookeeper分布式锁原理</h3><p>分布式锁主要用于在分布式环境中保护跨进程、跨主机、跨网络的共享资源实现互斥访问，以达到保证数据的一致性。<br><img src="https://images.gitee.com/uploads/images/2018/0815/212252_831ce4eb_1478371.png" alt="输入图片说明" title="屏幕截图.png"></p><p>左边的整个区域表示一个Zookeeper集群，locker是Zookeeper的一个持久节点，node_1、node_2、node_3是locker这个持久节点下面的临时顺序节点。client_1、client_2、client_n表示多个客户端，Service表示需要互斥访问的共享资源。</p><p> <strong>分布式锁获取思路</strong> </p><ol><li>在获取分布式锁的时候在locker节点下创建临时顺序节点，释放锁的时候删除该临时节点。</li><li>客户端调用createNode方法在locker下创建临时顺序节点，然后调用getChildren(“locker”)来获取locker下面的所有子节点，注意此时不用设置任何Watcher。</li><li>客户端获取到所有的子节点path之后，如果发现自己创建的子节点序号最小，那么就认为该客户端获取到了锁。</li><li>如果发现自己创建的节点并非locker所有子节点中最小的，说明自己还没有获取到锁，此时客户端需要找到比自己小的那个节点，然后对其调用exist()方法，同时对其注册事件监听器。</li><li>之后，等待它释放锁，也就是等待获取到锁的那个客户端B把自己创建的那个节点删除。，则客户端A的Watcher会收到相应通知，此时再次判断自己创建的节点是否是locker子节点中序号最小的，如果是则获取到了锁，如果不是则重复以上步骤继续获取到比自己小的一个节点并注册监听。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper客户端Curator入门</title>
      <link href="/2018/08/28/java/apache-curator-ru-men/"/>
      <url>/2018/08/28/java/apache-curator-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="Zookeeper客户端（Apache-Curator）"><a href="#Zookeeper客户端（Apache-Curator）" class="headerlink" title="Zookeeper客户端（Apache Curator）"></a>Zookeeper客户端（Apache Curator）</h3><ul><li>zookeeper自带的客户端是官方提供的，比较底层、使用起来写代码麻烦、不够直接。</li><li>Apache Curator是Apache的开源项目，封装了zookeeper自带的客户端，使用相对简便，易于使用。</li><li>zkclient是另一个开源的ZooKeeper客户端，其地址：<a href="https://github.com/adyliu/zkclient生产环境不推荐使用。" target="_blank" rel="noopener">https://github.com/adyliu/zkclient生产环境不推荐使用。</a><br>   <strong>Curator主要解决了三类问题</strong> </li><li>封装ZooKeeper client与ZooKeeper server之间的连接处理</li><li>提供了一套Fluent风格的操作API</li><li>提供ZooKeeper各种应用场景(recipe, 比如共享锁服务, 集群领导选举机制)的抽象封装</li></ul><h3 id="Java操作api"><a href="#Java操作api" class="headerlink" title="Java操作api"></a>Java操作api</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>CuratorFramework<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>CuratorFrameworkFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>recipes<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>InterProcessMutex<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>retry<span class="token punctuation">.</span>ExponentialBackoffRetry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>CreateMode<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Stat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *  Curator主要解决了三类问题    1.封装ZooKeeper client与ZooKeeper server之间的连接处理    2.提供了一套Fluent风格的操作API    3.提供ZooKeeper各种应用场景(recipe, 比如共享锁服务, 集群领导选举机制)的抽象封装 * @author qxw * @data 2018年8月14日下午2:08:51 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CuratorAp</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Curator客户端     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CuratorFramework client <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 集群模式则是多个ip     */</span><span class="token comment" spellcheck="true">//    private static final String zkServerIps = "192.168.10.124:2182,192.168.10.124:2183,192.168.10.124:2184";</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String zkServerIps <span class="token operator">=</span> <span class="token string">"127.0.0.1:2181"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CuratorFramework <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>client<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>CuratorAp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>client<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//通过工程创建连接</span>                       client<span class="token operator">=</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span>zkServerIps<span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">connectionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">///连接超时时间</span>                               <span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 设定会话时间</span>                               <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExponentialBackoffRetry</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 重试策略：初试时间为1s 重试10次</span><span class="token comment" spellcheck="true">//                               .namespace("super")  // 设置命名空间以及开始建立连接</span>                               <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//开启连接</span>                         client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//分布锁</span>                      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> client<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建节点   不加withMode默认为持久类型节点     * @param path  节点路径     * @param value  值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">create</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>            <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建节点      * @param path  节点路径     * @param value  值     * @param modeType 节点类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">create</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String value<span class="token punctuation">,</span>String modeType<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//持久型节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//临时节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//持久类型顺序性节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT_SEQUENTIAL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//临时类型顺序性节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取单个节点     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getData</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *获取字节点     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getChildren</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 修改节点值     * @param path     * @param valu     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">setData</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String valu<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>valu<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除节点     * @param path     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">delete</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">guaranteed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deletingChildrenIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 检测节点是否存在     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span>  <span class="token function">checkExists</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Stat s<span class="token operator">=</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token operator">==</span>null<span class="token operator">?</span> <span class="token boolean">false</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 分布式锁 对象     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> InterProcessMutex <span class="token function">getLock</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        InterProcessMutex lock<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InterProcessMutex</span><span class="token punctuation">(</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span>  lock<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        if(checkExists("/qxw")){</span><span class="token comment" spellcheck="true">//            delete("/qxw");</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        System.out.println("创建节点："+create("/qxw/q1", "苏打水法萨芬撒"));</span><span class="token comment" spellcheck="true">//        System.out.println("创建节点："+create("/qxw/q2", "苏打水法萨芬撒"));</span><span class="token comment" spellcheck="true">//        System.out.println("创建节点："+create("/qxw/q3", "苏打水法萨芬撒"));</span><span class="token comment" spellcheck="true">//        </span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        </span><span class="token comment" spellcheck="true">//        ExecutorService pool = Executors.newCachedThreadPool();</span><span class="token comment" spellcheck="true">//        getConnection().create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).inBackground(new BackgroundCallback() {</span><span class="token comment" spellcheck="true">//            public void processResult(CuratorFramework cf, CuratorEvent ce) throws Exception {</span><span class="token comment" spellcheck="true">//                System.out.println("code:" + ce.getResultCode());</span><span class="token comment" spellcheck="true">//                System.out.println("type:" + ce.getType());</span><span class="token comment" spellcheck="true">//                System.out.println("线程为:" + Thread.currentThread().getName());</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//        }, pool)</span><span class="token comment" spellcheck="true">//        .forPath("/super/qxw/q4","q4内容".getBytes());</span><span class="token comment" spellcheck="true">//        </span><span class="token comment" spellcheck="true">//        System.out.println("读取节点： "+getData("/qxw"));</span><span class="token comment" spellcheck="true">//        System.out.println("读取字节点："+getChildren("/qxw").toString());</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 分布锁演示     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        <span class="token keyword">final</span> InterProcessMutex lock<span class="token operator">=</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"/lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> CountDownLatch c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService pool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                                c<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//加锁</span>                        lock<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"___"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            lock<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CountDownLatch执行完"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="zookeeper-集群的-监控图形化页面"><a href="#zookeeper-集群的-监控图形化页面" class="headerlink" title="zookeeper 集群的 监控图形化页面"></a>zookeeper 集群的 监控图形化页面</h3><p><a href="https://gitee.com/crystony/zookeeper-web" target="_blank" rel="noopener">https://gitee.com/crystony/zookeeper-web</a></p><p>如果你是gradle用户(2.0以上),请直接执行以下命令运行项目：</p><pre><code>gradle jettyRun</code></pre><p>如果你没使用gralde,执行项目跟路径下的脚本,linux/windows用户执行</p><pre><code>gradlew/gradlew.bat jettyRun</code></pre><p>自动下载gralde完成后,会自动使用jetty启动项目</p><p>如果想将项目导入IDE调试,eclipse用户执行</p><pre><code> gradlew/gradlew.bat eclipse</code></pre><p>idea用户执行</p><pre><code>gradlew/gradlew.bat idea</code></pre><h3 id="zookeeper分布式锁原理"><a href="#zookeeper分布式锁原理" class="headerlink" title="zookeeper分布式锁原理"></a>zookeeper分布式锁原理</h3><p>分布式锁主要用于在分布式环境中保护跨进程、跨主机、跨网络的共享资源实现互斥访问，以达到保证数据的一致性。<br><img src="https://user-gold-cdn.xitu.io/2019/1/16/1685474a530c21c5?w=607&amp;h=481&amp;f=png&amp;s=33332" alt="输入图片说明" title="屏幕截图.png"></p><p>左边的整个区域表示一个Zookeeper集群，locker是Zookeeper的一个持久节点，node_1、node_2、node_3是locker这个持久节点下面的临时顺序节点。client_1、client_2、client_n表示多个客户端，Service表示需要互斥访问的共享资源。</p><p> <strong>分布式锁获取思路</strong> </p><ol><li>在获取分布式锁的时候在locker节点下创建临时顺序节点，释放锁的时候删除该临时节点。</li><li>客户端调用createNode方法在locker下创建临时顺序节点，然后调用getChildren(“locker”)来获取locker下面的所有子节点，注意此时不用设置任何Watcher。</li><li>客户端获取到所有的子节点path之后，如果发现自己创建的子节点序号最小，那么就认为该客户端获取到了锁。</li><li>如果发现自己创建的节点并非locker所有子节点中最小的，说明自己还没有获取到锁，此时客户端需要找到比自己小的那个节点，然后对其调用exist()方法，同时对其注册事件监听器。</li><li>之后，等待它释放锁，也就是等待获取到锁的那个客户端B把自己创建的那个节点删除。，则客户端A的Watcher会收到相应通知，此时再次判断自己创建的节点是否是locker子节点中序号最小的，如果是则获取到了锁，如果不是则重复以上步骤继续获取到比自己小的一个节点并注册监听。</li></ol>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成ElasticSearch6.2</title>
      <link href="/2018/08/28/spring-xi-lie/springboot-ji-cheng-elasticsearch6-2/"/>
      <url>/2018/08/28/spring-xi-lie/springboot-ji-cheng-elasticsearch6-2/</url>
      
        <content type="html"><![CDATA[<h2 id="elasticsearch-Java-High-Level-REST-Client-api"><a href="#elasticsearch-Java-High-Level-REST-Client-api" class="headerlink" title="elasticsearch (Java High Level REST Client) api"></a>elasticsearch (Java High Level REST Client) api</h2><p>Java高级REST客户端在Java低级REST客户端之上工作。它的主要目标是公开API特定的方法，接受请求对象作为参数并返回响应对象，以便客户端自己处理请求编组和响应非编组。</p><p>可以同步或异步调用每个API。同步方法返回响应对象，而名称以async后缀结尾的异步方法需要一旦收到响应或错误就通知（在由低级客户端管理的线程池上）的侦听器参数。</p><p>Java高级REST客户端依赖于Elasticsearch核心项目。它接受与the相同的请求参数，TransportClient并返回相同的响应对象。</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>Java高级REST客户端需要Java 1.8并依赖于Elasticsearch核心项目。客户端版本与客户端开发的Elasticsearch版本相同。它接受与the相同的请求参数，TransportClient 并返回相同的响应对象</p><h2 id="代码初始化方式"><a href="#代码初始化方式" class="headerlink" title="代码初始化方式"></a>代码初始化方式</h2><pre class=" language-java"><code class="language-java">RestHighLevelClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>        RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9201</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>IDE新建SpringBoot项目<br>pom.xml配置</p><pre class=" language-java"><code class="language-java">  <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>elasticsearch<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>elasticsearch<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">6.2</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>elasticsearch<span class="token operator">-</span>rest<span class="token operator">-</span>high<span class="token operator">-</span>level<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">6.2</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>elasticsearch<span class="token operator">-</span>rest<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">6.2</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>elasticsearch<span class="token operator">-</span>rest<span class="token operator">-</span>client<span class="token operator">-</span>sniffer<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">6.2</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>fastjson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">16</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>application.properties</p><pre class=" language-bash"><code class="language-bash">server.port<span class="token operator">=</span>80server.servlet.context-path<span class="token operator">=</span>/es-bootspring.data.elasticsearch.cluster-nodes<span class="token operator">=</span>192.168.1.191:9200</code></pre><p>数据配置，进行初始化操作</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  elasticsearch spring-data 目前支持的最高版本为5.5 所以需要自己注入生成客户端 * * 数据配置，进行初始化操作 * @author qinxuewu * @version 1.00 * @time 28/8/2018下午 5:54 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ESConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>RestHighLevelClient<span class="token operator">></span><span class="token punctuation">,</span> InitializingBean<span class="token punctuation">,</span> DisposableBean <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOG <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ESConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.data.elasticsearch.cluster-nodes}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String clusterNodes<span class="token punctuation">;</span>    <span class="token keyword">private</span> RestHighLevelClient restHighLevelClient<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 控制Bean的实例化过程     *     * @return     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> RestHighLevelClient <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> restHighLevelClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取接口返回的实例的class     *     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> RestHighLevelClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>restHighLevelClient <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                restHighLevelClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">final</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error closing ElasticSearch client: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        restHighLevelClient <span class="token operator">=</span> <span class="token function">buildClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> RestHighLevelClient <span class="token function">buildClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            restHighLevelClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span>clusterNodes<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>clusterNodes<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> restHighLevelClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EsDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOG <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>EsDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestHighLevelClient client<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 判断索引是否存在     * @param index 索引(关系型数据库)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isIndexExist</span><span class="token punctuation">(</span>String index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            GetRequest getRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            getRequest<span class="token punctuation">.</span><span class="token function">fetchSourceContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FetchSourceContext</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            getRequest<span class="token punctuation">.</span><span class="token function">storedFields</span><span class="token punctuation">(</span><span class="token string">"_none_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> exists <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>getRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exists<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"判断索引是否存在是否存在异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断索引是否存在     * @param index  索引(关系型数据库)     * @param type   类型(关系型数据表)     * @param id     数据ID     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isIndexExist</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span>String type<span class="token punctuation">,</span>String id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            GetRequest getRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            getRequest<span class="token punctuation">.</span><span class="token function">fetchSourceContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FetchSourceContext</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            getRequest<span class="token punctuation">.</span><span class="token function">storedFields</span><span class="token punctuation">(</span><span class="token string">"_none_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> exists <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>getRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exists<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"判断索引是否存在是否存在异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建索引     * @param index  索引(关系型数据库)     * @param type   类型(关系型数据表)     * @param obj    数据源     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createIndexOne</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span> JSONObject obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            IndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"创建索引异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 创建索引         * @param index  索引(关系型数据库)         * @param type   类型(关系型数据表)         * @param id     数据ID         * @param obj    数据源         * @return         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createIndexOne</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span>String id<span class="token punctuation">,</span> JSONObject obj<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                IndexRequest request<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>                client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"创建索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 批量创建索         * @param index  索引(关系型数据库)         * @param type   类型(关系型数据表)         * @param list   数据源         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bacthIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>JSONObject<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>IndexRequest<span class="token operator">></span> requests <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                    requests<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">generateNewsRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                BulkRequest bulkRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>IndexRequest indexRequest <span class="token operator">:</span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bulkRequest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>indexRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>bulkRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"批量创建索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IndexRequest <span class="token function">generateNewsRequest</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span>JSONObject obj<span class="token punctuation">)</span><span class="token punctuation">{</span>            IndexRequest indexRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>            indexRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> indexRequest<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 删除索引         * @param index  索引(关系型数据库)         * @param type   类型(关系型数据表)         * @param id     数据ID         * @return         */</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deleteIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span>String type<span class="token punctuation">,</span>String id<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                DeleteRequest request<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"删除索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span>  <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 修改索引         * @param index  索引(关系型数据库)         * @param type   类型(关系型数据表)         * @param id     数据ID         * @param obj    数据源         * @return         */</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">updateIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span>String id<span class="token punctuation">,</span> JSONObject obj<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                UpdateRequest updateRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                updateRequest<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>                client<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>updateRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"修改索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span>  <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 查询单条索引         * @param index  索引(关系型数据库)         * @param type   类型(关系型数据表)         * @param id     数据ID         */</span>        <span class="token keyword">public</span> GetResponse <span class="token function">findById</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span>String id<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                GetRequest getRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                GetResponse getResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>getRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> getResponse<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"查询单条索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 查询单条索引         * @param index     索引(关系型数据库)         * @param type      类型(关系型数据表)         * @param id        数据ID         * @param includes  显示字段         * @param excludes  排除字段         */</span>        <span class="token keyword">public</span> GetResponse <span class="token function">findById</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span>String id<span class="token punctuation">,</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> includes<span class="token punctuation">,</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> excludes<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                GetRequest getRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                FetchSourceContext fetchSourceContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FetchSourceContext</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> includes<span class="token punctuation">,</span> excludes<span class="token punctuation">)</span><span class="token punctuation">;</span>                getRequest<span class="token punctuation">.</span><span class="token function">fetchSourceContext</span><span class="token punctuation">(</span>fetchSourceContext<span class="token punctuation">)</span><span class="token punctuation">;</span>                GetResponse getResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>getRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span>  getResponse<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"查询单条索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 查询列表索引         * @param index        索引(关系型数据库)         * @param type         类型(关系型数据表)         * @return         */</span>        <span class="token keyword">public</span> SearchResponse <span class="token function">getAllIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span>String type<span class="token punctuation">)</span><span class="token punctuation">{</span>            SearchSourceBuilder sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            searchRequest<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>            searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> response<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"查询列表索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span>  null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查询列表索引     * @param index        索引(关系型数据库)     * @param type         类型(关系型数据表)     * @param includes     显示字段     * @param excludes     排除字段     * @return     */</span>    <span class="token keyword">public</span> SearchResponse <span class="token function">getAllIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> includes<span class="token punctuation">,</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> excludes<span class="token punctuation">)</span><span class="token punctuation">{</span>        SearchSourceBuilder sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">fetchSource</span><span class="token punctuation">(</span>includes<span class="token punctuation">,</span>excludes<span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        searchRequest<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> response<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"查询列表索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span>  null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 查询列表索引         * @param index        索引(关系型数据库)         * @param type         类型(关系型数据表)         * @param sourceBuilder  查询条件         * @return         */</span>        <span class="token keyword">public</span> SearchResponse <span class="token function">getAllIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span> SearchSourceBuilder sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">{</span>            SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            searchRequest<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>            searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> response<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"查询列表索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span>  null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>创建索引</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RestHighLevelClient client<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> EsDao esDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createIndexOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//必须为小写</span>            String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>            JSONObject obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"qxw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String <span class="token punctuation">[</span><span class="token punctuation">]</span> tags<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"标签1"</span><span class="token punctuation">,</span><span class="token string">"标签2"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"tags"</span><span class="token punctuation">,</span>tags<span class="token punctuation">)</span><span class="token punctuation">;</span>            esDao<span class="token punctuation">.</span><span class="token function">createIndexOne</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>批量创建索引</strong></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bacthIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//必须为小写</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>JSONObject<span class="token operator">></span>  list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JSONObject obj<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"qxw"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        esDao<span class="token punctuation">.</span><span class="token function">bacthIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>根据ID查询</strong></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//必须为小写</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        String id<span class="token operator">=</span><span class="token string">"NWrCg2UBU-HvVB1XZxe1"</span><span class="token punctuation">;</span>        String result<span class="token operator">=</span>esDao<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>修改操作</strong></p><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//必须为小写</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        String id<span class="token operator">=</span><span class="token string">"NWrCg2UBU-HvVB1XZxe1"</span><span class="token punctuation">;</span>        JSONObject obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span><span class="token string">"2018-08-29 00:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        esDao<span class="token punctuation">.</span><span class="token function">updateIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>根据ID查询 指定过滤字段</strong></p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 根据ID查询     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//必须为小写</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        String id<span class="token operator">=</span><span class="token string">"NWrCg2UBU-HvVB1XZxe1"</span><span class="token punctuation">;</span>        GetResponse res<span class="token operator">=</span>esDao<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果index："</span><span class="token operator">+</span>res<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果type："</span><span class="token operator">+</span>res<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果id："</span><span class="token operator">+</span>res<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果source："</span><span class="token operator">+</span>res<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**     * 根据ID查询 指定过滤字段     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findByIdexcludes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//必须为小写</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        String id<span class="token operator">=</span><span class="token string">"NWrCg2UBU-HvVB1XZxe1"</span><span class="token punctuation">;</span>        String <span class="token punctuation">[</span><span class="token punctuation">]</span> includes<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不过滤</span>        String <span class="token punctuation">[</span><span class="token punctuation">]</span> excludes<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"tags"</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//过滤字段</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果："</span><span class="token operator">+</span>esDao<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">,</span>includes<span class="token punctuation">,</span>excludes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>查询所有</strong></p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">getAllIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//必须为小写</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        String result<span class="token operator">=</span>esDao<span class="token punctuation">.</span><span class="token function">getAllIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        String <span class="token punctuation">[</span><span class="token punctuation">]</span> includes<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不过滤</span>        String <span class="token punctuation">[</span><span class="token punctuation">]</span> excludes<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"tags"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//过滤字段</span>        String result2<span class="token operator">=</span>esDao<span class="token punctuation">.</span><span class="token function">getAllIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>includes<span class="token punctuation">,</span>excludes<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定过滤字段查询结果："</span><span class="token operator">+</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>条件查询 /匹配所有</strong></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">getAllIndexByFiled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 使用QueryBuilder         * termQuery("key", obj) 完全匹配         * termsQuery("key", obj1, obj2..)   一次匹配多个值         * matchQuery("key", Obj) 单个匹配, field不支持通配符, 前缀具高级特性         * multiMatchQuery("text", "field1", "field2"..);  匹配多个字段, field有通配符忒行         * matchAllQuery();         匹配所有文件         */</span>        <span class="token comment" spellcheck="true">//匹配所有文件</span>        SearchSourceBuilder searchSourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        searchSourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result<span class="token operator">=</span>esDao<span class="token punctuation">.</span><span class="token function">getAllIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>searchSourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配所有查询结果："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>模糊、排序查询</strong></p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**     * 条件查询     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">getAllIndexByFiled3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        SearchSourceBuilder search3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        MatchQueryBuilder matchQueryBuilder = new MatchQueryBuilder("name","qxw");</span>         <span class="token comment" spellcheck="true">//在匹配查询上启用模糊匹配</span><span class="token comment" spellcheck="true">//        matchQueryBuilder.fuzziness(Fuzziness.AUTO);</span><span class="token comment" spellcheck="true">//        //在匹配查询上设置前缀长度选项</span><span class="token comment" spellcheck="true">//        matchQueryBuilder.prefixLength(3); </span><span class="token comment" spellcheck="true">//        //设置最大扩展选项以控制查询的模糊过程</span><span class="token comment" spellcheck="true">//        matchQueryBuilder.maxExpansions(10); </span>        <span class="token comment" spellcheck="true">//默认情况下，搜索请求会返回文档的内容,设置fasle不会返回窝</span><span class="token comment" spellcheck="true">//        search3.fetchSource(false);</span>        <span class="token comment" spellcheck="true">//也接受一个或多个通配符模式的数组，以控制以更精细的方式包含或排除哪些字段</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> includeFields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"tags"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> excludeFields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"_type"</span><span class="token punctuation">,</span><span class="token string">"_index"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        search3<span class="token punctuation">.</span><span class="token function">fetchSource</span><span class="token punctuation">(</span>includeFields<span class="token punctuation">,</span> excludeFields<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定排序</span>        search3<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FieldSortBuilder</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>SortOrder<span class="token punctuation">.</span>DESC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//启用模糊查询 fuzziness(Fuzziness.AUTO)</span><span class="token comment" spellcheck="true">//        search3.query(QueryBuilders.matchQuery("name","qxw").fuzziness(Fuzziness.AUTO));</span>        <span class="token comment" spellcheck="true">//模糊查询，?匹配单个字符，*匹配多个字符</span><span class="token comment" spellcheck="true">//        search3.query(QueryBuilders.wildcardQuery("name","*qxw*"));</span>        <span class="token comment" spellcheck="true">//搜索name中或tags  中包含有qxw的文档（必须与music一致)</span><span class="token comment" spellcheck="true">//        search3.query(QueryBuilders.multiMatchQuery("qxw","name","tags"));</span>        <span class="token comment" spellcheck="true">//多条件查询 相当于and</span>        BoolQueryBuilder boolQueryBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询age=32</span>        TermQueryBuilder termQuery<span class="token operator">=</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//匹配多个值  相当于sql 中in(....)操作</span>        TermsQueryBuilder termQuerys<span class="token operator">=</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termsQuery</span><span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span><span class="token string">"PWrIg2UBU-HvVB1XzRce"</span><span class="token punctuation">,</span><span class="token string">"XWqYhGUBU-HvVB1Xahct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//模糊查询name中包含qxw</span>        WildcardQueryBuilder queryBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">wildcardQuery</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"*qxw*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>termQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>queryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>termQuerys<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        //设置from确定结果索引的选项以开始搜索。默认为0。</span><span class="token comment" spellcheck="true">//        search3.from(0);</span><span class="token comment" spellcheck="true">//        //设置size确定要返回的搜索命中数的选项。默认为10。</span><span class="token comment" spellcheck="true">//        search3.size(1);</span>        search3<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>boolQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchResponse result<span class="token operator">=</span>esDao<span class="token punctuation">.</span><span class="token function">getAllIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>search3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解析SearchHits</span>        SearchHits hits <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> totalHits <span class="token operator">=</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> maxScore <span class="token operator">=</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchHit<span class="token punctuation">[</span><span class="token punctuation">]</span> searchHits <span class="token operator">=</span> hits<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> searchHits<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String indexs <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String types <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String ids <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sourceAsString <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> sourceAsMap <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id ："</span><span class="token operator">+</span>ids<span class="token operator">+</span>sourceAsMap<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果："</span><span class="token operator">+</span>esDao<span class="token punctuation">.</span><span class="token function">getAllIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>search3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h2><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">AggregationsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          String index<span class="token operator">=</span><span class="token string">"emptydb"</span><span class="token punctuation">;</span>          String  type<span class="token operator">=</span><span class="token string">"empty"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        List&lt;JSONObject>  list=new ArrayList&lt;>();</span><span class="token comment" spellcheck="true">//        JSONObject obj=new JSONObject();</span><span class="token comment" spellcheck="true">//        obj.put("name","小明"); obj.put("age",25); obj.put("salary",10000); obj.put("detpty","技术部");</span><span class="token comment" spellcheck="true">//        list.add(obj);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        JSONObject obj2=new JSONObject();</span><span class="token comment" spellcheck="true">//        obj2.put("name","小蛋"); obj2.put("age",22); obj2.put("salary",5000); obj2.put("detpty","技术部");</span><span class="token comment" spellcheck="true">//        list.add(obj2);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        JSONObject obj3=new JSONObject();</span><span class="token comment" spellcheck="true">//        obj3.put("name","张三"); obj3.put("age",24); obj3.put("salary",300); obj3.put("detpty","销售部");</span><span class="token comment" spellcheck="true">//        list.add(obj3);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        JSONObject obj4=new JSONObject();</span><span class="token comment" spellcheck="true">//        obj4.put("name","李四"); obj4.put("age",22); obj4.put("salary",4000); obj4.put("detpty","采购部");</span><span class="token comment" spellcheck="true">//        list.add(obj4);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//          //添加测试数据</span><span class="token comment" spellcheck="true">//        esDao.bacthIndex(index,type,list);</span>        SearchSourceBuilder searchSourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        searchRequest<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>searchSourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算所有员工的平均年龄</span>        <span class="token comment" spellcheck="true">//terms(查询字段别名).field(分组字段)</span>        searchSourceBuilder<span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span>AggregationBuilders<span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"average_age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchResponse res<span class="token operator">=</span>client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"聚合操作查询结果："</span><span class="token operator">+</span>res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Aggregations aggregations <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getAggregations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Aggregation<span class="token operator">></span> aggregationMap <span class="token operator">=</span> aggregations<span class="token punctuation">.</span><span class="token function">getAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"聚合操作解析："</span><span class="token operator">+</span>aggregationMap<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch安装及java Api使用</title>
      <link href="/2018/08/27/java/elasticsearch-an-zhuang-ji-java-api-shi-yong/"/>
      <url>/2018/08/27/java/elasticsearch-an-zhuang-ji-java-api-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="ElasticSearch-简介"><a href="#ElasticSearch-简介" class="headerlink" title="ElasticSearch 简介"></a>ElasticSearch 简介</h3><p>ElasticSearch是一个高度可扩展的开源搜索引擎并使用REST API，所以您值得拥有。 在本教程中，将介绍开始使用ElasticSearch的一些主要概念。</p><h3 id="下载并运行ElasticSearch"><a href="#下载并运行ElasticSearch" class="headerlink" title="下载并运行ElasticSearch"></a>下载并运行ElasticSearch</h3><p>ElasticSearch可以从elasticsearch.org下载对应的文件格式，如ZIP和TAR.GZ。下载并提取一个运行它的软件包之后不会容易得多，需要提前安装Java运行时环境。<br>下载链接 <a href="https://www.elastic.co/products/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/products/elasticsearch</a></p><h3 id="在Windows上运行ElasticSearch"><a href="#在Windows上运行ElasticSearch" class="headerlink" title="在Windows上运行ElasticSearch"></a>在Windows上运行ElasticSearch</h3><ul><li>从命令窗口运行位于bin文件夹中的elasticsearch.bat。这将会启动ElasticSearch在控制台的前台运行，这意味着我们可在控制台中看到运行信息或一些错误信息，并可以使用CTRL + C停止或关闭它。</li><li>在启动过程中，ElasticSearch的实例运行会占用大量的内存，所以在这一过程中，电脑会变得比较慢，需要耐心等待，启动加载完成后电脑就可以正常使用了</li><li>当ElasticSearch的实例并运行，您可以使用<a href="http://localhost:9200检查是否运行成功" target="_blank" rel="noopener">http://localhost:9200检查是否运行成功</a></li></ul><h3 id="Linux安装ElasticSearch"><a href="#Linux安装ElasticSearch" class="headerlink" title="Linux安装ElasticSearch"></a><a href="https://blog.csdn.net/weixin_41615494/article/details/79591335" target="_blank" rel="noopener">Linux安装ElasticSearch</a></h3><p>访问elasticSearch官网地址 <a href="https://www.elastic.co/" target="_blank" rel="noopener">https://www.elastic.co/</a><br>下载指定版本的安装包：elasticsearch-6.1.1.tar.gz,上传至指定目录/usr/local/elasticsearch</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#解压</span><span class="token function">tar</span> -zxvf elasticsearch-6.1.1.tar.gz<span class="token comment" spellcheck="true">#创建数据存储目录</span><span class="token function">mkdir</span> -p /usr/local/elasticsearch/data<span class="token comment" spellcheck="true">#创建日志存储目录</span><span class="token function">mkdir</span> -p /usr/local/elasticsearch/logs<span class="token comment" spellcheck="true">#进入到es安装目录下的config文件夹中，修改elasticsearch.yml 文件</span><span class="token comment" spellcheck="true">#配置es的集群名称，默认是elasticsearch，es会自动发现在同一网段下的es，如果在同一网段下有多个集群，就可以用这个属性来区分不同的集群。</span>cluster.name: qxw-application<span class="token comment" spellcheck="true">#节点名称</span>node.name: node-1 <span class="token comment" spellcheck="true">#设置索引数据的存储路径</span>path.data: /usr/local/elasticsearch/data <span class="token comment" spellcheck="true">#设置日志的存储路径</span>path.logs: /usr/local/elasticsearch/logs <span class="token comment" spellcheck="true">#设置当前的ip地址,通过指定相同网段的其他节点会加入该集群中</span>network.host: 192.168.1.191<span class="token comment" spellcheck="true">#设置对外服务的http端口</span>http.port: 9200 <span class="token comment" spellcheck="true">#设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点</span>discovery.zen.ping.unicast.hosts: <span class="token punctuation">[</span><span class="token string">"node-1"</span><span class="token punctuation">]</span></code></pre><p><strong>修改host 文件，执行命令 vi /etc/hosts</strong><br><img src="https://user-gold-cdn.xitu.io/2019/1/10/1683571a09244fc1?w=575&amp;h=116&amp;f=png&amp;s=8326" alt="输入图片说明" title="屏幕截图.png"></p><p> <strong>因为安全问题elasticsearch 不让用root用户直接运行，所以要创建新用户。</strong> </p><pre><code>useradd espasswd es再输入两次密码(自定义)#给新创建用户文件夹执行权限chown -R es:es /usr/local/elasticsearch切换es用户：su es启动集群命令：cd  /usr/local/elasticsearchbin/elasticsearch</code></pre><p> <strong>在es用户下启动时报错</strong><br><img src="https://user-gold-cdn.xitu.io/2019/1/10/1683571a092803e1?w=1210&amp;h=240&amp;f=png&amp;s=66859" alt="输入图片说明" title="屏幕截图.png"></p><pre><code>原因：Centos6不支持SecComp，而ES默认bootstrap.system_call_filter为true进行检测，所以导致检测失败，失败后直接导致ES不能启动详见 ：https://github.com/elastic/elasticsearch/issues/22899解决方案：在elasticsearch.yml中新增配置bootstrap.system_call_filter，设为false。bootstrap.system_call_filter: false</code></pre><p><img src="https://user-gold-cdn.xitu.io/2019/1/10/1683571a09103c26?w=1084&amp;h=129&amp;f=png&amp;s=35384" alt="输入图片说明" title="屏幕截图.png"></p><p> <strong>第一个问题的原因：</strong> </p><pre><code>原因：无法创建本地文件问题,用户最大可创建文件数太小解决方案：切换到root用户，编辑limits.conf配置文件， 添加类似如下内容：vi /etc/security/limits.conf添加如下内容: 注意*不要去掉了* soft nofile 65536* hard nofile 131072备注：* 代表Linux所有用户名称（比如 hadoop）需要保存、退出、重新登录才可生效。</code></pre><p><strong>第二个错误的原因：</strong> </p><pre><code>原因：无法创建本地线程问题,用户最大可创建线程数太小解决方案：切换到root用户，进入limits.d目录下，修改90-nproc.conf 配置文件。vi /etc/security/limits.d/90-nproc.conf找到如下内容：* soft nproc 1024#修改为* soft nproc 4096</code></pre><p><strong>第三个错误的原因：</strong> </p><pre><code>原因：最大虚拟内存太小每次启动机器都手动执行下。root用户执行命令：执行命令：sysctl -w vm.max_map_count=262144查看修改结果命令：sysctl -a|grep vm.max_map_count  看是否已经修改永久性修改策略：echo &quot;vm.max_map_count=262144&quot; &gt;&gt; /etc/sysctl.conf</code></pre><p> <strong>切换到es用户执行:bin/elasticsearch</strong><br>访问：<a href="http://192.168.1.191:9200/" target="_blank" rel="noopener">http://192.168.1.191:9200/</a></p><pre><code>#后台启动[es@localhost elasticsearch-6.4.0]$ ./bin/elasticsearch -d[es@localhost elasticsearch-6.4.0]$ jps27587 Jps27573 Elasticsearch</code></pre><h3 id="elasticsearch-服务安全配置"><a href="#elasticsearch-服务安全配置" class="headerlink" title="elasticsearch 服务安全配置"></a>elasticsearch 服务安全配置</h3><p> <strong>一、目前主要通过插件的形式来控制：</strong> </p><ol><li>常用的插件主要包括：elasticsearch-http-basic，search-guard，shield</li><li>由于shield是收费的暂时还未研究（研究后统一补充）</li><li>search-guard主要用于elasticsearch2.x以后的版本（研究后统一补充）</li><li>elasticsearch-http-basic主要用于elasticsearch1.x的版本</li><li><p>基于目前我们es集群大部分都是1.5.2版本的，所以主要使用http-basic来控制来自http请求的访问。</p><p><strong>二、elasticsearch-http-basic安装：</strong> </p></li><li>下载elasticsearch-http-basic-1.5.1.jar（下载地址：<a href="https://github.com/Asquera/elasticsearch-http-basic/releases）" target="_blank" rel="noopener">https://github.com/Asquera/elasticsearch-http-basic/releases）</a></li><li>在ES的plugins文件夹下新建http-basic文件夹</li><li>把下载的 elasticsearch-http-basic-1.5.1.jar拷贝到新建的http-basic文件夹下</li><li>修改ES的配置文件elasticsearch.yml,在文件末尾添加以下配置：</li></ol><pre><code>配置名                                     默认值                            说明http.basic.enabled                         true                            开关，开启会接管全部HTTP连接http.basic.user                          &quot;admin&quot;                          账号http.basic.password                      &quot;admin_pw&quot;                       密码http.basic.ipwhitelist            [&quot;localhost&quot;, &quot;127.0.0.1&quot;]    白名单内的ip访问不需要通过账号和密码，支持ip和主机名，不支持ip区间或正则http.basic.trusted_proxy_chains    []                                    信任代理列表http.basic.log    false                                              把无授权的访问事件添加到ES的日志http.basic.xforward    &quot;&quot;                                          记载代理路径的header字段名5.重启ES集群目前我们主要通过http.basic.ipwhitelist 白名单 + 用户名、密码来控制外部机器对ES集群的http请求，1.在白名单内的ip列表用户无需验证可直接通过ES节点的ip地址访问ES，白名单外的用户无权访问ES集群2.由于白名单无法控制通过域名的访问，如果要通过域名访问ES必须要通过用户名和密码来访问</code></pre><h3 id="java中使用elastaicsearch-RestHighLevelClient"><a href="#java中使用elastaicsearch-RestHighLevelClient" class="headerlink" title="java中使用elastaicsearch(RestHighLevelClient)"></a>java中使用elastaicsearch(RestHighLevelClient)</h3><p>官方文档可以得知，现在存在至少三种Java客户端。</p><ol><li>Transport Client</li><li>Java High Level REST Client</li><li>Java Low Level Rest Client</li><li>强烈建议ES5及其以后的版本使用Java High Level REST Client</li></ol><p><strong>java High Level REST Client 介绍</strong> </p><ul><li>Java High Level REST Client 是基于Java Low Level REST Client的，每个方法都可以是同步或者异步的。同步方法返回响应对象，而异步方法名以“async”结尾，并需要传入一个监听参数，来确保提醒是否有错误发生。</li><li>Java High Level REST Client需要Java1.8版本和ES。并且ES的版本要和客户端版本一致。和TransportClient接收的参数和返回值是一样的。</li></ul><p>引入maven依赖</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>elasticsearch<span class="token operator">-</span>rest<span class="token operator">-</span>high<span class="token operator">-</span>level<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">6.2</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>Java基础操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestClientTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        index();</span><span class="token comment" spellcheck="true">//        bacthIndex();</span>         <span class="token function">queryTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 插入数据     */</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span>  <span class="token keyword">void</span>  <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//RestHighLevelClient实例需要低级客户端构建器来构建</span>            RestHighLevelClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IndexRequest indexRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span> <span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            JSONObject obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"标题图表题大法师飞洒发顺丰三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span><span class="token string">"2018-08-21 17:43:50"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            indexRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//添加索引</span>            client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>indexRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//http://localhost:9200/demo/demo/_search  浏览器运行查询数据</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 批量插入数据     */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span>  <span class="token function">bacthIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       RestHighLevelClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       List<span class="token operator">&lt;</span>IndexRequest<span class="token operator">></span> requests <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       requests<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">generateNewsRequest</span><span class="token punctuation">(</span><span class="token string">"中印边防军于拉达克举行会晤 强调维护边境和平"</span><span class="token punctuation">,</span> <span class="token string">"2018-01-27T08:34:00Z"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       BulkRequest bulkRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>IndexRequest indexRequest <span class="token operator">:</span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>           bulkRequest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>indexRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>bulkRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>           client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IndexRequest <span class="token function">generateNewsRequest</span><span class="token punctuation">(</span>String title<span class="token punctuation">,</span>String publishTime<span class="token punctuation">)</span><span class="token punctuation">{</span>        IndexRequest indexRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span> <span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JSONObject obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span>publishTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        indexRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> indexRequest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查询操作     * https://blog.csdn.net/paditang/article/details/78802799     * https://blog.csdn.net/A_Story_Donkey/article/details/79667670     * https://www.cnblogs.com/wenbronk/p/6432990.html     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span>  <span class="token function">queryTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        RestHighLevelClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这个sourcebuilder就类似于查询语句中最外层的部分。包括查询分页的起始，</span>        <span class="token comment" spellcheck="true">// 查询语句的核心，查询结果的排序，查询结果截取部分返回等一系列配置</span>        SearchSourceBuilder sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 结果开始处</span>            sourceBuilder<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 查询结果终止处</span>            sourceBuilder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 查询的等待时间</span>            sourceBuilder<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimeValue</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 使用QueryBuilder             * termQuery("key", obj) 完全匹配             * termsQuery("key", obj1, obj2..)   一次匹配多个值             * matchQuery("key", Obj) 单个匹配, field不支持通配符, 前缀具高级特性             * multiMatchQuery("text", "field1", "field2"..);  匹配多个字段, field有通配符忒行             * matchAllQuery();         匹配所有文件             */</span>            MatchQueryBuilder matchQueryBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"费德勒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//分词精确查询</span><span class="token comment" spellcheck="true">//            TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery("tag", "体育");</span><span class="token comment" spellcheck="true">//            // 查询在时间区间范围内的结果  范围查询</span><span class="token comment" spellcheck="true">//            RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery("publishTime");</span><span class="token comment" spellcheck="true">//            rangeQueryBuilder.gte("2018-01-26T08:00:00Z");</span><span class="token comment" spellcheck="true">//            rangeQueryBuilder.lte("2018-01-26T20:00:00Z");</span>            <span class="token comment" spellcheck="true">// 等同于bool，将两个查询合并</span>            BoolQueryBuilder boolBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            boolBuilder<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>matchQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            boolBuilder.must(termQueryBuilder);</span><span class="token comment" spellcheck="true">//            boolBuilder.must(rangeQueryBuilder);</span>            sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>boolBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 排序</span><span class="token comment" spellcheck="true">//            FieldSortBuilder fsb = SortBuilders.fieldSort("date");</span><span class="token comment" spellcheck="true">//            fsb.order(SortOrder.DESC);</span><span class="token comment" spellcheck="true">//            sourceBuilder.sort(fsb);</span>            SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            searchRequest<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Kibana-linux下安装"><a href="#Kibana-linux下安装" class="headerlink" title="Kibana linux下安装"></a>Kibana linux下安装</h3><ul><li>下载地址：<a href="https://www.elastic.co/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/downloads/kibana</a></li><li><p>解压：tar zxvf kibana-6.4.0-linux-x64.tar.gz</p><p><strong>配置</strong><br><a href="https://www.elastic.co/guide/cn/kibana/current/settings.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/kibana/current/settings.html</a></p><pre><code>server.port: 5601server.host: &quot;192.168.1.191&quot;elasticsearch.url: &quot;http://192.168.1.191:9200&quot;</code></pre><p><strong>启动</strong> </p><pre><code>./kibana  //不能关闭终端nohup  ./kibana &gt; /nohub.out &amp;  //可关闭终端，在nohup.out中查看log在浏览器中访问：http://192.168.1.191:5601/</code></pre></li></ul><h3 id="FileBeats-与-LogStash-的安装"><a href="#FileBeats-与-LogStash-的安装" class="headerlink" title="FileBeats 与 LogStash 的安装"></a>FileBeats 与 LogStash 的安装</h3><ul><li>LogStash 可以用来对日志进行收集并进行过滤整理后输出到 ES 中，FileBeats 是一个更加轻量级的日志收集工具。 </li><li>现在最常用的方式是通过 FileBeats 收集目标日志，然后统一输出到 LogStash 做进一步的过滤，在由 LogStash 输出到 ES 中进行存储。</li></ul><p>官方提供了压缩包下载， <a href="https://www.elastic.co/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/downloads/logstash</a> 。 下载完成后解压即可。</p><pre><code>tar zxvf logstash-6.2.2.tar.gz###  进入目录cd logstash-6.2.2</code></pre><p>LogStash 的运行需要指定一个配置文件，来指定数据的流向，我们在当前目录下创建一个 first.conf 文件，其内容如下:</p><pre><code>###  配置输入为 beatsinput {    beats {            port =&gt; &quot;5044&quot;    }}###  数据过滤filter {    grok {            match =&gt; { &quot;message&quot; =&gt; &quot;%{COMBINEDAPACHELOG}&quot; }    }    geoip {            source =&gt; &quot;clientip&quot;    }}# 输出到本机的 ESoutput {    elasticsearch {            hosts =&gt; [ &quot;192.168.1.191:9200&quot;  ]    }}</code></pre><p>上面配置了 LogStash 输出日志到 ES 中 配置完成后就可以通过如下方式启动 LogStash 了</p><pre><code>bin/logstash -f first.conf --config.reload.automatic</code></pre><h3 id="安装运行-FileBeats"><a href="#安装运行-FileBeats" class="headerlink" title="安装运行 FileBeats"></a>安装运行 FileBeats</h3><p>FileBeats 也提供了下载包，地址为 <a href="https://www.elastic.co/downloads/beats/filebeat" target="_blank" rel="noopener">https://www.elastic.co/downloads/beats/filebeat</a> 。找到系统对应的包下载后解压即可。</p><pre><code>tar zxvf filebeat-6.2.2-darwin-x86_64.tar.gzcd filebeat-6.2.2-darwin-x86_64</code></pre><p>进入目录编辑 filebeat.yml 找到对应的配置项，配置如下</p><pre><code>- type: log   # Change to true to enable this prospector configuration.    enabled: True    # Paths that should be crawled and fetched. Glob based paths.    # 读取 Nginx 的日志    paths:      - /usr/local/nginx/logs/*.log# 输出到本机的 LogStashoutput.logstash:  # The Logstash hosts  hosts: [&quot;localhost:5044&quot;]</code></pre><h3 id="配置完成后执行如下命令，启动-FileBeat-即可"><a href="#配置完成后执行如下命令，启动-FileBeat-即可" class="headerlink" title="配置完成后执行如下命令，启动 FileBeat 即可"></a>配置完成后执行如下命令，启动 FileBeat 即可</h3><pre><code># FileBeat 需要以 root 身份启动，因此先更改配置文件的权限sudo chown root filebeat.ymlsudo ./filebeat -e -c filebeat.yml -d &quot;publish&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase快速入门</title>
      <link href="/2018/08/13/java/hbase-kuai-su-ru-men/"/>
      <url>/2018/08/13/java/hbase-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="Apache-HBase"><a href="#Apache-HBase" class="headerlink" title="Apache HBase"></a>Apache HBase</h3><ul><li>Apache HBase™是Hadoop数据库，是一个分布式，可扩展的大数据存储。</li><li>当您需要对大数据进行随机，实时读/写访问时，请使用Apache HBase™。该项目的目标是托管非常大的表 - 数十亿行X百万列 - 在商品硬件集群上。Apache HBase是一个开源的，分布式的，版本化的非关系数据库</li></ul><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li>线性和模块化可扩展性。</li><li>严格一致的读写操作。</li><li>表的自动和可配置分片</li><li>RegionServers之间的自动故障转移支持。</li><li>方便的基类，用于使用Apache HBase表支持Hadoop MapReduce作业。</li><li>易于使用的Java API，用于客户端访问。</li><li>阻止缓存和布隆过滤器以进行实时查询。</li><li>查询谓词通过服务器端过滤器下推</li><li>Thrift网关和REST-ful Web服务，支持XML，Protobuf和二进制数据编码选项</li><li>可扩展的基于jruby（JIRB）的外壳</li><li>支持通过Hadoop指标子系统将指标导出到文件或Ganglia; 或通过JMX</li></ul><h3 id="安装-独立HBase"><a href="#安装-独立HBase" class="headerlink" title="安装  独立HBase"></a>安装  独立HBase</h3><p>HBase要求安装JDK。有关支持的JDK版本的信息<br><img src="https://images.gitee.com/uploads/images/2018/0809/161554_01933e92_1478371.png" alt="输入图片说明" title="屏幕截图.png"></p><p>从此Apache下载镜像列表中选择一个下载站点。单击建议的顶部链接。这将带您进入HBase版本的镜像。单击名为stable的文件夹，然后将以.tar.gz结尾的二进制文件下载到本地文件系统。暂时不要下载以src.tar.gz结尾的文件。</p><p>解压缩下载的文件，然后切换到新创建的目录。</p><pre><code>$ tar -xzvf hbase-1.2.6.1-bin.tar.gz</code></pre><p>为HBase设置Java目录，并从conf文件夹打开hbase-env.sh文件。编辑JAVA_HOME环境变量，改变路径到当前JAVA_HOME变量</p><pre><code>#编辑/home/hbase-1.2.6.1/conf/hbase-env.sh#配置hbase-env.sh文件：把29行的注释取消，配置虚拟机上面的Java地址export JAVA_HOME=/usr/local/java/jdk1.7.0_79</code></pre><p>编辑conf/hbase-site.xml，这是主要的HBase配置文件</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>configuration<span class="token operator">></span>    <span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  配置hbase存在位置<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>name<span class="token operator">></span>hbase<span class="token punctuation">.</span>rootdir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>value<span class="token operator">></span>file<span class="token operator">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//home/pflm/HBase/HFiles&lt;/value></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>      <span class="token operator">&lt;</span>property<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  配置hbase文件保存路径<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>name<span class="token operator">></span>hbase<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>property<span class="token punctuation">.</span>dataDir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token operator">/</span>home<span class="token operator">/</span>pflm<span class="token operator">/</span>HBase<span class="token operator">/</span>zookeeper<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span></code></pre><p>到此 HBase 的安装配置已成功完成。可以通过使用 HBase 的 bin 文件夹中提供 start-hbase.sh 脚本启动 HBase</p><pre><code>$ ./bin/start-hbase.sh</code></pre><p>运行HBase启动脚本，它会提示一条消息：HBase has started</p><pre><code>starting master, logging to /usr/local/HBase/bin/../logs/hbase-tpmaster-localhost.localdomain.out</code></pre><ul><li>该./start-hbase.sh脚本是作为启动HBase的一种便捷方式。发出命令，如果一切顺利，将在标准输出中记录一条消息，显示HBase已成功启动。您可以使用该jps命令验证是否有一个正在运行的进程HMaster。在独立模式下，HBase运行此单个JVM中的所有守护程序，即HMaster，单个HRegionServer和ZooKeeper守护程序。转到<code>http：// localhost：16010</code>以查看HBase Web UI。</li></ul><h3 id="HBase-Shell"><a href="#HBase-Shell" class="headerlink" title="HBase Shell"></a>HBase Shell</h3><p>要访问HBase shell，必须导航进入到HBase的主文件夹。</p><pre><code>#进入shell/bin/hbase shell#列出HBase的所有表。hbase(main):001:0&gt; listTABLE</code></pre><p> <strong>通用命令</strong> </p><pre><code>status: 提供HBase的状态，例如，服务器的数量。version: 提供正在使用HBase版本。table_help: 表引用命令提供帮助whoami: 提供有关用户的信息。</code></pre><p> <strong>HBase在表中操作的命令。</strong> </p><pre><code>create: 创建一个表。list: 列出HBase的所有表。disable: 禁用表。is_disabled: 验证表是否被禁用。enable: 启用一个表。is_enabled: 验证表是否已启用。describe: 提供了一个表的描述。alter: 改变一个表。exists: 验证表是否存在。drop: 从HBase中删除表。drop_all: 丢弃在命令中给出匹配“regex”的表</code></pre><p> <strong>数据操纵语言</strong> </p><pre><code>put: 把指定列在指定的行中单元格的值在一个特定的表。get: 取行或单元格的内容。delete: 删除表中的单元格值。deleteall: 删除给定行的所有单元格。scan: 扫描并返回表数据。count: 计数并返回表中的行的数目。truncate: 禁用，删除和重新创建一个指定的表。</code></pre><h3 id="解决Java-API不能远程访问HBase的问题"><a href="#解决Java-API不能远程访问HBase的问题" class="headerlink" title="解决Java API不能远程访问HBase的问题"></a>解决Java API不能远程访问HBase的问题</h3><p> <strong>1、配置Linux的hostname</strong> </p><pre><code>[root@CentOS124 hbase-1.2.6.1]# vie /etc/sysconfig/networkNETWORKING=yesHOSTNAME=CentOS124   #名字随便</code></pre><p>这里配置的hostname要Linux重启才生效，为了不重启就生效，我们可以执行：hostname CentOS124命令，暂时设置hostname</p><p> <strong>2、配置Linux的hosts，映射ip的hostname的关系</strong> </p><pre><code>#映射ip的hostname的关系[root@CentOS124 hbase-1.2.6.1]# vim /etc/host#查看hbase ip绑定是否成功[root@CentOS124 hbase-1.2.6.1]# netstat -anp|grep 16010</code></pre><p><img src="https://images.gitee.com/uploads/images/2018/0809/183717_9b723e58_1478371.png" alt="输入图片说明" title="屏幕截图.png"></p><p> <strong>3、配置访问windows的hosts</strong> </p><pre><code>#hbase192.168.10.124  CentOS124</code></pre><h1 id="Java-操作远程hbase"><a href="#Java-操作远程hbase" class="headerlink" title="Java 操作远程hbase"></a>Java 操作远程hbase</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HbaseTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  Connection connection<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Configuration configuration<span class="token punctuation">;</span>     <span class="token keyword">static</span> <span class="token punctuation">{</span>         configuration <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置连接参数：HBase数据库使用的端口</span>        configuration<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.property.clientPort"</span><span class="token punctuation">,</span> <span class="token string">"2181"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置连接参数：HBase数据库所在的主机IP</span>        configuration<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"192.168.10.124"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// configuration.addResource("hbase-site.xml");</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 取得一个数据库连接对象</span>            connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token function">createTable</span><span class="token punctuation">(</span><span class="token string">"gazw"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        deleteTable("gazw");</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createTable</span><span class="token punctuation">(</span>String tableName<span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> cf1<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>         Admin admin <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//HTD需要TableName类型的tableName，创建TableName类型的tableName</span>        TableName tbName <span class="token operator">=</span> TableName<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断表述否已存在，不存在则创建表</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">tableExists</span><span class="token punctuation">(</span>tbName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表"</span> <span class="token operator">+</span> tableName <span class="token operator">+</span> <span class="token string">"已存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//通过HTableDescriptor创建一个HTableDescriptor将表的描述传到createTable参数中</span>        HTableDescriptor HTD <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTableDescriptor</span><span class="token punctuation">(</span>tbName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//为描述器添加表的详细参数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String cf <span class="token operator">:</span> cf1<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建HColumnDescriptor对象添加表的详细的描述</span>            HColumnDescriptor HCD <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HColumnDescriptor</span><span class="token punctuation">(</span>cf<span class="token punctuation">)</span><span class="token punctuation">;</span>            HTD<span class="token punctuation">.</span><span class="token function">addFamily</span><span class="token punctuation">(</span>HCD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//调用createtable方法创建表</span>        admin<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span>HTD<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka安装搭建以及SpringBoot集成</title>
      <link href="/2018/08/05/java/kafka-an-zhuang-da-jian-yi-ji-springboot-ji-cheng/"/>
      <url>/2018/08/05/java/kafka-an-zhuang-da-jian-yi-ji-springboot-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="kafka介绍"><a href="#kafka介绍" class="headerlink" title="kafka介绍"></a>kafka介绍</h3><p>根据官网的介绍，ApacheKafka®是一个分布式流媒体平台，它主要有3种功能：</p><ul><li>发布和订阅消息流，这个功能类似于消息队列，这也是kafka归类为消息队列框架的原因</li><li>以容错的方式记录消息流，kafka以文件的方式来存储消息流</li><li>可以再消息发布的时候进行处理</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>在系统或应用程序之间构建可靠的用于传输实时数据的管道，消息队列功能</li><li>建实时的流数据处理程序来变换或处理数据流，数据处理功能</li></ul><p> <strong>Kafka目前主要作为一个分布式的发布订阅式的消息系统使用  下图为消息传输流程</strong> </p><p><img src="https://images.gitee.com/uploads/images/2018/0803/172529_eb95e4cd_1478371.png" alt="输入图片说明"></p><ul><li>Producer即生产者，向Kafka集群发送消息，在发送消息之前，会对消息进行分类，即Topic，上图展示了两个producer发送了分类为topic1的消息，另外一个发送了topic2的消息。</li><li>Topic即主题，通过对消息指定主题可以将消息分类，消费者可以只关注自己需要的Topic中的消息</li><li>Consumer即消费者，消费者通过与kafka集群建立长连接的方式，不断地从集群中拉取消息，然后可以对这些消息进行处理。</li></ul><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>在kafka官网 <a href="http://kafka.apache.org/downloads下载到最新的kafka安装包，选择下载二进制版本的tgz文件" target="_blank" rel="noopener">http://kafka.apache.org/downloads下载到最新的kafka安装包，选择下载二进制版本的tgz文件</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>首先确保你的机器上安装了jdk，kafka需要java运行环境，以前的kafka还需要zookeeper，新版的kafka已经内置了一个zookeeper环境，所以我们可以直接使用。</li><li>如果只需要进行最简单的尝试的话我们只需要解压到任意目录即可，这里我们将kafka压缩包解压到/home目录<br><img src="https://images.gitee.com/uploads/images/2018/0803/174343_e2ae8023_1478371.png" alt="输入图片说明"></li></ul><p>kafka解压目录下下有一个config的文件夹，里面放置的是我们的配置文件</p><p>consumer.properites 消费者配置</p><p>producer.properties 生产者配置</p><p> <strong>server.properties kafka服务器的配置，此配置文件用来配置kafka服务器 目前仅介绍几个最基础的配置</strong> </p><ul><li>broker.id 申明当前kafka服务器在集群中的唯一ID，需配置为integer,并且集群中的每一个kafka服务器的id都应是唯一的，我们这里采用默认配置即可</li><li>listeners 申明此kafka服务器需要监听的端口号，如果是在本机上跑虚拟机运行可以不用配置本项，默认会使用localhost的地址，如果是在远程服务器上运行则必须配置，例如：　<code>listeners=PLAINTEXT:// 192.168.180.128:9092</code>。并确保服务器的9092端口能够访问</li><li>zookeeper.connect 申明kafka所连接的zookeeper的地址 ，需配置为zookeeper的地址，由于本次使用的是kafka高版本中自带zookeeper，使用默认配置即可 <code>zookeeper.connect=localhost:2181</code></li></ul><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>启动zookeeper</p><pre><code>#前台启动[root@CentOS124 home]# cd kafka2.11/[root@CentOS124 kafka2.11]# bin/zookeeper-server-start.sh config/zookeeper.properties#后台启动[root@CentOS124 kafka2.11]# bin/zookeeper-server-start.sh config/zookeeper.properties 1&gt;/dev/null 2&gt;&amp;1 &amp;[1] 18466#查看是否启动成功[root@CentOS124 ~]#  ps -ef|grep kafka</code></pre><p>启动kafka</p><pre><code>[root@CentOS124 kafka2.11]# bin/kafka-server-start.sh config/server.properties#后台启动[root@CentOS124 kafka2.11]# bin/kafka-server-start.sh config/server.properties 1&gt;/dev/null 2&gt;&amp;1 &amp;#创建 topic[root@CentOS124 kafka2.11]# bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test#查看Kafka 中的 topic 列表bin/kafka-topics.sh --list --zookeeper localhost:2181</code></pre><h3 id="配置kafka集群"><a href="#配置kafka集群" class="headerlink" title="配置kafka集群"></a>配置kafka集群</h3><ul><li>条件有限，在同一个机器上启动三个broker来模拟kafka集群，三个broker使用另外安装的同一个zookeeper服务（实际集群中，每个broker通常在不同的机器上，也会使用不同host的zookeeper）</li></ul><pre><code>#复制server.properties配置文件为三份，分别起名为server.properties，server-2.properties，server-3.properties三份配置中都要修改以下#三个配置中分别修改为0,2,3broker.id=0#三个配置中分别修改为9092,9093,9094port=9092#kafka-logs，kafka-logs-2，kafka-logs-3log.dirs=/tmp/kafka-logs#都设置为3，即每个topic默认三个partitionnum.partitions=3#zookeeper集群地址，外部可以配置，这里环境有限  使用默认既可zookeeper.connect=localhost:2181#分别进入kafka目录下 执行如下命令启动服务控制台输出日子完成了bin/kafka-server-start.sh config/server.propertiesbin/kafka-server-start.sh config/server-2.propertiesbin/kafka-server-start.sh config/server-3.properties</code></pre><h3 id="springBoot中如何使用kafka"><a href="#springBoot中如何使用kafka" class="headerlink" title="springBoot中如何使用kafka"></a>springBoot中如何使用kafka</h3><p>首先创建一个springBoot项目 引入spring-kafka<br><img src="https://images.gitee.com/uploads/images/2018/0805/121233_6d03045f_1478371.png" alt="输入图片说明" title="屏幕截图.png"></p><p> <strong>application.properties 配置</strong> </p><pre><code>server.port=8080#kafka地址 brokers集群地址用,隔开spring.kafka.bootstrap-servers=127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094#生产者的配置，大部分我们可以使用默认的，这里列出几个比较重要的属性#每批次发送消息的数量spring.kafka.producer.batch-size=16#发送失败重试次数spring.kafka.producer.retries=0#即32MB的批处理缓冲区spring.kafka.producer.buffer-memory=33554432#key序列化方式spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializerspring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer#消费者的配置##Kafka中没有初始偏移或如果当前偏移在服务器上不再存在时,默认区最新 ，有三个选项 【latest, earliest, none】spring.kafka.consumer.auto-offset-reset=latest#是否开启自动提交spring.kafka.consumer.enable-auto-commit=true#自动提交的时间间隔spring.kafka.consumer.auto-commit-interval=100#key的解码方式spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer#value的解码方式spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer#在kafka/config文件的consumer.properties中有配置spring.kafka.consumer.group-id=test-consumer-group</code></pre><p> <strong>创建Producer生产者</strong> </p><pre><code>package com.example.modules;import com.alibaba.fastjson.JSONObject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.kafka.core.KafkaTemplate;import org.springframework.stereotype.Component;import java.util.Date;/** * 〈生产者〉 * @author qinxuewu * @create 18/8/4下午11:56 * @since 1.0.0 */@Componentpublic class Producer {    @Autowired    private KafkaTemplate kafkaTemplate;    //发送消息方法    public void send() {        JSONObject obj=new JSONObject();        obj.put(&quot;id&quot;,System.currentTimeMillis());        obj.put(&quot;name&quot;,&quot;生产者发送消息&quot;);        obj.put(&quot;date&quot;,new Date());        //这个 topic 在 Java 程序中是不需要提前在 Kafka 中设置的，因为它会在发送的时候自动创建你设置的 topic        kafkaTemplate.send(&quot;qxw&quot;,obj.toString());    }}</code></pre><p> <strong>创建消费者</strong> </p><pre><code>@Componentpublic class Consumer {    private static final Logger logger = LoggerFactory.getLogger(Consumer.class);    /**     *  同时监听两个 topic 的消息了，可同时监听多个topic     * @param record     * @throws Exception     */    @KafkaListener(topics = {&quot;test&quot;,&quot;qxw&quot;})    public void listen (ConsumerRecord&lt;?, ?&gt; record) throws Exception {        Optional&lt;?&gt; kafkaMessage = Optional.ofNullable(record.value());        if (kafkaMessage.isPresent()) {            Object message = kafkaMessage.get();            logger.info(&quot;消费者开始消费message：&quot; + message);        }    }}</code></pre><p> <strong>运行后就可以看到控制台输出了</strong> </p><pre><code>@RunWith(SpringRunner.class)                  @SpringBootTest                               public class KafkaDemoApplicationTests {          @Autowired                                    private Producer producer;                    @Test                                         public void contextLoads() {                      for (int i = 0; i &lt;3 ; i++) {                     producer.send();                              try {                                             Thread.sleep(1000);                       } catch (InterruptedException e) {                e.printStackTrace();                      }                                         }                                         }                                         }                                             </code></pre><h3 id="kafka-配置文件参数详解"><a href="#kafka-配置文件参数详解" class="headerlink" title="kafka 配置文件参数详解"></a><a href="https://www.cnblogs.com/alan319/p/8651434.html" target="_blank" rel="noopener">kafka 配置文件参数详解</a></h3><p><a href="https://www.cnblogs.com/alan319/p/8651434.html" target="_blank" rel="noopener">https://www.cnblogs.com/alan319/p/8651434.html</a><br>kafka的配置分为 broker、producter、consumer三个不同的配置</p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单微信小程序个人博客</title>
      <link href="/2018/01/21/spring-xi-lie/jian-dan-wei-xin-xiao-cheng-xu-ge-ren-bo-ke/"/>
      <url>/2018/01/21/spring-xi-lie/jian-dan-wei-xin-xiao-cheng-xu-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h4 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>简单微信笔记小程序.</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a><a href="https://a870439570.github.io/blog-sharon/" target="_blank" rel="noopener">文档</a></h3><ul><li><a href="https://a870439570.github.io/blog-sharon/" target="_blank" rel="noopener">https://a870439570.github.io/blog-sharon/</a></li></ul><h3 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h3><ul><li>SpringBoot2.0 h2数据库</li><li>html2wxml  用于微信小程序的HTML和Markdown格式的富文本渲染组件，支持代码高亮（<a href="https://gitee.com/qwqoffice/html2wxml）部署小程序需要集成插件" target="_blank" rel="noopener">https://gitee.com/qwqoffice/html2wxml）部署小程序需要集成插件</a></li></ul><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138bfa35e1a81?w=327&amp;h=686&amp;f=png&amp;s=138430" alt="输入图片说明"></p><h3 id="分类列"><a href="#分类列" class="headerlink" title="分类列"></a>分类列</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138bfa34f4106?w=308&amp;h=678&amp;f=png&amp;s=160844" alt="输入图片说明"><br><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138bfa364a99d?w=313&amp;h=689&amp;f=png&amp;s=67782" alt="输入图片说明"></p><h3 id="详情页"><a href="#详情页" class="headerlink" title="详情页"></a>详情页</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138bfa37c7a18?w=311&amp;h=683&amp;f=png&amp;s=126084" alt="输入图片说明"></p><h3 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138bfa5a4ecfe?w=315&amp;h=683&amp;f=png&amp;s=40744" alt="输入图片说明"><br><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138bfa5b74b1b?w=318&amp;h=693&amp;f=png&amp;s=40358" alt="输入图片说明"></p><h3 id="海报分享"><a href="#海报分享" class="headerlink" title="海报分享"></a>海报分享</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138c0383f0173?w=319&amp;h=688&amp;f=png&amp;s=196882" alt="输入图片说明"></p><h3 id="体验地址"><a href="#体验地址" class="headerlink" title="体验地址"></a>体验地址</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/6/168214b1982a6a93?w=2800&amp;h=800&amp;f=jpeg&amp;s=164058" alt="输入图片说明"></p><h3 id="后端项目-Halo-可能是最好的-Java-博客系统。"><a href="#后端项目-Halo-可能是最好的-Java-博客系统。" class="headerlink" title="后端项目 Halo 可能是最好的 Java 博客系统。"></a>后端项目 Halo 可能是最好的 Java 博客系统。</h3><p><strong>Halo</strong> [ˈheɪloʊ]，意为光环。当然，你也可以当成拼音读(哈喽)。</p><p>轻快，简洁，功能强大，使用 Java 开发的博客系统。</p><p><a href="https://jq.qq.com/?_wv=1027&amp;k=5PIRvFq" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/QQ%E7%BE%A4-924715723-yellowgreen.svg" alt="QQ群"></a><br><a href="https://gitee.com/qinxuewu" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Gitee-%E7%A0%81%E4%BA%91-yellow.svg" alt="码云"></a><br><a href="https://github.com/a870439570/blog-sharon" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Github-Github-red.svg" alt="Github"></a></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
